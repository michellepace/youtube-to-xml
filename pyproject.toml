# =================================
# Build System
# =================================

[build-system]
requires = ["uv_build>=0.8.4,<0.9.0"]
build-backend = "uv_build"


# =================================
# Project Metadata & Configuration
# =================================

[project]
name = "youtube-to-xml"
version = "0.1.0"
description = "Convert YouTube transcripts to structured XML format"
readme = "README.md"
authors = [ { name = "Michelle", email = "" } ]
requires-python = ">=3.13"
dependencies = [        # runtime
    "yt-dlp>=2025.9.23",
]

# CLI entry points
[project.scripts]
youtube-to-xml = "youtube_to_xml.cli:main"

# Development dependencies 
[dependency-groups]
dev = [
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "ruff>=0.13.1",
]

# =================================
# Package Manager Configuration
# =================================

# Allow PyPI nightly builds (‚ùå DISABLED to use stable releases only)
#   for example yt-dlp dev versions like "2025.9.19.232813.dev0"
#   but manual upgrade still needed, run `uv lock --upgrade`
#[tool.uv]
#prerelease = "allow"


# =================================
# Pytest Configuration
# =================================

[tool.pytest.ini_options]
markers = [
    "integration: tests that use download from YouTube via `yt-dlp` API"
]

# =================================
# Pyright Type Checking
# =================================

[tool.pyright]
# Type Checker is needed as Ruff is only a linter: https://docs.astral.sh/ruff/faq/
# For Cursor (Cursor Pyright extension), for VSCode (Microsoft Pylance)
# Cursor Pyright forks BasedPyright, some lint rules overlap with Ruff, causes dupe errors

typeCheckingMode = "standard" # Cursor Pyright default
pythonVersion = "3.13"

# Disable Basedpyright rules that duplicate Ruff
reportUnusedImport = false      # Ruff F401 handles it
reportUnusedVariable = false    # Ruff F841 handles it
reportDuplicateImport = false   # Ruff F811 handles it
reportUnusedParameter = false   # Ruff ARG001 handles it

# =================================
# Ruff Linter Configuration
# =================================

[tool.ruff]
# Strictest ruff settings
line-length = 90
target-version = "py313"

[tool.ruff.lint]
# Enable all available rules
select = ["ALL"]
# Only ignore rules that are incompatible or overly pedantic
ignore = [
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "D203",    # 1 blank line required before class docstring (conflicts with D211)
    "D213",    # Multi-line docstring summary should start at the second line (conflicts with D212)
    "COM812",  # Trailing comma missing (conflicts with formatter)
    "ISC001",  # Implicitly concatenated string literals on one line (conflicts with formatter)
    "T201",    # Print found (allow print statements)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 5
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D103",    # Missing docstring in public function  
    "PLR2004", # Magic value used in comparison
    "S101",    # Use of assert detected
    "S314",    # XML parsing (safe in tests with self-generated XML)
    "S607",    # Partial executable paths (controlled test env)
]
"src/youtube_to_xml/cli.py" = [
    "TRY400",  # Use logger.error for handled user errors (not exceptions needing traceback)
]
