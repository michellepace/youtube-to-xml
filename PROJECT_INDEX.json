{"at":"2025-09-08T08:54:24.842445","root":".","tree":[".","\u251c\u2500\u2500 example_transcripts/","\u251c\u2500\u2500 scripts/ (2 files)","\u251c\u2500\u2500 src/ (7 files)","\u2502   \u2514\u2500\u2500 youtube_to_xml/ (7 files)","\u251c\u2500\u2500 tests/ (6 files)","\u251c\u2500\u2500 pyproject.toml","\u2514\u2500\u2500 README.md"],"stats":{"total_files":16,"total_directories":17,"fully_parsed":{"python":15},"listed_only":{"json":1},"markdown_files":3},"f":{"scripts/url_to_transcript.py":["p",["seconds_to_timestamp:58:(seconds:float, *, show_hours_if_zero:bool = False)>str::Convert seconds to H:MM:SS or M:SS format.","fetch_video_metadata:117:(url:str)>VideoMetadata:extract_subtitle_url:","extract_subtitle_url:162:(info:dict)>str | None::","download_and_parse_subtitles:182:(url:str)>list[IndividualSubtitle]:extract_subtitles_from_json3:","extract_subtitles_from_json3:216:(events:list)>list[IndividualSubtitle]::","parse_transcript_api:250:(metadata:VideoMetadata, subtitles:list[IndividualSubtitle])>list[Chapter]::","format_date:298:(date_string:str)>str::","format_duration:316:(seconds:int)>str::","create_xml_document:343:(metadata:VideoMetadata, chapters:list[Chapter])>str:format_content,format_date,format_duration,format_xml_output,seconds_to_timestamp:","format_xml_output:378:(element:ET.Element)>str::","fetch_and_parse_subtitles:391:(metadata:VideoMetadata)>list[IndividualSubtitle]:download_and_parse_subtitles:","generate_summary_stats:417:(chapters:list[Chapter])>None::","sanitize_title_for_filename:429:(title:str)>str::","convert_youtube_to_xml:447:(video_url:str, execution_id:str)>tuple[str, VideoMetadata]:create_xml_document,fetch_and_parse_subtitles,fetch_video_metadata,format_duration,generate_summary_stats,parse_transcript_api:","save_transcript:499:(video_url:str, execution_id:str)>None:convert_youtube_to_xml,sanitize_title_for_filename:","parse_arguments:522:(args:list[str])>str | None::","main:537:()>None:parse_arguments,save_transcript:Command-line interface entry point."],{"VideoMetadata":["71",[]],"IndividualSubtitle":["83",[]],"Chapter":["91",["duration:100:(self)>float::Calculate chapter duration.","format_content:104:(self)>str:seconds_to_timestamp:Format individual subtitles as timestamped text for XML output."]]}],"src/youtube_to_xml/cli.py":["p",["parse_arguments:17:()>argparse.Namespace::Parse command-line arguments.","main:48:()>None:parse_arguments:Main entry point for YouTube to XML converter."]],"src/youtube_to_xml/exceptions.py":["p",{"BaseTranscriptError":["4",["__init__:7:(self, message:str)>None:__init__:Initialize the exception with a custom message."]],"FileEmptyError":["12",["__init__:15:(self, message:str = \"Cannot parse an empty transcript file\")>None:__init__:Initialize the exception with a custom message."]],"FileInvalidFormatError":["20",["__init__:29:(self, message:str = \"Transcript file must start with a chapter title, not a timestamp\",)>None:__init__:Initialize the exception with a custom message."]],"URLFormatError":["34",["__init__:37:(self, message:str = \"Invalid YouTube URL format\")>None:__init__:Initialize the exception with a custom message."]],"URLVideoNotFoundError":["42",["__init__:45:(self, message:str = \"YouTube video not found or unavailable\")>None:__init__:Initialize the exception with a custom message."]],"URLSubtitlesNotFoundError":["50",["__init__:53:(self, message:str = \"No subtitles available for this video\")>None:__init__:Initialize the exception with a custom message."]],"URLRateLimitError":["58",["__init__:64:(self, message:str = \"YouTube rate limit in force, transcript temporarily unavailable\",)>None:__init__:Initialize the exception with a custom message."]]}],"src/youtube_to_xml/file_parser.py":["p",["timestamp_to_seconds:39:(timestamp_str:str)>float::","seconds_to_timestamp:77:(seconds:float)>str::","find_timestamps:115:(transcript_lines:Sequence[str])>list[int]::Find all timestamp line indices in the transcript.","validate_transcript_format:124:(raw_transcript:str)>None::","_find_first_chapter:163:(transcript_lines:list[str], timestamp_indices:list[int])>dict | None:timestamp_to_seconds:Find first chapter metadata if transcript starts with a title.","_find_subsequent_chapters:178:(transcript_lines:list[str], timestamp_indices:list[int])>list[dict]:timestamp_to_seconds:Find subsequent chapters using the 2-line gap rule.","_extract_content_for_chapters:200:(transcript_lines:list[str], chapter_metadata:list[dict])>list[Chapter]::Extract content lines for each chapter and create Chapter objects.","parse_transcript_file:227:(raw_transcript:str)>list[Chapter]:_extract_content_for_chapters,_find_first_chapter,_find_subsequent_chapters,find_timestamps,validate_transcript_format:"],{"Chapter":["101",["duration:110:(self)>float::Calculate chapter duration."]]}],"src/youtube_to_xml/logging_config.py":["p",["setup_logging:7:(log_file:str = \"youtube_to_xml.log\")>None::","get_logger:44:(name:str)>logging.Logger::"]],"src/youtube_to_xml/url_to_transcript_wrapper.py":["p",["main:30:()>None::Entry point wrapper for url_to_transcript script."]],"src/youtube_to_xml/xml_builder.py":["p",["chapters_to_xml:11:(chapters:list[Chapter])>str::Build complete YouTube transcript XML document from chapters."]],"tests/test_cli.py":["p",["test_valid_transcript_creates_xml:7:(tmp_path:Path)>None::","test_missing_file_shows_error:30:(tmp_path:Path)>None::","test_empty_file_shows_error:43:(tmp_path:Path)>None::","test_invalid_format_shows_error:60:(tmp_path:Path)>None::"]],"tests/test_end_to_end.py":["p",["run_cli_command:28:(args:list[str], tmp_path:Path)>subprocess.CompletedProcess[str]::Run the main CLI command.","run_youtube_script:40:(url:str, tmp_path:Path)>subprocess.CompletedProcess[str]::Run experimental YouTube script.","setup_reference_file:62:(tmp_path:Path, reference_name:str)>Path::Copy reference file to tmp directory for testing.","assert_files_identical:70:(actual:Path, expected:Path)>None::Assert two files are identical using cross-platform comparison.","test_file_multi_chapters_success:90:(tmp_path:Path)>None:assert_files_identical,run_cli_command,setup_reference_file:Test CLI processing of file with multiple chapters.","test_file_chapters_with_blanks_success:108:(tmp_path:Path)>None:assert_files_identical,run_cli_command,setup_reference_file:Test CLI processing of file with chapters containing blank lines.","test_file_invalid_format_error:125:(tmp_path:Path)>None:run_cli_command:Test CLI error handling for invalid transcript format.","test_url_multi_chapters_success:138:(tmp_path:Path)>None:assert_files_identical,run_youtube_script,setup_reference_file:Test YouTube fetcher with multi-chapter video.","test_url_multi_chapters_shared_success:155:(tmp_path:Path)>None:assert_files_identical,run_youtube_script,setup_reference_file:Test YouTube fetcher with shared URL format containing parameters.","test_url_single_chapter_success:172:(tmp_path:Path)>None:assert_files_identical,run_youtube_script,setup_reference_file:Test YouTube fetcher with single-chapter video.","test_url_no_subtitles_error:189:(tmp_path:Path)>None:run_youtube_script:Test YouTube fetcher exits with error when video has no subtitles.","test_url_invalid_format_error:202:(tmp_path:Path)>None:run_youtube_script:Test YouTube fetcher error handling for invalid URL.","test_url_vs_file_equivalent_output:214:(tmp_path:Path)>None:run_cli_command,run_youtube_script:Test URL vs file processing equivalence using direct XML parsing."]],"tests/test_exceptions.py":["p",{"TestBaseTranscriptError":["26",["test_base_exception_creation:29:(self)>None::Test base exception can be created with custom message.","test_base_exception_inheritance:35:(self)>None::Test that base exception inherits from Exception."]],"TestExceptionMessages":["41",["test_all_exceptions_have_default_messages:44:(self)>None::Test that all exceptions have non-empty default messages."]],"TestExceptionHierarchy":["53",["test_all_exceptions_inherit_from_base:56:(self)>None::Test that all custom exceptions inherit from BaseTranscriptError.","test_base_exception_can_catch_all:63:(self)>None:_raise_exception:Test that catching BaseTranscriptError catches all custom exceptions.","_raise_exception:66:(exc:Exception)>None::Helper function to raise exceptions for testing."]],"TestExceptionUsagePatterns":["76",["test_raising_and_catching_specific_exceptions:79:(self)>None::Test raising and catching specific exception types.","test_raising_and_catching_base_exception:87:(self)>None::Test raising and catching the base exception type.","test_all_exceptions_preserve_custom_messages:93:(self)>None::Test that all exceptions preserve custom messages exactly."]]}],"tests/test_file_parser.py":["p",["simple_transcript:26:()>str::Basic valid transcript with one chapter.","two_chapter_transcript:36:()>str::Transcript with two chapters using subsequent detection.","complex_transcript:49:()>str::Realistic transcript with multiple chapters and timestamps.","test_valid_timestamps:71:(timestamp:str)>None::Verify regex matches valid timestamp formats.","test_invalid_timestamps:77:(invalid:str)>None::Verify regex rejects invalid patterns.","test_finds_all_timestamp_indices:82:(simple_transcript:str)>None::Find all timestamp line indices in multi-line text.","test_validation_passes_for_valid_transcript:95:(simple_transcript:str)>None::Valid transcript passes validation.","test_parses_valid_transcript_format:100:()>None::File following exact required format should parse successfully.","test_parses_valid_format_with_blank_lines:111:()>None::File following exact required format should parse successfully.","test_rejects_transcript_starting_with_timestamp:123:()>None::File that starts with timestamp (like sample-00-chapters.txt) should fail.","test_rejects_empty_transcript:134:()>None::Empty transcript file should raise FileEmptyError.","test_rejects_transcript_without_timestamps:143:()>None::Transcript without any timestamps should raise FileInvalidFormatError.","test_rejects_consecutive_timestamps_after_title:154:()>None::Consecutive timestamps after chapter title should fail format validation.","test_rejects_content_before_first_timestamp:167:()>None::Content before first timestamp should fail format validation.","test_rejects_file_with_insufficient_lines:178:()>None::Files with fewer than 3 lines should fail format validation.","test_finds_first_chapter_from_opening_line:190:(simple_transcript:str)>None::First non-timestamp line becomes a chapter.","test_finds_subsequent_chapter_with_boundary_rule:199:(two_chapter_transcript:str)>None::Chapter detected when exactly 2 lines between timestamps.","test_no_chapter_when_boundary_rule_fails:232:(text:str)>None::No chapter detected when gap is not exactly 2 lines.","test_finds_all_chapters:239:()>None::Multiple chapters detected with correct boundaries.","test_extracts_all_content_for_single_chapter:265:()>None::Single chapter includes all content to end.","test_extracts_correct_content_ranges_for_chapters:286:(two_chapter_transcript:str,)>None::Multiple chapters have correct content ranges.","test_includes_multiple_timestamps_in_chapter_content:302:()>None::Chapter content includes multiple timestamps.","test_parses_complex_transcript_end_to_end:325:(complex_transcript:str)>None::End-to-end test with realistic transcript.","test_handles_special_characters_in_titles:360:()>None::Parsing handles special characters correctly.","test_removes_blank_lines_during_processing:373:()>None::Blank lines are automatically removed from transcript processing.","test_chapter_has_end_time_field:391:(simple_transcript:str)>None::Chapter dataclass should have an end_time field.","test_chapter_timestamps_are_floats_with_duration:397:(two_chapter_transcript:str)>None::Chapter timestamps should be floats with correct duration calculation.","test_complex_timestamps_as_floats:414:(complex_transcript:str)>None::Complex H:MM:SS timestamps should convert to float seconds.","test_timestamp_to_seconds_conversion:433:()>None::Test conversion from timestamp string to float seconds.","test_seconds_to_timestamp_conversion:446:()>None::Test conversion from float seconds to timestamp string.","test_timestamp_to_seconds_raises_error_for_invalid_format:459:()>None::Test that invalid timestamp formats raise FileInvalidFormatError."]],"tests/test_xml_builder.py":["p",["single_chapter:18:()>list[Chapter]::Single chapter with special characters for testing.","multiple_chapters:36:()>list[Chapter]::Multiple chapters for testing.","test_empty_chapters_creates_valid_structure:77:()>None::Empty chapter list creates valid XML with empty chapters element.","test_xml_is_valid_and_parseable:93:(single_chapter:list[Chapter], tmp_path:Path)>None::Generated XML can be parsed successfully by ElementTree.","test_builds_correct_xml_structure:110:(multiple_chapters:list[Chapter])>None::XML has correct structure with proper elements, attributes, and content.","test_escapes_special_xml_characters:144:(single_chapter:list[Chapter])>None::Special XML characters are properly escaped in output.","test_includes_xml_declaration:158:(single_chapter:list[Chapter])>None::XML output includes proper declaration.","test_matches_template_indentation:165:(single_chapter:list[Chapter])>None::XML output follows template indentation: 2 spaces per level, 6 for content."]]},"g":[["URLFormatError.__init__","URLFormatError.__init__"],["BaseTranscriptError.__init__","URLFormatError.__init__"],["test_url_multi_chapters_success","setup_reference_file"],["URLFormatError.__init__","URLSubtitlesNotFoundError.__init__"],["BaseTranscriptError.__init__","URLSubtitlesNotFoundError.__init__"],["test_url_invalid_format_error","run_youtube_script"],["URLSubtitlesNotFoundError.__init__","URLVideoNotFoundError.__init__"],["save_transcript","sanitize_title_for_filename"],["BaseTranscriptError.__init__","BaseTranscriptError.__init__"],["URLRateLimitError.__init__","FileEmptyError.__init__"],["URLSubtitlesNotFoundError.__init__","__init__"],["URLFormatError.__init__","URLVideoNotFoundError.__init__"],["test_url_single_chapter_success","assert_files_identical"],["BaseTranscriptError.__init__","URLVideoNotFoundError.__init__"],["test_url_multi_chapters_shared_success","setup_reference_file"],["FileEmptyError.__init__","URLRateLimitError.__init__"],["URLFormatError.__init__","__init__"],["BaseTranscriptError.__init__","__init__"],["URLVideoNotFoundError.__init__","FileInvalidFormatError.__init__"],["test_file_invalid_format_error","run_cli_command"],["create_xml_document","format_content"],["_find_subsequent_chapters","timestamp_to_seconds"],["test_url_multi_chapters_success","run_youtube_script"],["main","parse_arguments"],["parse_transcript_file","find_timestamps"],["test_url_multi_chapters_shared_success","run_youtube_script"],["URLVideoNotFoundError.__init__","URLRateLimitError.__init__"],["save_transcript","convert_youtube_to_xml"],["download_and_parse_subtitles","extract_subtitles_from_json3"],["FileInvalidFormatError.__init__","URLRateLimitError.__init__"],["URLRateLimitError.__init__","URLFormatError.__init__"],["_find_first_chapter","timestamp_to_seconds"],["FileEmptyError.__init__","URLFormatError.__init__"],["URLRateLimitError.__init__","URLSubtitlesNotFoundError.__init__"],["create_xml_document","format_duration"],["create_xml_document","seconds_to_timestamp"],["FileEmptyError.__init__","FileEmptyError.__init__"],["parse_transcript_file","_find_subsequent_chapters"],["URLRateLimitError.__init__","BaseTranscriptError.__init__"],["FileEmptyError.__init__","BaseTranscriptError.__init__"],["convert_youtube_to_xml","create_xml_document"],["parse_transcript_file","_find_first_chapter"],["main","save_transcript"],["URLRateLimitError.__init__","URLVideoNotFoundError.__init__"],["test_file_chapters_with_blanks_success","assert_files_identical"],["URLRateLimitError.__init__","__init__"],["convert_youtube_to_xml","fetch_video_metadata"],["FileEmptyError.__init__","__init__"],["FileInvalidFormatError.__init__","FileInvalidFormatError.__init__"],["test_file_multi_chapters_success","setup_reference_file"],["URLVideoNotFoundError.__init__","URLFormatError.__init__"],["fetch_video_metadata","extract_subtitle_url"],["URLVideoNotFoundError.__init__","URLSubtitlesNotFoundError.__init__"],["URLSubtitlesNotFoundError.__init__","URLRateLimitError.__init__"],["fetch_and_parse_subtitles","download_and_parse_subtitles"],["URLVideoNotFoundError.__init__","FileEmptyError.__init__"],["convert_youtube_to_xml","format_duration"],["test_url_multi_chapters_success","assert_files_identical"],["URLVideoNotFoundError.__init__","BaseTranscriptError.__init__"],["URLFormatError.__init__","URLRateLimitError.__init__"],["FileInvalidFormatError.__init__","FileEmptyError.__init__"],["FileInvalidFormatError.__init__","BaseTranscriptError.__init__"],["convert_youtube_to_xml","parse_transcript_api"],["TestExceptionHierarchy.test_base_exception_can_catch_all","TestExceptionHierarchy._raise_exception"],["convert_youtube_to_xml","fetch_and_parse_subtitles"],["URLVideoNotFoundError.__init__","__init__"],["test_url_multi_chapters_shared_success","assert_files_identical"],["FileEmptyError.__init__","URLSubtitlesNotFoundError.__init__"],["test_url_single_chapter_success","setup_reference_file"],["test_url_vs_file_equivalent_output","run_youtube_script"],["test_url_no_subtitles_error","run_youtube_script"],["URLSubtitlesNotFoundError.__init__","FileInvalidFormatError.__init__"],["convert_youtube_to_xml","generate_summary_stats"],["URLFormatError.__init__","FileInvalidFormatError.__init__"],["FileEmptyError.__init__","URLVideoNotFoundError.__init__"],["BaseTranscriptError.__init__","FileInvalidFormatError.__init__"],["test_file_multi_chapters_success","assert_files_identical"],["test_file_chapters_with_blanks_success","run_cli_command"],["URLSubtitlesNotFoundError.__init__","FileEmptyError.__init__"],["test_url_single_chapter_success","run_youtube_script"],["URLSubtitlesNotFoundError.__init__","BaseTranscriptError.__init__"],["create_xml_document","Chapter.format_content"],["FileInvalidFormatError.__init__","URLFormatError.__init__"],["URLFormatError.__init__","FileEmptyError.__init__"],["BaseTranscriptError.__init__","FileEmptyError.__init__"],["URLFormatError.__init__","BaseTranscriptError.__init__"],["FileInvalidFormatError.__init__","URLSubtitlesNotFoundError.__init__"],["BaseTranscriptError.__init__","URLRateLimitError.__init__"],["Chapter.format_content","seconds_to_timestamp"],["URLVideoNotFoundError.__init__","URLVideoNotFoundError.__init__"],["create_xml_document","format_date"],["URLRateLimitError.__init__","URLRateLimitError.__init__"],["FileInvalidFormatError.__init__","URLVideoNotFoundError.__init__"],["parse_transcript_file","_extract_content_for_chapters"],["FileInvalidFormatError.__init__","__init__"],["test_file_chapters_with_blanks_success","setup_reference_file"],["parse_transcript_file","validate_transcript_format"],["URLRateLimitError.__init__","FileInvalidFormatError.__init__"],["FileEmptyError.__init__","FileInvalidFormatError.__init__"],["URLSubtitlesNotFoundError.__init__","URLFormatError.__init__"],["test_file_multi_chapters_success","run_cli_command"],["create_xml_document","format_xml_output"],["test_url_vs_file_equivalent_output","run_cli_command"],["TestExceptionHierarchy.test_base_exception_can_catch_all","_raise_exception"],["URLSubtitlesNotFoundError.__init__","URLSubtitlesNotFoundError.__init__"]],"d":{"CLAUDE.md":["Project Capabilities","Tech Stack","UV Workflow (Always)","Setup & Dependencies","Development","Code Design Principles: Elegant Simplicity over Over-Engineered","TDD Implementation","Code Quality Standards","Development Context"],"README.md":["\ud83c\udfa5 YouTube-to-XML","\ud83d\ude80 Quick Start","Option 1: File Method","Install CLI tool globally","Manually copy YouTube transcript into my_transcript.txt, then:","\u2705 Created: my_transcript.xml","Option 2: URL Method (Experimental)","Use the globally installed command (after Option 1 installation)","\ud83d\udcca Technical Details","\ud83d\udee0\ufe0f Development"],"x_next_instruction_align.md":["Integration Assessment: Experimental Script Alignment","Objective","Context","Key Files to Analyze","1. Main Application Architecture","2. Experimental Script","Assessment Framework","A. Comparative Analysis","B. Context Considerations","C. Integration Preparation"]},"deps":{"scripts/url_to_transcript.py":["json","re","sys","uuid","xml.etree.ElementTree","dataclasses","datetime","pathlib","urllib.error","urllib.request","yt_dlp","youtube_to_xml.exceptions","youtube_to_xml.logging_config"],"src/youtube_to_xml/cli.py":["argparse","sys","uuid","pathlib","youtube_to_xml.exceptions","youtube_to_xml.file_parser","youtube_to_xml.logging_config","youtube_to_xml.xml_builder"],"src/youtube_to_xml/file_parser.py":["re","collections.abc","dataclasses","youtube_to_xml.exceptions"],"src/youtube_to_xml/logging_config.py":["logging","pathlib"],"src/youtube_to_xml/url_to_transcript_wrapper.py":["sys","pathlib","scripts.url_to_transcript"],"src/youtube_to_xml/xml_builder.py":["xml.etree.ElementTree","youtube_to_xml.file_parser"],"tests/test_cli.py":["subprocess","pathlib"],"tests/test_end_to_end.py":["difflib","subprocess","xml.etree.ElementTree","pathlib","pytest"],"tests/test_exceptions.py":["pytest","youtube_to_xml.exceptions"],"tests/test_file_parser.py":["pytest","youtube_to_xml.exceptions","youtube_to_xml.file_parser"],"tests/test_xml_builder.py":["xml.etree.ElementTree","pathlib","pytest","youtube_to_xml.file_parser","youtube_to_xml.xml_builder"]},"dir_purposes":{"scripts":"Build and utility scripts","tests":"Test files and test utilities"},"staleness":1756709664.871475}