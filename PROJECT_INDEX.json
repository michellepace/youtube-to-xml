{"at":"2025-09-11T22:54:27.739427","root":".","tree":[".","\u251c\u2500\u2500 example_transcripts/","\u251c\u2500\u2500 scripts/ (3 files)","\u251c\u2500\u2500 src/ (8 files)","\u2502   \u2514\u2500\u2500 youtube_to_xml/ (8 files)","\u251c\u2500\u2500 tests/ (8 files)","\u251c\u2500\u2500 pyproject.toml","\u2514\u2500\u2500 README.md"],"stats":{"total_files":20,"total_directories":18,"fully_parsed":{"python":19},"listed_only":{"json":1},"markdown_files":3},"f":{"scripts/temp_raw_yt_dlp.py":["p",["test_raw_yt_dlp:19:(url:str)>None::Test raw yt-dlp API behavior for a given URL.","main:61:()>None:test_raw_yt_dlp:Command-line interface."]],"scripts/url_to_transcript.py":["p",["fetch_video_metadata_and_subtitles:112:(url:str,)>tuple[VideoMetadata, list[IndividualSubtitle]]:extract_subtitles_from_json3:","extract_subtitles_from_json3:196:(events:list)>list[IndividualSubtitle]::","assign_subtitles_to_chapters:230:(metadata:VideoMetadata, subtitles:list[IndividualSubtitle])>list[Chapter]::","format_date:278:(date_string:str)>str::Convert YYYYMMDD to yyyy-mm-dd format.","format_duration:289:(seconds:int)>str::","create_xml_document:312:(metadata:VideoMetadata, chapters:list[Chapter])>str:format_content,format_date,format_duration,format_xml_output:","format_xml_output:347:(element:ET.Element)>str::Format XML element with proper indentation.","sanitize_title_for_filename:353:(title:str)>str::","convert_youtube_to_xml:371:(video_url:str, execution_id:str)>tuple[str, VideoMetadata, list[Chapter], int]:assign_subtitles_to_chapters,create_xml_document,fetch_video_metadata_and_subtitles:","convert_and_save_youtube_xml:411:(video_url:str, execution_id:str)>tuple[Path, VideoMetadata]:convert_youtube_to_xml,sanitize_title_for_filename:","main:440:()>None:convert_and_save_youtube_xml:Command-line interface entry point."],{"VideoMetadata":["65",[]],"IndividualSubtitle":["76",[]],"Chapter":["84",["duration:93:(self)>float:duration:Calculate chapter duration (may be inf for the final open-ended chapter).","format_content:97:(self)>str::Format individual subtitles as timestamped text for XML output."]]}],"src/youtube_to_xml/cli.py":["p",["parse_arguments:17:()>argparse.Namespace::Parse command-line arguments.","main:48:()>None:parse_arguments:Main entry point for YouTube to XML converter."]],"src/youtube_to_xml/exceptions.py":["p",["map_yt_dlp_exception:107:(error:Exception)>BaseTranscriptError::"],{"BaseTranscriptError":["4",["__init__:7:(self, message:str)>None:__init__:Initialize the exception with a custom message."]],"FileEmptyError":["12",["__init__:15:(self, message:str = \"Cannot parse an empty transcript file\")>None:__init__:Initialize the exception with a custom message."]],"FileInvalidFormatError":["20",["__init__:29:(self, message:str = \"Transcript file must start with a chapter title, not a timestamp\",)>None:__init__:Initialize the exception with a custom message."]],"URLIsInvalidError":["34",["__init__:37:(self, message:str = \"Invalid URL format\")>None:__init__:Initialize the exception with a custom message."]],"URLVideoUnavailableError":["42",["__init__:45:(self, message:str = \"YouTube video unavailable\")>None:__init__:Initialize the exception with a custom message."]],"URLSubtitlesNotFoundError":["50",["__init__:55:(self, message:str = \"This video doesn't have subtitles available\")>None:__init__:Initialize the exception with a custom message."]],"URLRateLimitError":["60",["__init__:66:(self, message:str = \"YouTube is temporarily limiting requests - try again later\",)>None:__init__:Initialize the exception with a custom message."]],"URLNotYouTubeError":["71",["__init__:74:(self, message:str = \"URL is not a YouTube video\")>None:__init__:Initialize the exception with a custom message."]],"URLIncompleteError":["79",["__init__:82:(self, message:str = \"YouTube URL is incomplete\")>None:__init__:Initialize the exception with a custom message."]],"URLBotProtectionError":["87",["__init__:92:(self, message:str = \"YouTube requires verification - try switching networks\")>None:__init__:Initialize the exception with a custom message."]],"URLUnknownUnmappedError":["97",["__init__:102:(self, message:str = \"YouTube processing failed - unmapped error\")>None:__init__:Initialize the exception with a custom message."]]}],"src/youtube_to_xml/file_parser.py":["p",["find_timestamps:45:(transcript_lines:Sequence[str])>list[int]::Find all timestamp line indices in the transcript.","validate_transcript_format:54:(raw_transcript:str)>None::","_find_first_chapter:93:(transcript_lines:list[str], timestamp_indices:list[int])>dict | None::Find first chapter metadata if transcript starts with a title.","_find_subsequent_chapters:108:(transcript_lines:list[str], timestamp_indices:list[int])>list[dict]::Find subsequent chapters using the 2-line gap rule.","_extract_content_for_chapters:130:(transcript_lines:list[str], chapter_metadata:list[dict])>list[Chapter]::Extract content lines for each chapter and create Chapter objects.","parse_transcript_file:161:(raw_transcript:str)>list[Chapter]:_extract_content_for_chapters,_find_first_chapter,_find_subsequent_chapters,find_timestamps,validate_transcript_format:"],{"Chapter":["31",["duration:40:(self)>float::Calculate chapter duration."]]}],"src/youtube_to_xml/logging_config.py":["p",["setup_logging:7:(log_file:str = \"youtube_to_xml.log\")>None::","get_logger:44:(name:str)>logging.Logger::"]],"src/youtube_to_xml/time_utils.py":["p",["timestamp_to_seconds:26:(timestamp_str:str)>float::","seconds_to_timestamp:67:(seconds:float)>str::"]],"src/youtube_to_xml/url_to_transcript_wrapper.py":["p",["main:30:()>None::Entry point wrapper for url_to_transcript script."]],"src/youtube_to_xml/xml_builder.py":["p",["chapters_to_xml:12:(chapters:list[Chapter])>str::Build complete YouTube transcript XML document from chapters."]],"tests/test_cli.py":["p",["test_valid_transcript_creates_xml:7:(tmp_path:Path)>None::","test_missing_file_shows_error:30:(tmp_path:Path)>None::","test_empty_file_shows_error:43:(tmp_path:Path)>None::","test_invalid_format_shows_error:60:(tmp_path:Path)>None::"]],"tests/test_end_to_end.py":["p",["run_script:27:(command:str, args:list[str] | str, tmp_path:Path)>tuple[int, str]::","setup_reference_file:60:(tmp_path:Path, reference_name:str)>Path::Copy reference file to tmp directory for testing.","assert_files_identical:68:(actual:Path, expected:Path)>None::Assert two files are identical using cross-platform comparison.","test_file_multi_chapters_success:88:(tmp_path:Path)>None:assert_files_identical,run_script,setup_reference_file:Test CLI processing of file with multiple chapters.","test_file_chapters_with_blanks_success:106:(tmp_path:Path)>None:assert_files_identical,run_script,setup_reference_file:Test CLI processing of file with chapters containing blank lines.","test_file_invalid_format_error:123:(tmp_path:Path)>None:run_script:Test CLI error handling for invalid transcript format.","test_url_multi_chapters_success:136:(tmp_path:Path)>None:assert_files_identical,run_script,setup_reference_file:Test YouTube fetcher with multi-chapter video.","test_url_multi_chapters_shared_success:153:(tmp_path:Path)>None:assert_files_identical,run_script,setup_reference_file:Test YouTube fetcher with shared URL format containing parameters.","test_url_single_chapter_success:170:(tmp_path:Path)>None:assert_files_identical,run_script,setup_reference_file:Test YouTube fetcher with single-chapter video.","test_url_vs_file_equivalent_output:187:(tmp_path:Path)>None:run_script:Test URL vs file processing equivalence using direct XML parsing."]],"tests/test_exceptions.py":["p",{"TestBaseTranscriptError":["35",["test_base_exception_creation:38:(self)>None::Test base exception can be created with custom message.","test_base_exception_inheritance:44:(self)>None::Test that base exception inherits from Exception."]],"TestExceptionMessages":["50",["test_all_exceptions_have_default_messages:53:(self)>None::Test that all exceptions have non-empty default messages."]],"TestExceptionHierarchy":["62",["test_all_exceptions_inherit_from_base:65:(self)>None::Test that all custom exceptions inherit from BaseTranscriptError.","test_base_exception_can_catch_all:72:(self)>None:_raise_exception:Test that catching BaseTranscriptError catches all custom exceptions.","_raise_exception:75:(exc:Exception)>None::Helper function to raise exceptions for testing."]],"TestExceptionUsagePatterns":["85",["test_raising_and_catching_specific_exceptions:88:(self)>None::Test raising and catching specific exception types.","test_raising_and_catching_base_exception:96:(self)>None::Test raising and catching the base exception type.","test_all_exceptions_preserve_custom_messages:102:(self)>None::Test that all exceptions preserve custom messages exactly."]],"TestYtDlpExceptionMapping":["112",["test_map_yt_dlp_exception_patterns:115:(self)>None::Test that error patterns map to correct exception types with messages.","test_rate_limit_error_message:155:(self)>None::Test URLRateLimitError with custom message.","test_unmapped_error_uses_default_message:165:(self)>None::Test that unmapped errors use the default URLUnknownUnmappedError message."]]}],"tests/test_exceptions_ytdlp.py":["p",["run_script:12:(url:str, tmp_path:Path | None = None)>tuple[int, str]::Run url_to_transcript.py script and return (exit_code, output).","test_empty_url:34:(tmp_path:Path)>None:run_script:Empty URL should be rejected.","test_not_a_url:42:(tmp_path:Path)>None:run_script:Malformed text should be rejected.","test_wrong_website:51:(tmp_path:Path)>None:run_script:Non-YouTube URL should be rejected.","test_youtube_url_too_short:59:(tmp_path:Path)>None:run_script:Truncated YouTube ID should be rejected.","test_youtube_video_not_found:68:(tmp_path:Path)>None:run_script:Invalid YouTube video ID should be rejected.","test_deleted_youtube_video:78:(tmp_path:Path)>None:run_script:Deleted/removed video should be rejected.","test_video_without_captions:86:(tmp_path:Path)>None:run_script:Video without subtitles should be rejected.","test_private_video_blocked:96:(tmp_path:Path)>None:run_script:Private video should be rejected.","test_unreachable_website:105:(tmp_path:Path)>None:run_script:Invalid domain should be rejected.","test_bot_protection_intermittent:113:(tmp_path:Path)>None:run_script:Video that may trigger bot protection or succeed.","test_valid_video_with_subtitles:133:(tmp_path:Path)>None:run_script:Known good video should succeed."]],"tests/test_file_parser.py":["p",["simple_transcript:28:()>str::Basic valid transcript with one chapter.","two_chapter_transcript:38:()>str::Transcript with two chapters using subsequent detection.","complex_transcript:51:()>str::Realistic transcript with multiple chapters and timestamps.","test_finds_all_timestamp_indices:70:(simple_transcript:str)>None::Find all timestamp line indices in multi-line text.","test_validation_passes_for_valid_transcript:83:(simple_transcript:str)>None::Valid transcript passes validation.","test_parses_valid_transcript_format:88:()>None::File following exact required format should parse successfully.","test_parses_valid_format_with_blank_lines:99:()>None::File following exact required format should parse successfully.","test_rejects_transcript_starting_with_timestamp:111:()>None::File that starts with timestamp (like sample-00-chapters.txt) should fail.","test_rejects_empty_transcript:122:()>None::Empty transcript file should raise FileEmptyError.","test_rejects_transcript_without_timestamps:131:()>None::Transcript without any timestamps should raise FileInvalidFormatError.","test_rejects_consecutive_timestamps_after_title:142:()>None::Consecutive timestamps after chapter title should fail format validation.","test_rejects_content_before_first_timestamp:155:()>None::Content before first timestamp should fail format validation.","test_rejects_file_with_insufficient_lines:166:()>None::Files with fewer than 3 lines should fail format validation.","test_finds_first_chapter_from_opening_line:178:(simple_transcript:str)>None::First non-timestamp line becomes a chapter.","test_finds_subsequent_chapter_with_boundary_rule:187:(two_chapter_transcript:str)>None::Chapter detected when exactly 2 lines between timestamps.","test_no_chapter_when_boundary_rule_fails:220:(text:str)>None::No chapter detected when gap is not exactly 2 lines.","test_finds_all_chapters:227:()>None::Multiple chapters detected with correct boundaries.","test_extracts_all_content_for_single_chapter:253:()>None::Single chapter includes all content to end.","test_extracts_correct_content_ranges_for_chapters:274:(two_chapter_transcript:str,)>None::Multiple chapters have correct content ranges.","test_includes_multiple_timestamps_in_chapter_content:290:()>None::Chapter content includes multiple timestamps.","test_parses_complex_transcript_end_to_end:313:(complex_transcript:str)>None::End-to-end test with realistic transcript.","test_handles_special_characters_in_titles:348:()>None::Parsing handles special characters correctly.","test_removes_blank_lines_during_processing:361:()>None::Blank lines are automatically removed from transcript processing.","test_chapter_has_end_time_field:379:(simple_transcript:str)>None::Chapter dataclass should have an end_time field.","test_chapter_timestamps_are_floats_with_duration:385:(two_chapter_transcript:str)>None::Chapter timestamps should be floats with correct duration calculation.","test_complex_timestamps_as_floats:402:(complex_transcript:str)>None::Complex H:MM:SS timestamps should convert to float seconds.","test_rejects_non_increasing_chapter_timestamps:421:()>None::Test that non-increasing chapter timestamps raise FileInvalidFormatError."]],"tests/test_time_utils.py":["p",["test_timestamp_to_seconds_conversion:18:()>None::Test conversion from timestamp string to float seconds.","test_seconds_to_timestamp_conversion:35:()>None::Test conversion from float seconds to timestamp string.","test_seconds_to_timestamp_fractional_floors:48:()>None::Fractional seconds are floored when formatting.","test_timestamp_to_seconds_raises_error_for_invalid_format:54:()>None::Test that invalid timestamp formats raise FileInvalidFormatError.","test_seconds_to_timestamp_rejects_negative_values:70:()>None::Test that negative values raise ValueError.","test_seconds_to_timestamp_rejects_infinite_values:79:()>None::Test that infinite values raise ValueError.","test_seconds_to_timestamp_rejects_nan_values:88:()>None::Test that NaN values raise ValueError.","test_timestamp_pattern_matches_valid_formats:94:()>None::Test that TIMESTAMP_PATTERN regex matches valid timestamp formats.","test_timestamp_pattern_rejects_invalid_formats:109:()>None::Test that TIMESTAMP_PATTERN regex rejects invalid timestamp formats."]],"tests/test_xml_builder.py":["p",["single_chapter:19:()>list[Chapter]::Single chapter with special characters for testing.","multiple_chapters:37:()>list[Chapter]::Multiple chapters for testing.","test_empty_chapters_creates_valid_structure:78:()>None::Empty chapter list creates valid XML with empty chapters element.","test_xml_is_valid_and_parseable:94:(single_chapter:list[Chapter], tmp_path:Path)>None::Generated XML can be parsed successfully by ElementTree.","test_builds_correct_xml_structure:111:(multiple_chapters:list[Chapter])>None::XML has correct structure with proper elements, attributes, and content.","test_escapes_special_xml_characters:145:(single_chapter:list[Chapter])>None::Special XML characters are properly escaped in output.","test_includes_xml_declaration:159:(single_chapter:list[Chapter])>None::XML output includes proper declaration.","test_matches_template_indentation:166:(single_chapter:list[Chapter])>None::XML output follows template indentation: 2 spaces per level, 6 for content."]]},"g":[["URLSubtitlesNotFoundError.__init__","URLIsInvalidError.__init__"],["convert_and_save_youtube_xml","convert_youtube_to_xml"],["FileInvalidFormatError.__init__","URLIncompleteError.__init__"],["URLUnknownUnmappedError.__init__","BaseTranscriptError.__init__"],["FileEmptyError.__init__","BaseTranscriptError.__init__"],["URLIsInvalidError.__init__","URLIncompleteError.__init__"],["FileEmptyError.__init__","URLNotYouTubeError.__init__"],["URLRateLimitError.__init__","FileInvalidFormatError.__init__"],["URLRateLimitError.__init__","__init__"],["URLUnknownUnmappedError.__init__","URLVideoUnavailableError.__init__"],["FileEmptyError.__init__","URLVideoUnavailableError.__init__"],["URLBotProtectionError.__init__","FileInvalidFormatError.__init__"],["URLNotYouTubeError.__init__","URLBotProtectionError.__init__"],["URLBotProtectionError.__init__","__init__"],["URLUnknownUnmappedError.__init__","URLIsInvalidError.__init__"],["main","convert_and_save_youtube_xml"],["BaseTranscriptError.__init__","URLNotYouTubeError.__init__"],["URLSubtitlesNotFoundError.__init__","URLBotProtectionError.__init__"],["test_wrong_website","run_script"],["FileEmptyError.__init__","URLRateLimitError.__init__"],["URLRateLimitError.__init__","URLSubtitlesNotFoundError.__init__"],["URLVideoUnavailableError.__init__","URLUnknownUnmappedError.__init__"],["convert_and_save_youtube_xml","sanitize_title_for_filename"],["FileInvalidFormatError.__init__","BaseTranscriptError.__init__"],["FileInvalidFormatError.__init__","URLSubtitlesNotFoundError.__init__"],["test_private_video_blocked","run_script"],["TestExceptionHierarchy.test_base_exception_can_catch_all","TestExceptionHierarchy._raise_exception"],["URLIsInvalidError.__init__","URLSubtitlesNotFoundError.__init__"],["URLSubtitlesNotFoundError.__init__","FileEmptyError.__init__"],["main","test_raw_yt_dlp"],["FileInvalidFormatError.__init__","URLVideoUnavailableError.__init__"],["BaseTranscriptError.__init__","URLRateLimitError.__init__"],["URLIsInvalidError.__init__","URLVideoUnavailableError.__init__"],["FileInvalidFormatError.__init__","URLIsInvalidError.__init__"],["URLIncompleteError.__init__","URLIncompleteError.__init__"],["URLIsInvalidError.__init__","URLIsInvalidError.__init__"],["URLNotYouTubeError.__init__","BaseTranscriptError.__init__"],["URLNotYouTubeError.__init__","URLNotYouTubeError.__init__"],["URLUnknownUnmappedError.__init__","FileEmptyError.__init__"],["FileEmptyError.__init__","FileEmptyError.__init__"],["URLVideoUnavailableError.__init__","URLIncompleteError.__init__"],["BaseTranscriptError.__init__","__init__"],["URLRateLimitError.__init__","URLBotProtectionError.__init__"],["URLSubtitlesNotFoundError.__init__","URLNotYouTubeError.__init__"],["URLVideoUnavailableError.__init__","FileInvalidFormatError.__init__"],["FileInvalidFormatError.__init__","URLBotProtectionError.__init__"],["URLVideoUnavailableError.__init__","__init__"],["URLIsInvalidError.__init__","URLBotProtectionError.__init__"],["URLBotProtectionError.__init__","URLIncompleteError.__init__"],["Chapter.duration","duration"],["test_bot_protection_intermittent","run_script"],["URLNotYouTubeError.__init__","URLRateLimitError.__init__"],["test_unreachable_website","run_script"],["test_empty_url","run_script"],["URLIncompleteError.__init__","URLSubtitlesNotFoundError.__init__"],["main","parse_arguments"],["URLUnknownUnmappedError.__init__","URLNotYouTubeError.__init__"],["FileEmptyError.__init__","URLUnknownUnmappedError.__init__"],["test_youtube_video_not_found","run_script"],["test_file_invalid_format_error","run_script"],["FileInvalidFormatError.__init__","FileEmptyError.__init__"],["URLIncompleteError.__init__","URLVideoUnavailableError.__init__"],["URLSubtitlesNotFoundError.__init__","URLRateLimitError.__init__"],["URLIncompleteError.__init__","URLIsInvalidError.__init__"],["URLVideoUnavailableError.__init__","URLSubtitlesNotFoundError.__init__"],["BaseTranscriptError.__init__","URLUnknownUnmappedError.__init__"],["test_url_multi_chapters_success","run_script"],["URLRateLimitError.__init__","BaseTranscriptError.__init__"],["URLUnknownUnmappedError.__init__","URLRateLimitError.__init__"],["URLNotYouTubeError.__init__","FileEmptyError.__init__"],["test_file_multi_chapters_success","setup_reference_file"],["URLBotProtectionError.__init__","BaseTranscriptError.__init__"],["URLBotProtectionError.__init__","URLSubtitlesNotFoundError.__init__"],["URLRateLimitError.__init__","URLVideoUnavailableError.__init__"],["URLIsInvalidError.__init__","BaseTranscriptError.__init__"],["URLRateLimitError.__init__","URLIsInvalidError.__init__"],["FileInvalidFormatError.__init__","URLNotYouTubeError.__init__"],["URLBotProtectionError.__init__","URLVideoUnavailableError.__init__"],["test_file_chapters_with_blanks_success","run_script"],["URLIsInvalidError.__init__","URLNotYouTubeError.__init__"],["URLIncompleteError.__init__","URLBotProtectionError.__init__"],["test_url_multi_chapters_success","assert_files_identical"],["URLBotProtectionError.__init__","URLIsInvalidError.__init__"],["FileEmptyError.__init__","FileInvalidFormatError.__init__"],["BaseTranscriptError.__init__","URLIncompleteError.__init__"],["URLUnknownUnmappedError.__init__","__init__"],["FileEmptyError.__init__","__init__"],["URLVideoUnavailableError.__init__","URLBotProtectionError.__init__"],["test_url_multi_chapters_shared_success","setup_reference_file"],["URLNotYouTubeError.__init__","URLUnknownUnmappedError.__init__"],["test_file_chapters_with_blanks_success","assert_files_identical"],["BaseTranscriptError.__init__","FileInvalidFormatError.__init__"],["FileInvalidFormatError.__init__","URLRateLimitError.__init__"],["Chapter.duration","Chapter.duration"],["URLIsInvalidError.__init__","URLRateLimitError.__init__"],["parse_transcript_file","_find_subsequent_chapters"],["URLSubtitlesNotFoundError.__init__","URLUnknownUnmappedError.__init__"],["URLBotProtectionError.__init__","URLBotProtectionError.__init__"],["test_url_single_chapter_success","run_script"],["create_xml_document","format_date"],["parse_transcript_file","_extract_content_for_chapters"],["URLIncompleteError.__init__","BaseTranscriptError.__init__"],["URLRateLimitError.__init__","FileEmptyError.__init__"],["BaseTranscriptError.__init__","URLSubtitlesNotFoundError.__init__"],["parse_transcript_file","find_timestamps"],["URLUnknownUnmappedError.__init__","URLUnknownUnmappedError.__init__"],["URLIncompleteError.__init__","URLNotYouTubeError.__init__"],["URLVideoUnavailableError.__init__","BaseTranscriptError.__init__"],["URLIsInvalidError.__init__","FileEmptyError.__init__"],["test_url_single_chapter_success","assert_files_identical"],["URLNotYouTubeError.__init__","FileInvalidFormatError.__init__"],["URLNotYouTubeError.__init__","__init__"],["test_youtube_url_too_short","run_script"],["create_xml_document","format_content"],["URLVideoUnavailableError.__init__","URLVideoUnavailableError.__init__"],["URLVideoUnavailableError.__init__","URLIsInvalidError.__init__"],["convert_youtube_to_xml","fetch_video_metadata_and_subtitles"],["URLSubtitlesNotFoundError.__init__","FileInvalidFormatError.__init__"],["URLIncompleteError.__init__","URLRateLimitError.__init__"],["URLSubtitlesNotFoundError.__init__","__init__"],["URLUnknownUnmappedError.__init__","URLIncompleteError.__init__"],["URLRateLimitError.__init__","URLNotYouTubeError.__init__"],["FileEmptyError.__init__","URLIncompleteError.__init__"],["TestExceptionHierarchy.test_base_exception_can_catch_all","_raise_exception"],["URLBotProtectionError.__init__","URLNotYouTubeError.__init__"],["FileInvalidFormatError.__init__","URLUnknownUnmappedError.__init__"],["BaseTranscriptError.__init__","URLBotProtectionError.__init__"],["test_url_multi_chapters_success","setup_reference_file"],["URLIsInvalidError.__init__","URLUnknownUnmappedError.__init__"],["create_xml_document","Chapter.format_content"],["URLUnknownUnmappedError.__init__","FileInvalidFormatError.__init__"],["URLRateLimitError.__init__","URLRateLimitError.__init__"],["fetch_video_metadata_and_subtitles","extract_subtitles_from_json3"],["test_file_chapters_with_blanks_success","setup_reference_file"],["URLBotProtectionError.__init__","URLRateLimitError.__init__"],["test_not_a_url","run_script"],["URLIncompleteError.__init__","FileEmptyError.__init__"],["parse_transcript_file","validate_transcript_format"],["test_valid_video_with_subtitles","run_script"],["URLUnknownUnmappedError.__init__","URLSubtitlesNotFoundError.__init__"],["FileEmptyError.__init__","URLSubtitlesNotFoundError.__init__"],["URLVideoUnavailableError.__init__","FileEmptyError.__init__"],["test_file_multi_chapters_success","run_script"],["convert_youtube_to_xml","create_xml_document"],["create_xml_document","format_xml_output"],["FileInvalidFormatError.__init__","FileInvalidFormatError.__init__"],["FileEmptyError.__init__","URLIsInvalidError.__init__"],["FileInvalidFormatError.__init__","__init__"],["URLIsInvalidError.__init__","FileInvalidFormatError.__init__"],["URLNotYouTubeError.__init__","URLIncompleteError.__init__"],["BaseTranscriptError.__init__","BaseTranscriptError.__init__"],["URLIsInvalidError.__init__","__init__"],["URLIncompleteError.__init__","URLUnknownUnmappedError.__init__"],["URLBotProtectionError.__init__","FileEmptyError.__init__"],["BaseTranscriptError.__init__","URLVideoUnavailableError.__init__"],["test_url_single_chapter_success","setup_reference_file"],["BaseTranscriptError.__init__","URLIsInvalidError.__init__"],["URLSubtitlesNotFoundError.__init__","URLIncompleteError.__init__"],["test_file_multi_chapters_success","assert_files_identical"],["test_deleted_youtube_video","run_script"],["test_url_vs_file_equivalent_output","run_script"],["URLVideoUnavailableError.__init__","URLNotYouTubeError.__init__"],["test_url_multi_chapters_shared_success","run_script"],["URLUnknownUnmappedError.__init__","URLBotProtectionError.__init__"],["FileEmptyError.__init__","URLBotProtectionError.__init__"],["BaseTranscriptError.__init__","FileEmptyError.__init__"],["URLRateLimitError.__init__","URLUnknownUnmappedError.__init__"],["URLBotProtectionError.__init__","URLUnknownUnmappedError.__init__"],["parse_transcript_file","_find_first_chapter"],["URLNotYouTubeError.__init__","URLSubtitlesNotFoundError.__init__"],["URLVideoUnavailableError.__init__","URLRateLimitError.__init__"],["test_url_multi_chapters_shared_success","assert_files_identical"],["test_video_without_captions","run_script"],["create_xml_document","format_duration"],["convert_youtube_to_xml","assign_subtitles_to_chapters"],["URLIncompleteError.__init__","FileInvalidFormatError.__init__"],["URLNotYouTubeError.__init__","URLVideoUnavailableError.__init__"],["URLNotYouTubeError.__init__","URLIsInvalidError.__init__"],["URLIncompleteError.__init__","__init__"],["URLSubtitlesNotFoundError.__init__","BaseTranscriptError.__init__"],["URLSubtitlesNotFoundError.__init__","URLSubtitlesNotFoundError.__init__"],["URLRateLimitError.__init__","URLIncompleteError.__init__"],["URLSubtitlesNotFoundError.__init__","URLVideoUnavailableError.__init__"]],"d":{"CLAUDE.md":["Project Capabilities","Tech Stack","UV Workflow (Always)","Setup & Dependencies","Development","Code Design Principles: Elegant Simplicity over Over-Engineered","TDD Implementation","Code Quality Standards","Development Context"],"README.md":["\ud83c\udfa5 YouTube-to-XML","\ud83d\ude80 Quick Start","Option 1: File Method","Install CLI tool globally","Manually copy YouTube transcript into my_transcript.txt, then:","\u2705 Created: my_transcript.xml","Option 2: URL Method (Experimental)","Use the globally installed command (after Option 1 installation)","\ud83d\udcca Technical Details","\ud83d\udee0\ufe0f Development"],"tmp.plan.excepts-align.md":["Phased Implementation Plan: Exception Handling Alignment","Context & Assessment Summary","Project Context","~~Current Issues Identified~~ \u2705 RESOLVED","Key Files","~~Phase 1: Clean Error Boundaries~~ \u2705 COMPLETE & EXCELLENT","\u2705 Completed Implementation:","TDD Quality Standards for Each Phase","Before Implementation","Test-Driven Process"]},"deps":{"scripts/temp_raw_yt_dlp.py":["os","sys","pathlib","yt_dlp","yt_dlp.utils"],"scripts/url_to_transcript.py":["contextlib","json","math","os","re","sys","tempfile","uuid","xml.etree.ElementTree","dataclasses","datetime","pathlib","yt_dlp","yt_dlp.utils","youtube_to_xml.exceptions","youtube_to_xml.logging_config","youtube_to_xml.time_utils"],"src/youtube_to_xml/cli.py":["argparse","sys","uuid","pathlib","youtube_to_xml.exceptions","youtube_to_xml.file_parser","youtube_to_xml.logging_config","youtube_to_xml.xml_builder"],"src/youtube_to_xml/file_parser.py":["math","collections.abc","dataclasses","youtube_to_xml.exceptions","youtube_to_xml.time_utils"],"src/youtube_to_xml/logging_config.py":["logging","pathlib"],"src/youtube_to_xml/time_utils.py":["math","re","youtube_to_xml.exceptions"],"src/youtube_to_xml/url_to_transcript_wrapper.py":["sys","pathlib","scripts.url_to_transcript"],"src/youtube_to_xml/xml_builder.py":["xml.etree.ElementTree","youtube_to_xml.file_parser","youtube_to_xml.time_utils"],"tests/test_cli.py":["subprocess","pathlib"],"tests/test_end_to_end.py":["difflib","subprocess","xml.etree.ElementTree","pathlib","pytest"],"tests/test_exceptions.py":["pytest","youtube_to_xml.exceptions"],"tests/test_exceptions_ytdlp.py":["subprocess","pathlib","pytest"],"tests/test_file_parser.py":["math","pytest","youtube_to_xml.exceptions","youtube_to_xml.file_parser","youtube_to_xml.time_utils"],"tests/test_time_utils.py":["math","pytest","youtube_to_xml.exceptions","youtube_to_xml.time_utils"],"tests/test_xml_builder.py":["math","xml.etree.ElementTree","pathlib","pytest","youtube_to_xml.file_parser","youtube_to_xml.xml_builder"]},"dir_purposes":{"scripts":"Build and utility scripts","tests":"Test files and test utilities"},"staleness":1757019267.767995}