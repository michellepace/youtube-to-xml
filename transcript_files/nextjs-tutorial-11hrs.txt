Introduction
0:00
in this video I'm not only going to show you how to build this job board which is fully functional handles users
0:05
organizations payment plans subscriptions everything you could want out of a job board but I'm also going to show you how to take it to the next
0:11
level by adding in AI features all throughout the entire application to take it to the next level On top of that
0:17
I'm going to be showing you how to integrate best practices with Nex.js TypeScript databases and so on to be
0:22
able to make this application not only look good but also be really clean code and easy to maintain for you to want to
0:27
upgrade and work on in the future This is a massive project that will look incredible on any resume or portfolio
0:33
and will teach you so many things that will be useful in all of your projects going forward Also before we get started
0:38
I want to give a huge shout out to the sponsors of this video Clerk and Ingest because they made certain things in this
0:44
application so easy to work with For example Clerk we're going to be using the newest billing features in Clerk to
0:49
be able to do subscription billing We also have organizations permissions roles all these other features that are
0:54
really painful to implement on your own We're going to be using Clerk to make that super easy and simple to work with And ingest is an absolutely amazing
1:01
background job tool that we're going to be using to integrate all of our cron jobs background jobs and most importantly integrating all of our
1:06
different AI features because doing that in plain Nex.js is really difficult and annoying Honestly I was blown away with how impressive Injust was and I really
1:13
really like the tools And the clerk billing was just brain dead simple to work with which is why I love If you want to check out either of these tools
1:19
and use them yourself I'll be linking in the description Clerk and Ingest [Music]
1:25
Welcome back to WebDev Simplified My name is Kyle and my job is to simplify the web for you so you can start building your dream project sooner And
Demo
1:31
before we start diving into the code of this project I want to give you a full walkthrough of every single thing in the application all the features everything
1:37
we're going to be working on So this main page is the first page that people are going to come to and it's where all the different job listings are You can
1:43
see we can click through and view all the details for every single one of these job listings Doesn't matter which one it is we can swap between them We
1:49
have the ability to resize the sections here And as you can see everything is perfectly mobile responsive Even if we go down to a mobile size screen You can
1:56
see we get this little drawer side in which is super handy We also have the ability to expand and collapse this different sidebar if we want And again
2:02
on mobile screens we have the ability to do all this as well If I make this even smaller you can see if I come over here
2:07
I have the ability to pull out that drawer as well So everything is fully responsive across all screen sizes I can
2:13
filter my jobs For example if I want to only get remote jobs I can click here remote click filter and now you can see only the remote jobs are showing up So
2:19
everything is working super perfectly there When it comes to some of the AI features you can see here I have the ability to search based on different AI
2:25
properties For example if I want to search for jobs that are going to be fitted towards me I can type in all my different skills experience and what I'm
2:31
looking for and it'll give me a job for that For example this query just says that I'm a mobile developer looking for a job that pays at least 100,000 a year
2:38
I mention the skills that I have in certain tech stacks In this case I just say most modern tech stacks I'm able to learn new tech stacks quickly so that's
2:44
not a huge deal for me what the tech stack is Also I specifically mentioned that I don't enjoy web development so it hopefully doesn't show me web
2:50
development related jobs Now once you type in as much information as you want you can click search and the AI is going to use that along with all the job
2:56
listings to find you the ones that fit you the best In our case there's only one mobile focused job that's listed All
3:01
the rest are front end or backend developer So you can see we get that job being pulled up here And now I can actually go ahead and apply for that job
3:07
So we'll click apply You can see I can apply for the job I can add a cover letter if I want In my case I'll just apply without a cover letter And now you
3:13
can see we've applied for that job Now another amazing thing that happens behind the scenes is when I apply for a job the AI is going to take my resume my
3:20
cover letter as well as all my other requirements and skills and it's going to run that compared to the job listing
3:25
here and it's going to figure out how good of a fit I am for that job listing And we'll see that in a little bit when we look at the back end for the employer
3:31
side of things I do want to dive into the settings though because we actually have a few settings we can configure For example I can send myself a daily email
3:38
notification And this is going to be based on that AI search So essentially I can type in whatever filter prompt I want inside of here that's as specific
3:44
as I want for the jobs I'm looking for And then whenever a new job gets posted that fits my AI criteria it's going to
3:50
send me an email to let me know of the job that fits my exact criteria So again we have more AI built into this project
3:55
that's going to really help elevate the experience for the user Also I have the ability to upload a resume For example I
4:00
just have a boilerplate front-end developer resume So this is a front-end developer resume And I applied for a job
4:05
specifically in the Android space So we should hopefully see that my rating is not super high As you can see down here I then have an AI summary This is an AI
4:12
summary generated by our AI directly from our resume And this is what's used for helping with that ranking system
4:17
because essentially we took that resume and generated out some text we can put into our AI And anytime that I change or
4:23
update my resume this summary down here is going to automatically update from that AI for us Now if we take a look at the employer side we can come over here
4:29
and we can see all the different job listings we have active as well as ones we don't have active Or if we had some draft job listings we could see those as
4:35
well Now the job I applied for is this UX engineer job So if we go ahead and we look at that we can see that my application under Kyle Cook only got a
4:42
two star rating because it really didn't meet very many of the requirements for our listing while Sally got five stars automatically from the AI because they
4:48
were a much better candidate And the nice thing is let's say the AI messes up I can easily as the employer come in
4:54
here and be like you know what actually this Kyle kid he was a four-star rating And I can update that and that's going to be updated throughout my entire
4:59
application I can also go through and view their resume if I want to I can also view their cover letter with all the information they type in As you can
5:05
see this is just some random test data typed into this one And I can go ahead and I can say you know what we're actually interested in this person so
5:10
I'm going to mark them as interested so they show up inside of our list and so on On top of that I have all the normal features that you would think of such as
5:16
being able to edit dellist a job unfeature a job and delete a job listing Inside of my edit form you can see I
5:21
just have all my normal stuff I have a Wizzywig editor which is really nice to work with all the different customization I could possibly want I
5:27
could change around if the salary is yearly or hourly and then update all the information for that job listing Now if
5:32
I wanted to feature multiple jobs you'll notice that I'm unable to If I click feature you can see I must upgrade my plan to feature more job listings Same
5:38
thing if I was want to post another job If I click publish you can see I need to upgrade my plan cuz my plan only allows for three job listings and only one of
5:45
those can be featured So let's say that I actually do want to go ahead and update You can see I have all my billing information right here I can switch to
5:50
whatever plan I want Let's say that I want to switch to this plan I can go ahead and say that I want to pay that amount And it's going to give it a
5:56
second to load And now I've automatically switched to that higher tier plan And I can go ahead and I can publish this job listing if I want You
6:01
can see that I can feature this job listing because I have the ability to feature multiple different job listings So all this different information is
6:06
going to be shown up And if I go back to my job board that job right here which is front-end developer that's featured that is showing up right at the very top
6:12
Now if we go back to the employer dashboard to kind of round out the last few little features that we have if we go over here we can actually modify our
6:18
user settings So if we come into that this just allows me to again get a daily update email for every single applicant
6:23
that applies And I can even change it to be like oh you know what i only want to be candidates that are three stars or greater So every time I get a three star
6:29
or greater candidate I'm going to get an email that summarizes all the candidates that were sent to me every single day So I can go through and I know exactly what
6:35
job listings and everything these candidates are for Another important thing to note is that this application supports dark and light mode fully So as
6:41
you can see here we have a light mode version of our application All the different colors and styling and everything is all built out exactly the
6:46
same So you can easily swap between the two depending on what your browser preferences are So now it's time to actually start building our application
Setup
6:52
and we're going to be using Nex.js So to create a nextJS application we can just type in npx create next app and instead
6:59
of using the latest version we're actually going to be using the Canary version of Nex.js XJS because I want to use the new dynamic IO features that I
7:06
think are really useful for doing caching related things And one thing that I specifically want to mention while this is going through and
7:12
downloading everything we're just going to use for the most part all the different default settings for everything So we're just going to come through here and specialize all those
7:17
One thing I do want to mention though is that this video is going to be fully timestamped So for example the section that we talk about next is something
7:23
that you don't really care to watch You can skip ahead by the time stamp so you can get to the sections you specifically care about That way you're not going
7:29
through a bunch of stuff that you already know you can really focus on the core things that you don't know Now one thing I'll mention that if you do jump
7:34
around a bunch is that you're probably going to miss some of the nuance on different best practices and so on but it's a great place to go if you want to
7:40
jump around to look at specific features inside the code So now that we have our nextJS application created we can go
7:45
ahead and we can just run that by saying npm rundev and we should hopefully see our boilerplate code on the side And to
7:51
get started I kind of just want to delete all the stuff we don't need So for example I'll come inside of here get rid of a lot of the different code that
7:56
we don't care about Come all the way down to here This is all looking good inside of there And inside of here I'm just going to export a default function
8:03
called homepage And it's just going to return an H1 that says hi There we go So
8:09
now if I refresh my page we should just have the text hi on our screen There we go You can see that text high showing up Now one thing I want to do is I
8:15
accidentally deleted this global CSS So I just brought that back by undoing that deletion And now we can go ahead and we
8:20
come in here We make sure we have all the different stuff we want I can go into my layout and make sure that I reimpport that file So we can go ahead
8:26
and reimpport that And now if I refresh we can see that we actually have our Tailwind styles being applied Our text just got a little smaller changed the
8:32
font and so on Now in order to make sure we're using these fonts that are being imported by Nex.js we just want to come in here and say font sands that's going
8:39
to make sure that we're specifically using these fonts because they're hooked up as the SANS version of our font That'll just make sure those are all
Database setup
8:45
hooked up properly Now in pretty much every single project the very first thing that I like to work on is my database So we're going to come over
8:51
We're going to be using Drizzle We can just kind of go through this getting started documentation real quick but we're going to be using Drizzle with Postgress So in order to get this set up
8:58
we can just minimize our application for now I want to install all the different dependencies we're going to need We're first of all going to need Drizzle OM So
9:05
we're going to get that installed We're going to need PG which is for our Postgrace database We're not going to be needing because we're going to be
9:11
handling environment variables through Nex.js But I am going to install a library which is the T3 OSS env.js
9:17
library which makes handling the types of our environment variables much easier So we're going to install those And then
9:22
we'll also need to install dev dependencies We'll need drizzle kit to make sure we can do migrations and so on We need the types for postgress and we
9:29
actually don't need tsx because all of that again is going to be handled automatically for us So we don't need to worry about that So we can say npmi-d
9:36
we need drizzle kit and we need the types for postgress So we can say types pg just like that So that's all the
9:42
different libraries we need to get drizzle set up And there's a lot of different ways you can run your postgrace database For example passing
9:47
in a URL to a hosted database or a local database But in my case I'm actually going to be using Docker for this So
9:53
we're going to have a slightly different configuration set up So to get everything set up we first want to create a docker compose file So we could
9:58
say docker-compose.yiml for a yaml file I'm going to paste in what this docker is going to look like
10:04
And then we'll come through and I'll explain exactly what's going on But essentially all we're doing is we're using the Postgress 17 image You can use
10:10
whatever Postgress version or image that you want And then we just have a bunch of environment variables For example our host our port our password our username
10:17
and our database name All of these are just set up as environment variables So we can configure those ourselves And then finally I'm making sure I'm
10:23
mounting a volume and then exporting that volume All that really does is make it so that our data in our database is
10:29
actually accessible by our application So really all this is doing is just hooking up Postgress version 17 with all
10:34
of our environment variables and making that data publicly available Again you could host your database however you want It's up to you Now to get those
10:41
environment variables set up let's create av file And inside of here especially on larger projects I like to
10:46
label what my environment variables are for So here's my database specific environment variables And we just have our password set to password Our user
10:52
set to Postgress Our host is local host Port is 5432 And our database name is going to be jobboard Again you can call
10:58
these things whatever you want It really doesn't matter But that hooks up everything related to our database So now we have our database We have our
11:04
actual compose file for Docker So we should be able to actually at least get our database up and running by running docker compose up And that should start
11:12
up our Docker container with all of our database related information Now the next step after all that is going to be to work on setting up our schema files
11:18
as well as our Drizzle configuration file So to get this Drizzle config I'm just going to copy the code that they have I'm going to create a brand new
11:24
file We're going to call this Drizzle.config.ts
11:30
I'm going to paste in that code right there for Drizzle And one thing that I want to change is I want to put my migrations inside the source folder So
11:36
I'm going to say /source right here So that way everything is inside my source folder inside of Drizzle And same thing
11:42
here instead of calling this DB I'm going to call this Drizzle So I have a drizzle folder that contains everything Now I do want to use my own way of using
11:48
environment variables That's what that T3 library I installed this for So we'll say envatabase
11:54
URL There we go And all we need to do is create this environment variable So inside of our source I'm going to create
12:00
a new folder called data This is for constant things like our environment And inside of here I'm going to create another folder called env And then
12:06
inside of that folder I'm going to create a file called server.ts And this is for all of our server focused environment variables and we can create
12:12
a brand new file for our client side ones if we need any of those at all So all we want to do is we want to export a constant variable called env And we're
12:19
going to set that to create env And we can pass in all of our different
12:25
server related variables into here Now to work with this we are going to need to install zod So I'm going to come over
12:30
here with a brand new terminal npm zod which is going to be using all of our different validations It's validation
12:35
library so we can get all of our type safety for all of our different things It's going to be heavily used throughout our entire application And for example
12:41
we know that we have our DB host variable and we know that this is going to be a string just like that from zod
12:47
So let me make sure that I import a zod And we again want to make sure that this has a minimum value of one so that we know that we have a value being passed
12:53
in And that's again just coming directly from here So we essentially need to set up a environment variable for every single one of these So I'm going to copy
12:59
this down a bunch of times We have our password we have our user we have our port and we have our name And that
13:05
should be all of our different stuff Let me get these in the exact same order There we go Minimize all that down So now we have our five environment
13:11
variables set inside of here to set up our environment To hook up these environment variables I can use the experimental runtime property and pass
13:17
in our process.v And that takes all of our environment variables from here and runs them through this AZOD validation
13:23
that we created Finally there's a few extra things I want to do I want to make sure empty strings come across as undefined So I'm going to set that to
13:29
true And then I actually want to do a bit of a transformation And that's because these environment variables for DB password user host port and name
13:36
they're only useful specifically for our Docker file But when it comes to for example Drizzle you can see here that
13:41
we're using a database URL instead So we want to convert those into a database URL which is actually rather easy to do
13:48
What we can do inside of here is we can use the create final schema function which is going to take in all of our
13:53
different environment variables just like this And it's going to return to us something new So we can return a new ZOD
13:58
object And this ZOD object is going to take our environment variable all of those things And all we want to do is we want to transform that So this ENV
14:05
object is literally just this object right here So we're passing that in to make it into a ZOD object And then by
14:10
doing a transform we can essentially convert from one value to another value So what I want to do is I want to get all of my different environment
14:16
variables So in my case we have DB host We have DB name DB password DB port and
14:24
the DB user And then I want to take whatever the rest of my environment variables are I'm just going to call those rest And we'll set that equal to
14:31
whatever our value is So now you can see this DB host is a string name value and so on So essentially this right here is
14:37
just the version of our code So whatever our DB host is from our environment variable will be set right here and any additional environment variables we have
14:43
will be saved in this rest variable Now what I can do is I can return an object that is essentially the final version of
14:48
our code So I can take all the rest of our environment variables keep those exactly the same don't change them Then I can create a brand new environment
14:55
variable called database URL And then I can just use all of these different
15:00
parameters to hook up that environment variable So I can say Postgress and I just want to get my DB user and then I
15:07
want to get my password after that DB password and this is just the standard syntax for how you actually hook up a
15:13
URL using all these different parameters inside of Postgress So this is all around how Postgress works Finally we
15:19
can use the at symbol and this is going to specify our DB host And then finally we can specify our DB port as well There
15:26
we go And then lastly we need what the database name is So we can say DB name just like that So we've taken all these
15:32
variables and converted them into a URL So now when we use this environment variable object you can see right now
15:38
the only thing it returns is a database URL If we were to add additional things to here such as test and we'll make that
15:44
as the string There we go And now I come back into this file you can see my environment
15:50
variable now has that test object as well because we didn't change anything except for these values right here We essentially converted into one value
15:56
instead of individual values So we have all that set up Our Drizzle config is entirely done All that's left to do is
16:02
to create our schemas and everything around the schema And this is actually not too difficult So the first thing we need to do is we need to go into our
16:07
source folder and we're going to create a brand new folder called Drizzle Inside of here we're going to create a folder called schema where we're going to put
16:13
all of our different schema files We're going to have a file called dbts That's essentially just going to be this file
16:18
right here So I might as well just copy this code paste it in We're going to make some minor changes For example we're going to export this variable
16:24
right here And we're also going to make sure we use our own environment variable So we're going to get that right there Now before we can finish up inside of
16:30
this file because we want to pass in our schema for all of our type safety we need to create a file that's going to contain all of our schema related code
16:36
So we'll call this schema.ts And all this is going to do is export all of our different schema related variables We
16:42
don't have any right now but that's perfectly okay because inside of here we can import that schema So we can say import a star as schema from that file
16:51
So that file is specifically at /drizle/s schema because that's where our file is And this at just essentially is inside
16:57
of our source folder So now we have our schema and we can pass that along just like this Now we're going to get some type errors because right now this file
17:03
is completely empty So it doesn't have anything in it But as soon as we start implementing things this is going to work just fine It's just going to give
17:09
us type safety for our schema Now another thing we don't need is we don't need to run because we didn't need that since our environment variables are all
17:15
handled by Nex.js So we can remove that And now we can move on to the actual creation of our schema And inside of our
17:20
schema we essentially want to create an individual file for each of our database tables to make it easier to work with rather than putting them all in one
17:26
single file So inside of this schema here let's go ahead and we're create a user.ts file for our user related schema
17:32
And then what I want to do in this schema file is I want to export star from and I want to go to that schema
17:38
file So we'll say drizzle There we go Slash schema or not schema
17:45
Yeah it's going to be slash schema/ user Just like that So we're essentially exporting everything that's inside this
17:50
particular file So anything that we export from here is going to be exported from here And essentially it takes all the files inside of here and exports
17:56
them from this one file so we can use them properly inside of here So let's go ahead and actually create our tables We'll say const user table is equal to
18:04
pg table Just like that Make sure we get it imported We can name our table users And now we need to specify all the
18:10
different keys of our table For example we're going to have an ID key for our table And we're going to be using clerk for all of our different authentication
18:16
needs So we're going to get the ID directly from clerk which is a string So in our case we're going to be using a var directly from Postgress And we're
18:23
going to make sure that this is denoted as the primary key of our table Then we're going to need to have a name field
18:28
which is going to be pretty similar It's going to be a varchchar And we want to make sure it's not null Just like that We're also going to have an image URL
18:35
There we go This is again a var And we know that it's not going to be null because clerk is always going to return
18:41
to us an image URL So we can specify that is not null And then we have our email which again is pretty much going
18:46
to be exactly the same It's going to be not null And we also want to make sure that it's unique because a user can't
18:52
have two different accounts with the same email It must be unique to that user Then finally we need to specify a
18:57
created at and an updated at field And I'm actually going to export these out into separate variables So we're going
19:02
to say created at updated at I'm going to create a brand new file called schema helpers that's going to contain things
19:07
that are shared between all of our different schemas such as created at and updated at So I'll just go ahead and I'll paste in the code for this actually
19:13
because it's rather straightforward and I'll explain exactly what it does Essentially our created app at field here you can see as a time stamp with a
19:18
time zone just so we can make sure we do time zone properly conversions We're making it not null and we're defaulting it to the current value Updated at is
19:24
exactly the same except we're adding in this on update field to essentially give it the new date So every time we update
19:30
our table it's going to take this value and it's going to give us a brand new date for the updated at field So with that done we can now just make sure we
19:36
import created at and updated at from that file And now we can use that through all of our different code So now
19:42
we already have a table set up for users inside of our database But we want to go ahead and we're just going to create all the tables for our application right
19:48
away just so we don't have to jump back and forth between our database And this is a lot of times what I do with an application is I create a large chunk of
19:54
my database tables right away because it's kind of the thing that I think about and plan when I'm creating these larger scale applications So let's come
20:00
in here with the very next thing And the next thing we want to do is going to be organizations So we'll say organization.ts And this is going to be
20:05
very similar to user So I'm going to kind of copy all the code from here And this is going to be our organization table and it's going to be called
20:12
organizations Now they're going to have the same ID because this is again coming from clerk We're going to be using a varchchar The name is not going to be
20:17
null The one thing that is different is image urls can be null for organizations just because of how clerk handles things
20:23
So we'll make sure that that's nullable And then finally we'll get rid of this email field cuz we don't have emails for organizations And that's all we need to
20:28
do for our organization It's very similar to users like I said Now the next big table which is where the bulk of our application code is going to go
20:34
is going to be this job listing table So we'll say job listing just like that Export consting
20:41
table equals and that's PG table And we'll call this job listings
20:47
And inside this table we're going to be passing in a bunch of different parameters For example this table is going to have an ID And unlike our other
20:52
tables which use varchars as our ids we're actually going to be using an UYU ID And every single table that has an ID
20:58
is going to have this exact same UU ID format And this is just going to be simply a UU ID as our primary key that
21:05
defaults to a random value And this is something that we're going to be using throughout all of our different tables that need an ID So again something that
21:10
I'm going to move into my schema helpers So we're going to export a constant It's going to be called ID and it's going to
21:17
be equal to that UYU ID function just like this So that way again anywhere that we need to create a unique
21:22
identifier for our tables we can just import that ID function and it's going to be used everywhere just like that Now
21:27
we can remove this export that's no longer needed and we can move on to other things For example the organization ID for whatever
21:33
organization is going to be used for this job listing So whichever one posted it we know that their ID is going to be
21:39
a varchchar We know that we want this to reference that table So we can say it's going to reference
21:45
the organization table ID And of course on delete whenever we delete an organization we want to delete all job
21:52
listings associated with it So we're going to specify cascade here And we can specify this as not null as well just to
21:57
make sure that we always pass in an organization ID I'm going to make this a little bit bigger so it's easier to work with We can go ahead and get the rest of
22:04
these in place For example we have a varchar for our title which is not null We're also going to have a description
22:09
and a wage So the description field here is going to be a text input And the difference between text and varchchar is
22:15
essentially a text allows an infinite sized table of data while varchar has a limit on the size that it can be So text
22:20
is better for this long form description field which is most likely going to be very long For our wage we're going to be using an integer for like $100,000 a
22:27
year and so on But we also need to specify a wage interval because we could specify our job salary as a yearly
22:33
salary or an hourly sal hourly So we want to make sure we come in here with a wage interval enum that we're going to
22:39
create to hook up all that information And these are both nullable because we want to make it so that users can post a
22:45
job without a wage associated with it So we're going to come up here and we're going to export a constant called wage
22:51
intervals And this is going to be our array of our different intervals So we can have hourly
22:57
and yearly We're going to set that as a constant variable I'm also going to be creating a type for this called wage
23:03
interval which is just going to be taking the type of wage intervals Get the number property from that So as you
23:09
can see it just gives us those two values And then finally we need to create that wage interval enum So we can
23:14
export wage interval enum And we can set that to a pg enum We can give it
23:20
whatever name that we want associated with it And then finally we need to give it all the different values that we have associated with it So now we have this
23:26
wage interval enum And as you can see it's either hourly or yearly The next thing that we need to do below this is
23:32
to deal with the location So we have a state abbreviation just like that Make sure I spell that
23:38
properly There we go This is going to be a varchchar And again this can be null because they may not have a state
23:43
associated with it Same thing here with city This is a var that can be null Then we need to specify here the is featured
23:50
So we can say is featured This is going to be a boolean Make sure we import that from the correct location So if we want
23:56
to import that from up here There we go And then with that boolean we can essentially say that it cannot be null
24:02
and that by default it's going to be false because jobs are not going to be featured by default unless they manually
24:07
specify they want them to be featured Also let's make sure we export this type so we can use in our application if we
24:13
need to So now the last few things we need to add to this table are all going to be more enum related values I'm going
24:18
to copy over the code and then we'll define everything as we need So we have a location requirement we have an experience level we have a status and we
24:24
have a type So location requirement is is it remote in office or hybrid So let's go ahead and we're going to set up
24:30
the enum for that I'm just going to copy this code because we're essentially going to replace wage intervals with
24:35
location requirements There we go And this should say location
24:40
requirement And same thing here location requirement There we go And
24:47
then let's make sure this is also location requirement Now we need to specify what our location requirements
24:53
are And as I mentioned we have in office hybrid or remote So now those are the only options we have available for this
24:59
Just like that as you can see Next up we have our experience level And instead of making you watch me type this out like I did before we have the exact same code
25:05
We're just specifying junior mid-level and senior as our experience levels We also have our job listing status We come
25:11
down with that It's either going to be draft published or dlisted So essentially if you took a job from published and unpublish it that's going
25:18
to be this D-listed status And I specifically want to differentiate that from a draft job listing because of how
25:23
it integrates with when the job was posted Because if you dlist a job and then relist it later that's not going to
25:29
update the posted time on that job Now finally the last thing that we have is going to be the job type So is it a
25:34
full-time job part-time job internship and so on that's directly inside of here and that hooks up all those different
25:40
enums for us They're all defined exactly the same as the enums that we've already defined That's why I just copy pasted the code around The one important thing
25:46
to note is our status is going to default to draft because when we create a new job we want it to be in that draft status Lastly as I kind of alluded at we
25:54
need a posted that field to note when we actually change this from draft to published And that's going to be again
25:59
very similar to our updated created at fields So for this one we just want to have a timestamp and that timestamp is
26:04
going to be with a specific time zone And then finally we need to have created at and updated at just like that And
26:10
that's everything we need for our job listing As you can see the bulk of our complex database code is directly inside
26:15
of this one table And that makes sense because it's kind of the whole bulk of our application Now the final thing that I want to add is going to be an index
26:21
And this is optional You don't technically need to do this Everything will work fine without it But I'm going to be creating an index on our state
26:27
abbreviation table There we go Let me make sure we get that in there So table.stateabbreviation And the reason I'm doing this is because
26:33
an index is great when you need to filter or search by a particular column and we have the ability to search by our
26:38
state abbreviation So I'm adding an index on that column It'll make it so that when we write to our database when
26:44
we add new job listings it's slightly slower but every single time that we search for state abbreviations for job
26:49
listings those searches are going to be quicker for us So since most of our application is going to be spent on the
26:55
actual searching of job listings and much less on the posting it makes sense to add an index for this particular table And the next table I want to
27:01
create is going to be another big table for our application and that is the job listing application table So we'll come
27:06
in here just like that I'm actually going to copy over what the table looks like and then I'll explain every single thing in depth for you So we'll come in
27:13
here We'll make sure we import everything properly Get it all from that PG library Get the two tables that we
27:19
created imported And then finally these last few columns And then again like I said I will explain exactly what every
27:24
single one of these different sections looks like so you know what's going on Finally get primary key And there we go
27:30
So if we take a quick look at this table you can see that we have a job listing ID and a user ID And that's because
27:35
every application is going to be associated with one user and one job listing You'll notice we don't even have an ID column at all And that's because
27:42
in this particular table our job listing ID and our user ID act as our primary key And to denote that we just come down
27:48
here and we specify our primary key is going to be a joint primary key on these two columns So our job listing ID and
27:54
our user ID combined together make up our primary key Now anytime we delete a job listing or a user we're going to
28:00
make sure we delete the job listings assoc or the job listing applications associated with that user or job listing
28:06
We have the ability to upload a cover letter which in this case should be a text column So I'm going to change that to text just because this could be a
28:12
very large amount of text being passed in We also have our rating right here which is going to be that number between
28:17
1 and five or null in the case that an applicant has not been rated yet which could happen if the AI is not running or
28:23
they want to change the rating manually from a rating to not rated Finally we have an application stage enum which I'm
28:29
going to copy over because it's exactly the same as every other enum that we've defined As you can see here we have denied applied interested interviewed
28:35
and hired These are the different stages that an applicant can go through whenever they're looking at the application So denied is if they don't
28:42
want to work with them Applied is like the default stage as you can see here That's the default And then finally different stages based on where they are
28:48
in the interview process So that's all the code right there for our job listing application Overall it's really straightforward It's really just a join
28:54
between the job listing and the user table with a little bit of additional information for like the stage rating and cover letter Now we have three more
29:00
tables to specify but these ones are going to be much smaller because they're mostly setting based tables So for example we can come in here with our
29:06
organization user settings.ts and this allows us to set settings for a user underneath of an
29:13
organization I'm again going to copy over the code and then explain exactly what's going on so it's quicker for you to go through You can see we're creating
29:19
a table called organization user settings table Give it a specific name And the important thing here is we're
29:24
linking our user ID and our organization ID because each user is going to be underneath of one or more organizations
29:30
or none They could be under no organizations They could be under one or they could be under many different organizations with the same user account
29:37
So we want to make sure that we handle that inside of our application So for each combination of user and organization we're going to make sure we
29:43
have specific settings set And as you can see here we're doing that same primary key trick where we're doing a joint primary key on our user ID and
29:49
organization ID because those are the two things that need to be unique Now the only settings we really have is do
29:54
you want to be set an email daily on new applicants and what is the minimum rating that you specify for those
29:59
applicants So this is the only thing that we have inside of our user organization settings Rather straightforward stuff and it's going to
30:05
be similar with the rest of our settings tables Obviously if you want to add additional settings this is the place you would do them if you want to expand
30:11
upon this application Now we can dive into our user settings which I actually kind of have split up a little bit So we can come in here We have our user
30:18
notification settings Just like that And I want to make sure that this is a TS file not TSX There we go We can paste in
30:24
the code for this Again very similar We have our user notification settings table We have the name of our table We have our user ID which is our primary
30:30
key We don't need to worry about any joint primary keys cuz it's associated with just with one particular user And again we have do you want to be sent
30:37
emails and if so do you have an AI prompt associated with that that you want to use or do you just want to be sent emails on every single new job
30:43
that's posted again this is a relatively straightforward table It's almost identical to the organization one The
30:48
last table we have is for managing the resume for a user So we can come in here Again I'll paste it down and explain
30:54
what's going on We have our user resumeé table Again the primary key is just our user ID because we're only having one
31:00
resume per user We don't need a specific ID for this table alone And then we have a ré file URL This is the URL to where
31:07
that actual file is hosted And then we have a ré file key This is like the unique ID that is used for our file
31:12
hosting system So this is able to make us delete files and so on for when we upload new rums We can delete the old
31:18
one using this particular key Lastly we have an AI summary And this is again something that could be null And this is
31:24
just what happens when we upload our resume In the background the AI is going to take care of everything for us generate the summary and then put it
31:30
into our database which is great So that's all of our tables created for us we can make sure that we export everything inside this schema file So
31:36
really what I want to do is I want to take each one of these different schemas that we created and I want to make sure I export every single one of them so
31:41
they're used inside of our application and I should probably name this with a lowercase U to be consistent with the rest of our applications And now if I
31:48
come in here and put that in there that should work just fine Now the final step that we have left to do with our database to make sure that everything is
31:53
working fine is to make sure that we define all of our relationships This isn't needed to define our database but
31:59
it makes working with Drizzle much easier For in our job listing for example we can come down here We can export a constant variable called job
32:05
listing references It doesn't matter what you called the variable It just matters that you export it and that you
32:10
call the relations function from Drizzle We can pass in the name of our table which is job listing table And then we
32:16
can specify a function that's going to take in a one and a many function on it that we can use to define all of our
32:22
different relations So inside here we're going to return an object and we're going to for example have a relationship to an organization and we're going to
32:29
have a relationship to applications Now you can call these keys whatever you want It's just useful because these are
32:34
the names of the keys inside of your application So in our case we have many applications So I can call many just
32:40
like this and I can pass it in the table that this is associated with it which in our case is the job listing application
32:45
table So we're saying we have many job listing application tables and we're going to call them applications Now inside here for our one table we have to
32:51
do a few additional things First of all we pass along the table that we're associating with this and then we also
32:56
need to pass along the fields associated with this So the fields is like what is the ID column for this in our case the
33:02
ID column for this is our job listing table organization ID So where is the ID from our table it's this particular one
33:08
And then where is the ID that it references in the other table So this is going to be the organization table ID So
33:14
we're saying hey this organization ID references the table ID for the organization table So this is just
33:20
hooking up those two tables together So we can really easily do different queries between these different rows and columns Now we essentially need to do
33:26
this throughout the rest of all of our different tables So in our job listing application we have the exact same thing We have a job listing application
33:32
relations We're going to make sure that this is going to have one job listing and one user because we have a job listing ID and a user ID So we have both
33:39
of those right here inside of this table We can do the same thing with our organization which is going to be rather straightforward We can come in here with
33:45
relations Make sure that we import both of these different tables And this only has many job listings and many
33:51
organization settings because we know that there are job listings that point towards our organization just like this
33:57
And we know that these organization user settings point to an organization ID as well And there's also options for many
34:03
of these Now speaking of the organization user settings we can actually do all of these settings as well for the relations So let me make
34:09
sure I get those imported in And this is again a relation that is a one relation We have one user and one organization
34:15
specifically for each one of these So it's a relatively straightforward one to set up And the reason again I'm copy pasting this code is because it's
34:21
exactly the same All I'm doing is changing where the field points to where it references and what table we're on So
34:26
again it's very simple code I'm just changing a few values So instead of making me type all this out and having you watch it I'll just copy and paste it
34:31
around Now this one I'm going to spend a little bit more time talking about though because it's actually slightly different than everything we've talked about so far Let me just do a quick
34:38
import here for all these different rows that we have and this one right here And the reason
34:44
this is different is you notice we're calling the one function but we're not passing along all those additional properties for fields references and so
34:51
on And that's because in this particular case we have a onetoone relationship So each user table has exactly one
34:58
notification setting and our notification settings has exactly one user So when you're doing a onetoone
35:04
relationship whichever table does not have the key so in this case our user table does not contain the key that
35:10
points to the other table Our user notifications contains the key that points to the other table So the one that does not contain that pointing key
35:17
you don't need to specify any additional properties You can just say one and specify what the table name is and Drizzle's smart enough to figure out all
35:23
the rest of that for you This is only in a onetoone relationship Often times though you have a one to many
35:29
relationship which is where you need to specify all those additional keys Now speaking of this type of onetoone relationship on the table that specifies
35:35
the actual foreign key in this case our user notifications table this one needs to specify all the additional fields to
35:41
hook up everything properly So anytime that you have a key on a table pointing to another table and you're doing that
35:47
one to one relationship or one to many doesn't matter you need to specify all the additional properties to make sure everything's hooked up inside of Drizzle
35:53
Now the final table that we have left is going to be our user resume which is almost identical to the user notifications It's just instead pointing
36:00
to the resume table instead of pointing to the user notifications table but otherwise it just has one single user
36:06
property And with that done we actually have everything done we need to create our database Now we can go ahead and
36:11
actually work on implementing this database and making it run So inside of our package JSON I'm going to add a few
36:16
scripts down here We're going to have DB push DB generate DB migrate and DB studio And all these are is essentially
36:22
aliases for calling drizzle kit and then push generate migrate or studio And what these commands do push just takes your
36:28
database inside your schema and directly pushes it to your database There's no migrations or anything like that It's just a direct here's your data push it
36:35
directly to the database It's really useful in development when you're just trying to work on a schema and making multiple changes But as soon as you're
36:42
ready to move to production that's where the migrate file is really useful Migrate is going to migrate based on
36:47
migrations you've generated And the generate command is what creates those migrations for you So I'll show you exactly how that works We can come in
36:53
here We can say npm run db generate and that's going to create a migration file based on all of our different code that
36:59
when it runs is going to generate our database for us Now you can see we haveenv config accidentally imported I
37:05
don't need this imported because again we're handling that all with nex.js So now I'm going to run that generate command again and you can see inside of
37:12
drizzle I have this migration right here Now I'm going to slightly change this I want it to be inside of source drizzle/
37:18
migrations just like that So we can come in here and we can delete all that migration stuff stuff it created And we
37:24
can try rerunning that again Now it's going to be pointing to the correct folder And you can see inside of here it created essentially a giant SQL file
37:30
that has all the code for creating all of our different tables altering all of our tables creating all of our enums
37:35
Everything we need is directly inside of this file So now what we can do is we can run npm run db migrate and it's
37:43
going to run this SQL code directly on our database So you can see if we run that migrate command it's pushing everything up but we are getting an
37:49
error Now the reason for that error is entirely because of me I had my testing version of the database still running
37:54
and it was causing some conflicts for what the new database should be So we don't have to worry about that anymore That was now fixed I ran that command
38:00
again As you can see it generated all of my code migrated everything and now my database has these tables inside of it
38:06
So to view what that looks like we can just come into our package JSON We can run that DB Studio command and that's
38:12
going to let us introspect our database So we can say studio just like that Now if we wait for that to run real quick
38:17
we'll be able to open up our database inside of our browser So I'll make this full screen so it's easier to see And as you can see we have all of our different
38:23
tables with all of our different columns For example our job listing and so on Currently everything is completely empty which is perfectly fine But now we have
38:30
all of our information directly inside of our database We can start working with and using this database in all of our application So now that we have our
Sidebar component
38:36
database fully integrated and set up the next thing that we can work on is making sure that our code looks a little bit
38:41
better Because right now this is our entire site So let's go ahead and start working on implementing a sidebar And to
38:46
do that we're going to be using Shad CN So let's make this a little bit bigger so it's easier to see and we can go through the setup steps for shad CN So
38:53
we first want to make sure that we initialize sad shad CN inside of our project We're going to pretty much use all the different default values for
39:00
shad CN So for our color we're just going to use neutral as the default color and we're going to be making sure we use force for installing all of our
39:06
different dependencies And that's just because we're using React 19 and not quite all of the components in Shad Cen are updated to React 19 but they still
39:13
work with React 19 So we just need to make sure we force install them to make sure that they work This is going to import all of our different files for us
39:20
If we go inside of here we have the lib folder which our CN function is inside of which is going to be making sure we can combine our classes And now we can
39:26
add the different components we want For example I can come in here and I can add a button or in our case we want to add the sidebar component Let's make sure
39:32
that I get that imported properly There we go So that's going to add in our sidebar component and it's most likely
39:38
going to ask us to force install this which is going to be fine We're going to do that with no problem And that's going to install a bunch of different
39:43
components If we go inside of our components UI folder you can see we now have a bunch of components for all the things that are used inside of the
39:49
sidebar Now the sidebar inside of Shad CN is a massive component that contains a lot of different stuff If we go into the docs we can actually look at the
39:55
sidebar component If I scroll all the way down here you can see sidebar This is pretty much what we're going to be building a sidebar that looks kind of
40:01
like this And if we scroll down you can see there's a ton of information on this page on how to use sidebars I found that
40:07
the best way to learn how to use these was to go to the block section click on sidebar and this allows you to actually look through all the different sidebars
40:13
that are out there all the different code for them And if you want you just click on code and it gives you the exact code for how this sidebar was
40:18
constructed and works And this is essentially how I went through and figured out how to create the sidebar that we wanted And I even stole some
40:25
things from this For example this little user picker right here I pretty much pulled directly from this Jad CN page cuz it looks and functions really well
40:31
Obviously I modified mine pretty heavily but it's very similar to what they have here here So what we can do inside of our application I'll make this quite a
40:36
bit larger because now we're going to work on our code is we can work on that implementation I'm going to come in here npm rundev just so we have our dev
40:43
server up and running And now what I want to do inside my app we're going to just go into a brand new page We can just put it in this page for now We'll
40:49
move things around a little bit And what I want to do is I want to implement that sidebar Now the very first thing you need when you're working with a sidebar
40:55
is a sidebar provider This is kind of what wraps your entire sidebar And in our particular case we want to add in a
41:00
class name here of overflow y hidden just to make sure if anything overflows in the y direction it's going
41:07
to be hidden which allows us to do scrolling properly So if for example our right side of our screen that's not the
41:12
sidebar is too tall it's going to make sure it scrolls without moving the sidebar around erroneously The next
41:17
thing we need is our actual sidebar itself So let's get our sidebar component And inside of here we can do
41:22
whatever we want In our case we're going to change the collapsible feature to be icon This means that when we collapse
41:27
our sidebar it's going to collapse down to icon sized instead of completely disappearing off our page which is what
41:33
we want for our particular application Also I'm going to make sure I add in the exact same class name here of overflow
41:38
hidden just to make sure when we collapse down to that icon size all the other things that's too large to fit
41:43
inside of our sidebar doesn't overflow the side of our sidebar Next in our sidebar we have the sidebar header This
41:50
is something that's going to be stuck to the top of our page In our case we're going to change this to be a flex row
41:55
And what I want to do inside of this header is I want to put the trigger for opening and closing our sidebar as well as the name of our application So we can
42:02
come in here with our sidebar trigger just like that That's going to allow us to open and close this And then we can
42:08
create a span And this span is going to say WDS jobs or this would be whatever the name of your application is Now we
42:14
can add some class names in here For example I'll make it extra large And I'll make it so the text doesn't wrap in case it's too large And now if we go to
42:21
our application and we give this a little bit of a refresh we should hopefully see our sidebar showing up on the side Now it looks like it's taking a
42:27
little bit to refresh That's fine It's just rendering this page for the very first time inside of our application but we should see a sidebar show up in just
42:33
a little bit Now we're not seeing a sidebar And the reason for that is cuz we're on a mobileized screen If I increase my screen size a little bit
42:39
there we go We can now see the sidebar shows up We collapse it goes down to the icon size and so on Now you'll notice when we collapse down to this size that
42:46
this icon is not perfectly centered Our W is still kind of showing up right here It's not exactly ideal So we're going to
42:51
go ahead and we're fixing that by modifying our Shad CN component We're going to go into this trigger and we're going to change a few things First of
42:56
all we're going to change the size here to be eight So it's going to be a little bit larger Now when we minimize down you can see it's perfectly centered inside
43:02
of our sidebar which is exactly what we want I'm also going to change which icon is showing based on if it is open or
43:07
closed So we can come in here and get the open property from use sidebar And then instead of rendering out this panel
43:13
left icon I can render out the sidebar close icon or the sidebar open icon from
43:18
Lucid icons And now if we come over here you can see we get a different icon based on if it is open or closed which
43:23
is exactly what we want for our content So now with that out of the way we can go back to our page where we're implementing our sidebar And that's
43:29
everything for our header And again this is going to be stuck to the top of our page So we don't want to put too much content inside of here because on
43:34
smaller screen sizes it's going to take up a significant amount of our page Next thing that I want to work on is going to be our sidebar content This is where we
43:41
put all of our content for like our filtering form and so on Let me make sure I import that properly For now we're just going to leave this blank
43:47
I'll put in a little bit of text Doesn't really matter but that's essentially where that content is going to go It's going to be the rest of our sidebar And
43:53
this is going to be the thing that scrolls if our sidebar has a lot of content in it and so on But for now we don't need to mess with anything inside
43:59
here cuz we don't have a filter form or anything I'm just trying to get the overall layout of our page set up The
44:04
final thing that I want to focus on is going to be the footer section where it's going to show essentially our login
44:09
link and all that If we went back to that Shad Shan page that's the thing I essentially copied from that Shad CN page and modified for my use cases So
44:16
this is going to be inside the sidebar footer And inside here we want to specify a sidebar menu Just like that
44:22
Make sure I import both of these components And inside this sidebar menu we want to have a menu item And this is
44:28
kind of how you structure things inside of the sidebar in Chad Cenne You have your wrapper whether it's content footer
44:33
header Then if you want to create items you can interact with you put them inside of a menu You put them inside of a menu item And then specifically you
44:40
put a sidebar menu button And that's how you do your interaction with these specific things So I could just put some
44:45
text inside of here I'll make this full screen Now you can see when I hover over this it gives me a small background behind it It's a little bit hard to see
44:51
on this screen color but you can see it gives me that slight background hover Now I find in dark mode it's a little bit easier to see these things So for
44:57
now I'm just going to manually hardcode our entire application in dark mode by putting the dark class on here We'll
45:02
come back and change this in a bit But now you can see when I hover over this it's a little bit easier to see that this is an interactable button on our
45:08
page Now the next thing that we need to work on is where the rest of the content on our page is Everything on this right hand side that's going to be directly
45:14
outside the sidebar inside of a main element We're going to give it a class name of flex one so it grows to fill the
45:19
full size And then we'll give all of our children inside of here Now we don't have any children cuz this is our homepage So we can just put some content
45:26
inside of here And you can see that that shows up directly right there right next to our sidebar which is exactly what we want We could add some like margin on
45:32
this for example but I want that to be page by page They can add their own margin if needed Now in order to fix the problem where our sidebar disappears on
45:39
mobile screens and we have no way to open it we need to create a brand new component that's going to be a client component that's going to allow us to
45:45
show a single open button when we're on a mobile screen versus when we're not on a mobile screen So I'm going to create a
45:50
brand new component We'll just create it in here for now We'll reorganize things in a little bit And this is going to be our app sidebar client.ts And generally
45:58
when you're in the app folder I specifically like to put an underscore in front of things that are not actually pages in my application And when I'm
46:04
trying to create a component that has like two pieces for example I have my sidebar here and then I have the client version I often put an underscore in
46:11
front of the client version because I know that's not something I use externally It's only used internally And since in Nex.js to use a client
46:17
component you need to create a brand new file That's just kind of a naming convention that I like to use So we'll
46:22
export a function It's going to be called app sidebar client Just like that
46:29
And this function is going to take in children Essentially that's going to be our entire sidebar So we're going to
46:34
have some children If I can spell properly There we go This is a React node And inside here what I
46:41
want to do is I want to figure out if we're on a mobile screen or not Now normally I would use CSS for this but
46:46
the way that shad CN actually implements their sidebar If we go into the code for sidebar is they use this is mobile hook
46:53
and this is how they determine is it a mobile page or not a mobile page So that's what we want to hook into We can
46:59
say is mobile is coming from that use is mobile hook and this will allow us to figure out exactly what breakpoint
47:05
shaden hides and shows the sidebar based on if it's a mobile page or not So if we are in the mobile view we want to show
47:12
that extra navigation on the top of our page But if we're not in a mobile view just return our sidebar like normal cuz
47:17
we don't need to make any additional changes to it So for now we can actually see what this is going to look like I'm going to return null here for now And
47:23
we'll come in to our page and we'll use this app sidebar client So on our page we essentially want to wrap our entire
47:28
sidebar inside of this So we could say app sidebar client just like that There
47:33
we go and wrap our entire sidebar including our content down here because we want to make sure the navigation goes above everything in our application And
47:40
now you can see it renders nothing if we're on a mobile screen because we're returning null But on a full-size screen
47:45
if we make this a little bit bigger you should see it's rendering properly But it's actually not rendering properly There we go I gave our page a quick
47:50
refresh I'm guessing it just wasn't properly caching what was going on But now you can see as I change the size of my page it's rendering or not rendering
47:57
that based on if we're in the mobile view or the non-mobile view So the next thing I can do is instead of returning nothing I can return essentially a
48:03
navbar at the top of our page So here I want to return a div We're going to put a class on this And I think I need to
48:08
make sure that this is a tsx file There we go We're going to put a class name on here Flex flex column and a full width
48:15
So essentially this is just going to be a full width container that is going to be stacked vertically Then I want to
48:20
come in here with a div This is going to be a class name of P2 border on the bottom This is essentially our nav at
48:27
the top Flex We're going to put the items in the center and we're going to have a gap of one And essentially I just
48:32
want to add in the same thing that I had inside my sidebar So we go back to our sidebar and we open up I essentially
48:37
want to add whatever was in my header So I just want to take this content and I essentially want to put that directly right here So we're going to get our
48:43
sidebar trigger and we're going to get our text for our jobs And in this case we don't need to worry about no wrap because there's no way it's ever going
48:49
to wrap So that's going to be our nav at the top which you can see is showing up and we have that button to trigger our sidebar but we're not rendering any of
48:55
our children so the sidebar is not showing up So to do that let's create another div This is going to be again a flex of one because we want this to fill
49:01
the rest of the space on our screen We want it to flex And then we want to put our children inside of here So now if we
49:07
give that a quick save I can now open and close my sidebar properly on mobile screens While if I'm on a larger screen
49:13
now I just had to do a quick refresh on my page to make sure everything was working properly Again it just was doing some caching stuff But you can see as
49:18
I'm changing my screen size it's properly giving me that top navigation or the side navigation which is exactly what I want And I can still open and
49:25
close my sidebar exactly as I could before Now in order to really get started with our application I want to work on this button down here which is
Clerk setup
49:31
going to be our sign-in button as well as all of our user information And to work with sign in and sign out we're going to be using Clerk for our
49:36
application It just makes authentication really easy And it's also going to help us with billing and organizations and pretty much a large portion of our
49:42
application So let's go through the setup steps It's relatively straightforward We need to make sure we create a next app Already got that done
49:48
We need to install clerk into our application So let's make sure we install that and we're going to need to add that force flag again because we're
49:53
on the Canary version of Nex.js Then the next thing that we need to work on is being able to wrap our application in
49:58
this middleware for clerk So I'm going to come all the way over to our application We're going to create a brand new file called middleware.ts I'm
50:05
just going to paste down the code from here Essentially it just runs the clerk middleware to make sure everything's hooked up properly but it doesn't block
50:10
any of our site from being accessed Everything is still public by default Next we need to wrap our app inside of a
50:16
clerk provider And I'm actually going to create our own custom clerk provider to hook up a few additional things such as
50:21
theming inside of clerk And then that's really all we need to do So we just wrap our app in our clerk provider and we're
50:26
done So I'm going to create our own clerk provider So inside of a brand new folder called services I'm going to
50:31
create another folder called clerk inside of there And this is where all of our clerk related code is going to go So I'm going to create a components folder
50:37
And inside of here I'm going to create a clerk provider We'll call this.tsx And this is where all my clerk provider
50:43
related code is going to go So we're going to say export function clerk provider just like that And we need to
50:49
import the original clerk provider So clerk provider as clerk provider and
50:56
we'll call it original clerk converider So original and we want to get that from
51:02
add clerk next.js There we go And we can use that in our app by just saying return original clerk provider And we
51:09
can wrap it in whatever content we want In our case we specifically have some children that we're going to pass into this because as you can see the clerk
51:15
provider expects some children inside of it So we're going to use those children And we'll make this a lot larger so it's easier to work with There we go And this
51:23
is going to be a React node So now we can pass along our children inside of here And that gets rid of all of our errors Now the reason I wrapped my own
51:30
clerk provider is cuz I want to add some things such as theming So we can come in here with a simple appearance And we're going to have our is dark mode function
51:36
that we're going to use to determine if we're in dark mode or not If we are in dark mode well then I want to pass along
51:41
a base theme And this base theme is going to be a dark theme which we again need to import because this is something
51:47
from clerk themes So what we can do inside of here is npm i and we want to
51:52
get clerk themes just like that Again we want to make sure this is a force install And now what we can do is we can
51:58
say that we want to import this from clerk themes So import
52:04
dark from at clerk next.js There we go And now in the case that we don't have
52:09
dark theme well I just want to pass in undefined because we want to use the default light theme that comes with clerk So now all we need to do is use
52:15
this is dark mode Also I should fix this to import from the themes folder Just like that So this is dark mode is going
52:22
to be coming from a custom hook that we're going to create So is dark mode equals use is dark mode There we go And
52:29
let's make sure that this is a client component There we go And now we can hook up to
52:34
this use is dark mode function which we're going to create inside of this hooks folder So we can say use is dark
52:41
mode So let's export a function use is dark mode And all this is going to do is
52:48
use a simple state variable is dark mode Set is dark mode Set that equal to use
52:55
state Make sure I get that properly There we go Use state And by default I want to set this for if our type of
53:01
window is equal to undefined Well then we're
53:07
going to set this to false So essentially in the case that we're pre-rendering our page we don't want to mess with this at all We're just going
53:12
to return false Otherwise we're going to return window.match media and we're going to be specifically checking for
53:18
the prefers color scheme dark There we go So if this matches then
53:25
we want to return true or false So this is essentially a boolean If the user prefers a color scheme of dark it'll
53:30
return true Otherwise it'll return false Then we can set up a simple use effect
53:36
We can call window.match media We can pass in the exact same media query right here And this allows
53:42
us to add an event listener for whenever this changes So anytime that the user preference changes between dark and
53:48
light this is going to call a function for us So we can pass in a function that's going to take in that event And
53:54
all we're going to do is say set is dark mode equal to e.m matches
54:00
There we go And let me just make sure I get my parenthesis fixed on this There we go And that is going to hook all that
54:05
up for us So anytime they change our dark mode between true and false this is going to set that variable for us We need to make sure we unhook this event
54:12
though in the case of rerendering our page We're going to use a controller for that So we'll say new abort controller
54:17
just like that And we'll pass along the signal So controller signal There we go
54:23
Then inside of our use effect down here when we do our return
54:29
we can just call controller.abort And what that does is it unhooks our event listener for us So this sets up our
54:35
event listener and this unhooks our event listener And if you're interested in how this abort controller and everything works I actually have a full
54:41
video talking about the abort controller inside of events like this I'll link it in the cards and description for you But
54:46
now we have our is dark mode We can return that is dark mode There we go Make sure I unimport that thing And
54:52
there we go Now we have that We can import it into this file And now we can use it directly inside of here So depending if we're in dark mode or light
54:58
mode we're going to be changing the clerk theme directly related to that Now one additional thing that I need to do
55:03
I'm not sure if it's a bug related to Nex.js or if it's something related to the code that I'm writing or if it's just something related to Clerk and how
55:10
the new Canary version of Nex.js is working but we're going to need to wrap this inside of the suspense component
55:15
inside of React because otherwise when we build for production it's going to throw an error for us So we're just wrapping essentially our entire
55:21
application in a suspense to make sure everything is going to be working properly And again it's most likely either something that I have slightly
55:26
wrong in my application or it's just a feature of how the Canary implementation of Nex.js is currently Now the next
55:32
thing that I need to do is actually use this clerk provider So inside of our application we're going to wrap everything inside of a clerk provider
55:39
making sure that we get our custom clerk provider not the one that comes from the library And now you can see our entire application is wrapped in this And we're
55:46
able to access all the information for the currently logged in user and so on Now to test that everything is working properly let's go ahead and actually add
55:52
the ability for us to sign in sign up and so on To do that really easily we can scroll down a little bit further on
55:57
Clerk We have this create a custom sign in or sign up page In our case we're really focused on the sign-in page
56:03
because the nice thing about Clerk is we have like a one-step function where you can use signin or sign up on the same page if you want You can disable that if
56:09
you want but we're going to leave it enabled for ease of use So all we need to do is create a file and put this particular code inside of it Rather
56:15
straightforward So inside of our application we need to put this code Now I'm going to create a new folder called clerk just like this for all of our
56:21
clerk related code inside of here because these are kind of independent routes that are separate from everything else They're going to have their own
56:27
layout file and so on So we're going to create a page.tsx I'm just going to paste in that code This is our signin
56:33
page There we go Signin page and it's going to use that signin component Now if we look we know that this page needs to be
56:39
in a sign-in folder inside of this code So let's make sure we create a folder with all of that particular content and
56:45
we're going to put our page directly inside of there so it's in the correct location inside of our application Then we need to make sure that we make our
56:51
sign-in route public if we want to worry about public routes and so on which I think is something that we want to do So inside of our middleware we can create a
56:58
variable called is public route just like that And we're going to
57:04
create a route matcher There we go And we're going to pass it in essentially an array of all the different routes that
57:09
we want So in our case we have sign in which needs to come with a star after it just like this make this a little bigger
57:16
so it's easier to see So essentially we're just matching this particular code right here So now our signin route is publicly available We also need to make
57:22
some other routes publicly available such as our root home route is also publicly available There we go Then to
57:28
be able to test for that we'll just copy this code directly over paste it in Essentially if it's not a public route we're going to call off protect All that
57:34
does is ensure that our user is logged in before we do anything Otherwise we continue on with our code Next we need to specify some variables inside of our
57:41
config Essentially where is our signin page at where's our fallback route and where's our fallback route for signup So
57:46
essentially this is going to happen if they finish their or if they try to directly access the sign in or sign up
57:52
route As soon as they do sign in or sign up it's going to redirect them to these pages So we're going to copy that over We're going to come into our environment
57:58
variables and we're going to make sure we put this inside the clerk section Now technically in our application we're not
58:03
going to be directly referencing these variables but we still want to make sure that they're there And this is a really nice thing about using that T3 library
58:09
for our environment variables is we can come into here We can create a brand new file for our client.ts and we can make
58:15
sure we essentially kind of do the same thing But what this is going to do is it's going to ensure that these variables that we import are actually
58:21
going to be required in our page So even though we're not using them in our application it's going to require that they're inside of our env file right
58:28
here So this is going to be for our client-based environment variables We don't need to worry about creating a final schema and we don't need to worry
58:34
about this experimental runtime stuff as much but we do need to make sure we pass along what our variables are going to be So we have this variable
58:41
this variable and then finally this variable and all of these are going to be strings and they are required strings
58:47
Now again you can see that passing along this runtime envir We need to actually hardcode exactly
58:53
what the runtime variable looks like So essentially we take whatever the key is and we're going to pass it in what the value is which is from process.env env
59:01
whatever that variable name is And we need to do this for each of our variables So I'm going to copy this down two more times and copy over each of our
59:08
variables just like this So essentially all I'm doing is I'm mapping whatever the environment variable is If I make
59:14
this a little bigger it's a little easier to see You can see we're taking our environment variable and mapping it to this particular name It's just something we have to do on the client
59:20
side It's not automatic which is a little bit annoying But now we have that inside there which is great And now we can actually run our application and
59:26
access that login page if we want So inside of our application we can go to sign in and we should see a sign-in page
59:32
pop up Now of course we need to run our application first So let's go ahead and run our application And now we should
59:37
see give that a quick refresh It'll pop up our sign-in page It's going to be really ugly right now because we don't have
59:43
anything set up for application So we're going to go ahead and make sure everything's working properly So the first step is you'll notice it says clerk is in keyless mode Essentially we
59:50
don't have any API keys configured for our application So let's do that first before we work on the styling portion We can come into here We can go to our
59:56
dashboard create an account whatever you need to do And now you can come in and you can create a brand new project You can see I have my job board that I was
1:00:01
using for testing We'll just come in here and we'll call this one job board final And we can specify exactly how we
1:00:07
want the sign-in process to be For example we'll enable Google GitHub and email Those are going to be the three
1:00:13
ways that we can sign into our application We'll create this application real quick And now we can specify you know what we're doing Nex.js
1:00:18
Doesn't really matter This is just the install steps we've already gone through What we really want to do is we want to configure our application And we can
1:00:24
make this a little bit bigger a little bit easier to see You can see we want people to be able to use an email We require that they have an email We can
1:00:30
make sure that they verify at signup if we want I'm going to disable this even though it's not recommended I wouldn't recommend doing this but for testing
1:00:36
purposes this is going to make it easier so I don't have to log into my email every time I create a brand new account Now I'm also going to make sure first
1:00:42
name and last name are required because we want to be able to show that with every users whenever they apply for a
1:00:47
job We want to be able to show their first name and last name So we're going to give that a quick save And that right there is going to be pretty much all the
1:00:52
stuff that we need to do for our signin Now the next thing we can do is we can focus on styling things and getting our environment variable keys So let's come
1:00:58
and make sure we get our environment variables If you see we can click right here where it says API keys and we can just copy over these API keys and we can
1:01:05
put them directly inside of our environment variable So now we have our publishable key and our private key So let's make sure we put those inside of
1:01:11
our schema So we have our publishable key Z string Whoops
1:01:17
String.min of one And again use that down here
1:01:22
There we go Now we have that hooked up And we can do the exact same thing for our server as well This is our clerk secret key We can come in here Clerk
1:01:29
secret key And we essentially just want to make sure that this is a string like that So now we have all those environment variables set up Even if we
1:01:35
don't use them in our application we at least have them set up so that it's forcing us to make sure we have those applications And now if we go back to
1:01:41
this page and we give this a little bit of a refresh we hopefully should see we're no longer in keyless mode but the rest of our styles still aren't great So
1:01:47
let's get this centered inside of our page That's going to be really easy for us to do Inside of our app in this clerk folder we want to create a brand new
1:01:53
file called layout.tsx This is where all of our clerk related stuff is going to go Um we can see here we have this clerk
1:01:59
layout I'm just going to copy it over cuz it's super straightforward what we're doing We just have a flex container We're making sure that this is the full height of the screen and the
1:02:05
full width of the screen And we're going to center our items in both directions and we just wrap our children in a div So now if I save you can see that
1:02:11
perfectly centered our object for us Now you notice that there's a problem with our theming of our dark mode And that's because we're using prefers color scheme
1:02:18
dark for if we're in dark mode or not And by default the way that shad CN works is it's based on a class for our
1:02:23
custom variant We want to change this custom variant to use the exact same thing which is a media query So we'll
1:02:29
use media This is prefers color scheme dark And this is actually just all
1:02:35
Tailwind V4 stuff So this is the new way of configuring this kind of stuff We want to put an amperand inside of here
1:02:40
and then we say add slot Essentially all this is saying is put all of our tailwind code directly inside of here if
1:02:46
we prefer the color scheme of dark It's going to use the dark version for all of our different styles Now you will notice that it still shows us in dark mode and
1:02:52
that's because we also need to modify down here This class of dark needs to be changed to a media query as well So this
1:02:58
is going to be media prefers color scheme dark And now you'll
1:03:04
see that we will immediately go back to a light mode once I get all this set up properly And that's because this needs
1:03:09
to be inside of our root object There we go And let me put the extra bracket down
1:03:14
here There we go And now you can see we've swapped back to light mode because that's what my browser is currently set inside of Now I just went through and
1:03:20
swapped my browser into dark mode So we can see everything properly swapped over to dark mode When I refresh it all still stays in dark mode And you can see I can
1:03:26
now sign in with whatever account that I want Let's go ahead and say that I want to sign in with GitHub I can go through
1:03:31
here It's going to load up It actually signed me in with GitHub automatically because I've already hooked up my account before And now we can just type
1:03:37
in for example Kyle Cook That's going to be what information I want for my name Continue And now I'm signed in as that
1:03:42
user You can't actually see it because we don't have anything visually showing it on the page but I am now signed in as that user Now I want to go ahead and add
Auth buttons
1:03:49
the ability to put a link down here that's going to be for signing in a user And we can also add something like that user drop down that I talked about
1:03:55
earlier So let's go ahead and work on that Next inside of our page where we have our footer we essentially want to have a lot of the same stuff We want our
1:04:01
sidebar menu We want our sidebar menu item We want our sidebar menu button but we want to make sure that this button
1:04:06
actually does what we want it to do And we want to only show this if we are currently not signed in or signed in So
1:04:11
what we want to do is we want to make this a link that's going to bring them to the sign-in page if they're not currently signed in just as a temporary
1:04:17
placeholder And I'm actually going to put that inside of our sidebar content instead And we're specifically going to put it inside of a sidebar group just to
1:04:24
make sure we get all the spacing we want for everything properly So now I have a sidebar group with our menu with a menu item and it has a menu button And this
1:04:31
button is going to be a link So we want to make sure we render this as child just so it renders the link component itself Now this href is going to be
1:04:38
pointing to our signin page which is just sign in just like that And now we want to render the icon that we're going
1:04:44
to be using as well as the label that we're going to be using So for our icon we can just use a simple login icon just
1:04:51
like that And then we can also just have our text which we're going to put inside of a span That way it doesn't overflow
1:04:56
or anything properly It makes sure when we close our sidebar it works properly That's just going to say log in Just
1:05:01
like that Now if we give that a quick save we should hopefully see that in our sidebar If we look you can see we have this login button that redirects us to
1:05:08
the sign on page Now we're currently signed in So when it redirected us it automatically redirected us back to the homepage which makes sense because we
1:05:14
can't sign in if we're already signed in So I only want to show this button if we are currently signed into the page So
1:05:19
I'm essentially going to wrap this entire item inside of the signedin component
1:05:25
There we go This is a component that comes directly from Clerk and it essentially says only render the content inside of here if you are signed in Now
1:05:32
if we do that real quick and we give this a refresh you can now see that this is showing up because we're signed in I want to use the signed out component
1:05:38
though I used the wrong one here So now you can see that this has disappeared because we're currently signed out Now one interesting thing since we're using
1:05:44
the Canary version of Nex.js anytime we access dynamic data such as headers we
1:05:50
need to make sure we wrap that inside of a suspense You can actually see we're going to get an error If I come into my clerk provider and we just comment out
1:05:56
this suspense right here And now I give that a save and we just refresh our page You'll notice that trying to render out
1:06:02
this content will sometimes throw an error inside of Nex.js Now it's not show throwing one right now but sometimes it
1:06:08
will throw an error because of the fact that we're accessing dynamic data So what we need to do is we need to make
1:06:13
sure we wrap anytime that we use this inside of a suspense So we're going to wrap that suspense and we're going to
1:06:18
put it entirely around our signed out component Now in our particular use case this is going to be something we're
1:06:23
going to do a lot So I want to extract this out into its own component Also a nice thing about doing this is that now
1:06:29
we don't actually have to rely on importing clerk components directly into our application We can import them into that services folder So inside of here I
1:06:36
want to essentially create components for signed in and signed out So I'll just call this signin status.tsx
1:06:42
And we essentially want to export those components exactly like we had before So if we come over to our application I
1:06:48
just want to take essentially all of this and I want to put that inside of a component So we'll call this a function
1:06:53
We'll call it signed out We want to take all this sidebar stuff replace it with
1:06:58
children because that's what we're going to be using And then I just need to make sure I import everything properly So we're going to import suspense and we're
1:07:04
going to import signed out from clerk And we want to rename that as clerk
1:07:09
signed out There we go So now we can just wrap our code like this And this takes children
1:07:16
And right here children which is a React node Make sure I spell that properly There we go So now you can see we
1:07:23
essentially just took our own version of this signed out wrapped it in a suspense and we can do whatever else we want
1:07:28
inside of here We can do the same thing for signed in So I'm going to come in here signed in just like that We want to
1:07:34
make sure we import the exact same thing up here So this is going to be signed in
1:07:40
There we go And then down here I want to use the signedin version Now the reason again that I'm exporting these is not
1:07:45
only so I don't have to copy this suspense around everywhere but now let's say I changed from clerk to another off provider or I wrote my own custom author
1:07:52
provider All I need to do is change the signedin component in one place and it's going to work everywhere in my application So I don't have to rely on
1:07:58
this clerk implementation in my application I can use it inside of my own component and then if I need to swap things out or change things later it's
1:08:04
really easy to do that So now inside of our page instead of importing directly from clerk let's import our own custom
1:08:09
signed out component that we created and it's going to work exactly the same and we don't need to wrap it in this suspense anymore So now the next thing
1:08:15
that we can focus on is the button down here for our actual dropdown This is this section down here that currently
1:08:20
has no text inside of it So inside of this I'm actually going to extract this out into its own component And I'm going
1:08:26
to put this component in a brand new folder So let's kind of minimize all of our folders down We're going to create a brand new folder called features And
1:08:32
inside here is where we put all the features for all of our applications for like job listings users organizations In
1:08:37
our case we care about the users And I specifically want to create a component So we're going to put that inside of a components folder And this feature-based
1:08:44
folder structure is something I like to use in lots of different applications If you want to learn more about it I'll link it in the cards and description I
1:08:49
have a full video covering it So inside of here I want to create a sidebar user button.tsx And this is going to be for
1:08:56
all the code related to our sidebar So let's export that function sidebar user
1:09:02
button And we're actually going to need to create two functions because we're going to need to have an asynchronous function as well And anytime in the
1:09:08
dynamic IO canary version of XJS that you access dynamic data you need to wrap it inside of a suspense So we need to
1:09:13
make sure we wrap this inside of a suspense Just like that So we have a suspense which is going to be our
1:09:19
sidebar user suspense There we go Essentially I'm just creating that wrapper to put suspense
1:09:25
around my component And then the bulk of my component is going to go inside this new function I just created So the very
1:09:30
first thing we need to do is we need to get our user related information So we can say user ID is equal to calling the
1:09:37
off function directly from clerk Now we're going to move this off into its own provider so we can get information from our database and so on But for now
1:09:43
we're just going to put in the clerk version of this code right here And that's working just fine Now the next thing that we need to work on is
1:09:49
actually rendering out our component And this is something that actually needs to be rendered on the client So here I'm going to return a sidebar user button
1:09:58
client version of that component I'm going to be passing in our user information Now currently we only have
1:10:03
the user ID again because we haven't hooked this up to our database yet So we can kind of hardcode some data such as like an email that says kyle@test.com
1:10:11
and a name which just says Kyle Cook For now that's just going to be what our information is going to look like There
1:10:18
we go We'll close that off And now we need to create this brand new component So this component I'm going to put with an underscore in front of the name
1:10:24
because again that's what I like to do when I deal with these clientonly components that are only imported in other components And the only reason
1:10:29
they're in a new file is cuz I had to put use client at the top So the definition for our function is relatively straightforward We're passing
1:10:35
in a user that has a name image and an email Now we didn't have an image being passed into here for now For now I'll
1:10:41
just put an image URL that's blank It's just for testing purposes for now but it'll work out well enough Now we can
1:10:47
come into our client We can import that And there we go We give that a save It should work properly All we need to do now is implement what this code is going
1:10:53
to look like And we need to figure out if we're on a mobile screen or not And that's the whole reason we need to make this a client So we can come in here
1:10:59
with use sidebar That's going to get that Or we can just say use is mobile That's probably a better hook for us to use cuz it takes in less overhead Now to
1:11:06
render this out we're going to come in here and return a sidebar menu So we can come in here sidebar menu just like that
1:11:14
Inside this sidebar menu we're going to be using a drop-own menu And we need to make sure that we import that So we're
1:11:20
going to come in here with shad CN and we're going to add the drop-down menu
1:11:25
And we just need to put a hyphen in here That'll add that for us And of course we'll need to make sure we force install that And that's going to give us those
1:11:31
brand new components And while we wait for that we might as well finish out the rest of this So we're going to have our drop-down menu trigger Make sure we
1:11:38
import that from the correct location Same thing here We have our drop-own menu This trigger is going to be an as
1:11:43
child trigger Pretty much what we always use And this is where we're going to create that sidebar button So we're going to create our sidebar menu button
1:11:52
And this button is going to be a large button So we'll come in here with a size of large And we'll add a bunch of
1:11:57
different class names into this Essentially this is going to be what we want it to look like versus open or closed So we can come in here with a
1:12:02
data state equals open This is going to be what we want the button to look like
1:12:08
in the open state In our case we want to add a background that uses the sidebar accent color Then we can come in here
1:12:14
and do more styling for that open state So we'll say state open And in our case
1:12:19
here we want the text to be the sidebar Whoops Text sidebar accent foreground So
1:12:24
essentially when we are clicked on this dropdown and it's open we want to accent what the button looks like Then we want
1:12:31
to specify what all of our user information is going to look like I'm going to put that in its own component because we're going to use that in a few
1:12:36
locations We'll pass in a user And we'll create that function down here
1:12:42
User info Just like that And that's essentially going to take in this user type So I might as well extract this out
1:12:49
Just like that And we can use that here And then we can use that here Might as
1:12:55
well call it user There we go And now for now we'll just return null just so we get rid of those
1:13:03
errors Lastly we're going to add in an icon for our chevrons So we're just going to add this chevron up down icon
1:13:08
The styling is we're just adding margin on the left to make it as far to the right side as possible And we're also going to be making sure we hide this
1:13:14
when our sidebar is collapsed just so it doesn't actually show up We only want the essentially icon of the user to show
1:13:19
up in the collapsed state Now the next step is going to be our drop-own content And we can come in here This is going to
1:13:25
be drop-own menu content Just like that And for now I'm just going to leave this blank We'll come back to this in a
1:13:30
second I'll just put the text hi in there for now cuz I want to work on this user information section next So inside
1:13:35
this user information we want to create a div And this div is going to have our avatar So we're going to be making sure we get the avatar component from Shad CN
1:13:43
That just makes rendering out user icons much easier Again we'll need to make sure we force that and that'll install
1:13:48
that for us behind the scenes So inside of here we can render out our avatar component
1:13:54
There we go We're going to give this a class name of rounded large to make it so it's rounded and a size of eight so
1:14:00
we can see exactly what that looks like Then the next thing that we want to do is we want to have our avatar image just
1:14:05
like that This one is going to have a source which points to our user image URL In our case we might as well just
1:14:11
extract this out into the params that we need There we go So that way we don't have to prefix everything with user So
1:14:17
we also want to set an alt equal to the name of the user So that is going to be what our image looks like We're also
1:14:23
going to have a fallback in the case that our image is not loaded yet So we'll come in here with a fallback Class name on this is going to be uppercase
1:14:29
It's going to be a background of primary It's going to be a text of primary foreground And in order to actually
1:14:35
figure out what text we want to put inside of here we're going to create something called name initials
1:14:40
There we go And this is just going to be taking the user's name and getting the first couple initials of their name So we can say const name initials is equal
1:14:48
to their name We want to split it on a string Then what we're going to do is we're going to slice this and we want to
1:14:53
get just the first two elements in the array That's what this does right here And then we're going to be mapping those by taking the string and we want to get
1:15:00
the first parameter or the first index from the string and then join it back on an empty string So essentially all this
1:15:06
code does is it takes the first letter of each of their names So first name last name and so on cuts them all off
1:15:11
and puts them together So if the name was Kyle Cook it would return KC for us And that's going to be what shows up in
1:15:16
this name initials section And then finally below our avatar we want to have all the content for the user This is
1:15:21
going to be a flex in the column direction We want this to take up as much space as possible The min width on
1:15:26
this is zero So it will be able to shrink down I want to put the leading on this to be tight That way it shrink
1:15:32
shrinks down our content a little bit vertically And then finally if we are in that collapsed state So if our group
1:15:37
data is a state of collapsed
1:15:43
I want to make sure that this is hidden because I don't want to show this content There we go And then inside of
1:15:48
here we essentially just have a couple spans One's going to be for our name and then below that we're going to have one for our email There we go And then we
1:15:55
can specify our class names on this We want to truncate our text in case it overflows We want to use small text and
1:16:01
we'll use a text of semibold There we go And then for this one down here it's going to be very similar So
1:16:07
I'm just going to copy this For our email we're going to be using extra small text And we're not going to have any font semi-bolding on that So now
1:16:14
we'll just make sure our style up here is fine We're going to flex this items in the center a gap of two And we're
1:16:20
going to hide any overflow that we have which will make our truncation down here work properly So that's everything to
1:16:25
create that sidebar button We need to make sure we use this is mobile which will be used in our drop-own content
1:16:30
We'll implement that in just a little bit I want to make sure what we've created so far is working properly though So let's go back into our page
1:16:35
and inside here we actually already have our sidebar menu We have our sidebar menu option So where we have our sidebar menu button that's where we want to add
1:16:42
in our user sidebar and actually I called it sidebar user button Just like
1:16:47
that So this is where I want to add that sidebar user button And that'll show up down here at this section right here And
1:16:53
of course we want to go into that because I actually don't need to have this wrapped in a sidebar menu because I already have it wrapped in a sidebar
1:16:59
menu Now of course we need to get our application back up and running So let's come in here with an npm rundev So we
1:17:04
can see our application Make sure I get rid of that There we go Give that a quick save And now if we open up our
1:17:10
sidebar you can see down here we have the icon of our user And if we have no icon you can see it shows their initials And in our case we have no icon cuz we
1:17:16
passed in an empty string We have the name we have the email and then we can open this up to see our dropown menu which right now has no content in it So
1:17:22
let's go ahead and make our drop-own menu item next So we're going to go ahead and we're going to open up that component inside of our drop-own menu
1:17:28
content What I want to do inside of here is I want to add a drop-down menu label This label is going to have a class name
1:17:35
of font normal and P1 just to essentially normalize all of our information inside of here And
1:17:42
inside this label I just want to render out our user info with all of our user information That's why I extract this
1:17:48
out into its own component So now if I import this label and we give that a quick save when I open up my sidebar you
1:17:54
can see it renders out essentially the content for my user inside of here Now to make sure that this looks a little
1:17:59
bit better and fills the full screen and everything else what I want to do is I want to go inside of my drop-own menu
1:18:04
content I want to change my side offset This is going to be set to four I also
1:18:09
want to change my alignment We're going to align it on the end I want to change the side here And this is where that is
1:18:15
mobile property comes in So if I'm on the mobile property I want this to be on the bottom just like it currently is Otherwise I want it to be on the right
1:18:21
hand side just like that And then finally our class name min width of 64 And we'll specify a max width of 80 just
1:18:28
to make sure that this looks a little bit better Now when I open this up you see it's on the right hand side And that's because is mobile is not actually
1:18:33
wrapped in brackets That should hopefully fix that problem And now you can see it opens on the top if I'm on a mobile view which is exactly what I want
1:18:39
And now we can add in all of our different buttons inside of our dropdown which is going to be relatively straightforward First I want to add a
1:18:45
drop-own menu separator That's just going to separate the top section from the next section Then we can create a
1:18:51
drop-own menu item And this drop-own menu item is going to have an onclick property to open up our user profile So
1:18:58
we'll come in here with an open user profile Just like that We'll create this function in just a little bit But what I
1:19:04
want to do inside of here is I want to render out the user icon I want to give it a class name some margin on the right
1:19:10
of two and then we can just say the text profile Just like that So now you can
1:19:15
see we got that profile icon showing up which looks really great We may not even need that spacing Let's maybe make it a
1:19:20
margin on the right of one And we'll keep it at two That's fine No we'll move it back to one I think that looks a little bit better Next we're going to
1:19:26
pretty much copy this down because we're going to create a brand new one for accessing our settings So this one is going to be as child because it's going
1:19:31
to wrap a link component And this link component is going to go to user slash settings/n notifications
1:19:39
And this should be a dash right here User settings notifications And inside of this link we want to render out a
1:19:45
icon which is our settings icon There we go And this one is going to say
1:19:52
settings So now you can see we have our settings icon I'm then going to add another
1:19:58
separator to separate us from the logout button which is going to be the final thing that we have And I'm going to copy over this code because it's going to be
1:20:04
very similar So we can come in here We have our dropown menu item This one is going to be nested inside of a sign out
1:20:12
button There we go This comes directly from Nex.js So we're going to nest that
1:20:17
directly inside of there Our dropown menu item We don't need to worry about this We don't need a link anymore I'm just going to use our log out icon And
1:20:24
again we're going to say the text log out There we go Give that a quick save And you can see that that works just fine And when I click on this it's
1:20:30
actually going to log me out Now right now we're hard coding what our user information inside of here is which is why this is still showing up We'll fix
1:20:36
that in a little bit Let's log back in as our user We'll use the GitHub user real quick And there we go Now you can see we have our content showing up on
1:20:42
the screen Now I do want to change this slightly by making this signed out button my own custom signed out button
1:20:48
component So what we can do inside of our services inside of our clerk components we can just say that we want
1:20:53
to have some off buttons.tsx And this is where we're going to create all of our different buttons I'm going to copy over the code for this because
1:20:59
it's relatively straightforward and the same for each individual button We'll look at the sign out one cuz that's what we're using Essentially all we're doing
1:21:04
is we're taking the clerk version of the sign out button As you can see that button that we've already used We're just wrapping that inside of our
1:21:10
children And by default we're setting the children to a button that says sign out Now in our case this doesn't really help us because we're not using a button
1:21:17
But in most of our application whenever we use the sign-in button the sign up button or the actual sign out button
1:21:22
we're going to be just rendering a single button So this just makes our code a little bit easier to work with since we don't need to wrap our own custom button This handles the wrapping
1:21:29
of the button for us Now in our particular case it doesn't help us a ton Let's make sure that we actually use
1:21:34
this properly So our sign out button we need to make sure instead of importing it from clerk we can come in here and we
1:21:40
can import it from our custom component And like I said it doesn't really help us in this case but in other cases where we're using our sign out button it'll
1:21:46
help us a ton Now the last thing is to get this open user profile function And this again can come from a clerk So we
1:21:52
can say open user profile equals use clerk And this is the use clerk hook And
1:21:58
now when I click on this profile button you can see it opens up my user profile for all my editing that I want to do directly inside of clerk Now there was
1:22:04
one minor bug that you may have noticed especially on the mobile screen If we open up our profile again and we try to
1:22:09
close it it closes our sidebar before it actually closes our modal So what we want to do is we want to make sure that we set up a section here for is mobile
1:22:18
and set open And we're going to get that from use sidebar So whenever we open up our profile we also want to set the open
1:22:25
to false So I'm going to come in here I'm going to open our profile and I'm going to set the open on this to false
1:22:31
So that way we close our modal every single time we open up this new modal So now you can see if I click on profile it
1:22:36
actually should have closed our sidebar but it looks like it didn't close our sidebar I may just need to refresh my page to make sure this takes into
1:22:42
account these new changes So let's go ahead and see if that was the issue I can open up my profile And you can see it still didn't look like it closed it
1:22:48
I'm going to try just restarting my server real quick to see if that fixes the potential error because sometimes especially in the Canary version of
1:22:53
Nex.js you just need to restart things to make things work properly So we'll give that a quick refresh Open this up
1:22:59
We're going to open this up and we're going to say profile here And we can see that when we click it's still not
1:23:04
closing as we expect it to Now the reason for this was entirely my bad I forgot that inside of Shad CN they track
1:23:09
the open state for mobile and non-mobile separately which actually is way easier for us cuz we only want to close this on
1:23:14
the mobile So we can set open on the mobile state to false Now this should work If we click on profile you can see
1:23:20
it closed that for us And now we can interact with this properly which is exactly what we want Now if we want to stick with the trend of extracting out
1:23:26
everything that we're using for clerk so we don't import clerk anywhere except for in that service folder we could extract this hook out But in our
1:23:32
particular case I don't really see a benefit in doing that So we'll just leave that in as is Now let's get rid of some of these imports that we don't need
1:23:38
And that's going to be essentially our sidebar button done Other than the fact that when we're logged out we need to make sure we don't show this And we also
1:23:44
need to make sure we get our user information from our database because right now it's all hard-coded So the first problem is actually a really easy
1:23:49
one to solve We can go back into our page here and we essentially just want to wrap our entire footer in the
1:23:55
signedin component So we can say signed in just like that Make sure we wrap the entire footer inside of that And now
1:24:01
this will only show up if we are currently signed in So let's test that out We'll click login and we'll log in with GitHub again And you'll notice
1:24:08
immediately if I open this up you can see that that section is showing up While when I was logged out it was not showing up Now the next step is going to
Inngest setup
1:24:14
be hooking everything up to our database so that all of our clerk users are inside of our user database in our
1:24:19
actual table so we can use it for everything And that's going to be quite a bit more involved And the main way we're going to be doing this is going to
1:24:25
be using web hooks inside of Clerk So if we go into Clerk and we scroll down quite a ways we'll see this section called web hooks We can click on this
1:24:31
and this is where we can configure all of our web hooks for our application So we're going to be adding an endpoint for our application and we have the option
1:24:37
to do it with a web hook or in our case we're actually going to be using ingest for hooking up all of our web hooks And the nice thing is it's really easy to
1:24:44
integrate with Cook because they essentially have a oneb button install process for doing this which is really handy And inest is really great for
1:24:49
running these long running background jobs handling web hooks cuz it's essentially a job queue that does all of our retry logic for you And in nextJS
1:24:56
running background jobs is really difficult So inest makes that super easy especially when we start dealing with things like AI and email sending that
1:25:02
happen on like a chron schedule or in the background you'll see the real power of ingest So we could connect to ingest
1:25:08
like this by you know doing the login and everything but I'm just going to add my Inest web hook URL manually just so
1:25:13
we can make sure we hook up to the correct process Now to get started with Inest we first want to sign up and create an account So what we can do on
1:25:20
their page we can just click this assign up button It'll bring us over to a page to be able to sign in I already have an organization but I'm going to create a
1:25:25
new one so that we can start from scratch together So I'm going to create this and it's just going to be called WDS test Doesn't really matter what this
1:25:31
organization is And we can invite some people if we want I don't want to worry about that This will just give us a blank place to start with So you can see
1:25:37
all the steps of creating our very own application inside of ingest Now in our case we want to be handling web hooks
1:25:43
but this is in our production environment as you can see So we're actually going to create a custom environment specifically for development
1:25:48
So we're going to create an environment We're just going to call this dev We'll create that environment And now we can swap over to our dev environment And we
1:25:55
can configure the web hook specifically for development That way we can keep our development and our production environment completely separate from one
1:26:01
another So let's go ahead We're going to create a web hook We can just call this clerk And we don't need to give it any other information We'll just leave it at
1:26:06
clerk And this is all the information for our web hook Now the way that this works inside of ingest is we have this
1:26:12
URL at the top This is the URL that we're going to be using inside of here So we can add our ingest URL just like that We can paste that in and that's
1:26:18
going to work just fine Also like I said we can click this button to connect directly with Clerk if we want to do that as well and it'll give us a web
1:26:25
hook just like that But again I want to just make sure that we do this manually so you can see the full process of doing it The next step is to make sure we
1:26:31
subscribe to specific events For some reason the events aren't showing up in here but we'll fix that in a little bit And then we have some transformation
1:26:36
code Again not something that we need to worry about Really what we want to do is we just want to click create once we paste in that URL that we just created
1:26:42
So we can give that a quick second to click create And now we can see that we have that web hook right here And to be able to set it up for all the subscribed
1:26:49
events that we care about we care about anytime we create update or delete an organization We also care about anytime
1:26:54
that organization memberships are created or updated So you can see created and deleted Actually we don't care about update And then finally for
1:27:01
the user we want to get all the events from when a user was created deleted or updated So those are all the events that we care about listening for We'll give
1:27:07
that a quick save And now you can see we have all those events as our subscribed events Now what this essentially is going to do by hooking this up with
1:27:13
ingest is anytime we get a web hook for creating a user updating a user and so on It's going to take that data and it's
1:27:18
going to send it to ingest and it's going to run this transform function right here to transform the data from
1:27:23
the clerk way of doing things to the ingest way of doing things Let's maximize the amount of space that we have And you can see down here we
1:27:30
essentially have I'll make this full screen It's a little easier to see We have our web hook payload right here which is what's being sent in And we
1:27:36
have our event payload right here Now in order to more easily test this what we can do is we can actually take a sample
1:27:41
web hook This is essentially the user created web hook That's just a sample from clerk And we can paste that directly inside of here to see what the
1:27:47
output is going to look like on our end So we can really easily see how we're transforming this data And generally the recommendation inside of ingest is when
1:27:54
you're naming your web hook you want to prefix the name with whatever the provider is in our case clerk followed by the slash followed by whatever the
1:28:01
actual name of the raw web hook is going to be So in our case what we can do is we can get clerk as our starting name
1:28:07
and then instead of saying web hook received or request received I want to actually make this my event name So we
1:28:12
either want to get the event type the event name or the event.event type or if
1:28:20
none of those are actually val valid we'll just change this to web hook received So essentially what this is
1:28:26
doing is it's parsing the clerk web hook in any way possible to make sure it gives us the name property based on what
1:28:32
the hook is And if you can see over here our name is now clerk/ user.created So it's essentially extracting out that
1:28:38
event type data from our data payload in here Somewhere in here that event type is going to be in here And that's
1:28:43
essentially what it's taking and using You can see right here there's that type property It's using that for our particular data Next we have our actual
1:28:50
event data that's going to be put inside this data section So you can see inside data we have all of our different data directly raw from the actual event
1:28:57
itself And in my case I want to actually modify this slightly So first of all I want to get my data which is going to be
1:29:03
in my event.data That's not going to change anything That's essentially exactly the same as what we had before But I also want to pass along some
1:29:09
additional information So first of all if I don't have any event data I'm just going to pass along the event itself because that means that essentially the
1:29:14
event is the data itself It means there's no data property Again just some extras fallback safety measures Then I
1:29:20
want to take my headers and my raw property which are automatically passed in by the ingest server And what this
1:29:26
will allow me to do is actually validate that I have the correct web hook and it's coming from clerk properly because the way clerk works is they use the
1:29:33
headers and this raw field to be able to do some verification on signing just to make sure you have a valid web hook So
1:29:38
that's just for clerk purposes But essentially all I've done inside of here is I've taken my web hook data and I've passed it along and prefix the name with
1:29:44
clerk That way I can use this inside of my actual server to run these ingest events when they come in So this is
1:29:50
fully creating our web hook We'll click the create button right here Actually we already have an event created but I want to save this So we'll save this change
1:29:56
right here And now all these changes are saved for my actual web hook And if we go ahead and we look at the actual payload you can see in the payload we
1:30:02
have our data we have our headers and we have our raw property So those are the three things that I care about inside of my actual code Now we will be coming
1:30:09
back and making changes to this ingest cloud So instead I'm just going to keep it off to the side And I want to look at the actual documentation for getting
1:30:15
started with Nex.js So we can work on getting ingest integrated into our application which will allow us to actually consume those web hooks with
1:30:21
proper retry logic and everything else that comes with ingest Honestly it's a tool that I was blown away when I was trying it out It's really really
1:30:27
powerful for a lot of different things So to install ingest we can just run the npm install command We'll make this a
1:30:32
little bit larger so it's easier to work with We don't need this open anymore There we go So we're going to run that command to install ingest And then to
1:30:38
run the dev server you can just run inest cl at latest and we're going to call the dev command on that And that'll start up a dev server for us at
1:30:44
localhost8288 Now in our particular case I'm going to modify this slightly by using this
1:30:50
inside of our package json So let's make sure we add in the force property here
1:30:56
There we go That'll make sure that that should work properly And now what we can do is we can come into our package json
1:31:02
And I essentially want to set up a section for ingest just like that And it's going to call that ingest cli dev
1:31:11
There we go I just need to make sure I install that as a dependency So npmi as a dev dependency Ingest cli at latest
1:31:19
There we go That's going to install the latest version of this library Again make sure we force that And that should
1:31:25
work fine Now when we run that ingest command it should open up a terminal for us on localhost 8288 So let's say npm
1:31:33
Let me make sure I actually need to close this And then I need to reopen that just because I forgot to save it
1:31:40
Paste that in there There we go So now let's say npm run ingest
1:31:46
And you can see inest cli is not recognized That's because I spelled it wrong It should have two ends instead of
1:31:51
one Now if we run that command you can see that it's working And right here I could open that up And you can now see that I have the dev server of ingest
1:31:57
running And this is how I actually integrate with everything I can see all the different functions that are being run and so on Right now it has no
1:32:03
detected functions and there's no application being synced right now So that's something that we need to work on in a little bit but we'll get there It's
1:32:09
throughout these steps that it's going to be going through for us to work on our code Now the first thing we can do to help with our application is to
1:32:14
specify where our development environment is running You don't have to do this but this makes it a little bit easier So in our case we're going to be
1:32:20
running on localhost 3000/api/ingest That's where we're going to be running
1:32:25
our ingest server for all of our code that's coming into our application So we need to make sure we create subsection
1:32:30
for that So we'll create a folder called API And inside of here we'll create one called ingest And then we need to create
1:32:36
a new file called route.ts And I'm just kind of jumping ahead a little bit This is inside the documentation But before
1:32:41
we get to that point let's create our ingest client And I'm going to do that in the services folder again So we have
1:32:46
ingest And inside here I want to create my client And let's make sure that's a TS file There we go And I'm pretty much
1:32:52
just going to copy this code paste it in and we can leave out that section And what I want to do specifically inside here is call this whatever we want We'll
1:32:59
call it job board There we go And let's just put WDS at the end Now that we have our client created we can move down to
1:33:04
this section which is where we create our route And that's the file that I already created up here So we can paste in this code And essentially all this
1:33:09
code is doing if we make sure that we import our actual injust client There we go You can see we're importing our
1:33:14
client injust to be able to server it on this particular route And then this is where we put our functions which we'll get to in just a little bit That's kind
1:33:20
of the meat of how all of works But now if we go back to our ingest dev server and we just let me restart our server So
1:33:27
we're going to restart this because we changed the configurations for our actual server You can now see it says the ingest server can't find your
1:33:32
application And that's purely because we don't actually have anything running right now So let's run our application
1:33:38
We'll say npm rundev There we go And once that's running we should hopefully see that this is able to sync up
1:33:44
properly with our application It'll just take a second for our dev server to start running inside of Nex.js But once it does we'll see here that it'll say we
1:33:50
have no functions and that we're properly connected And then we can go ahead and actually start creating functions And inside of ingest functions
1:33:55
are essentially just little pieces of code that run as jobs If they fail they retry We can delay them for later It
1:34:01
allows us to create essentially long running jobs in the background which is really really great Now you are noticing we're getting an error We're getting a
1:34:06
404 when we're trying to access that page The reason for that is because inside of our middleware for clerk we don't have our API set to be public So
1:34:13
let's make our API public We'll say / API And then we want to say that anything that comes after that is going
1:34:19
to be a publicly available file So now hopefully that should properly hook up for our site because it's now publicly
1:34:25
available And as you can see immediately it says error no functions registered within your app So it's able to find our app We just don't have any functions yet
1:34:31
which is fine because we haven't created any functions in our application If we look at the documentation essentially that's the next step about writing your
1:34:36
functions and defining your functions And kind of the whole idea behind these functions to break it down for you is the ID is like a unique identifier for
1:34:43
your function Doesn't really matter too much but the important part here is the event The way that injest works is entirely event based You can kind of
1:34:49
think about like JavaScript on the DOM you have like a click event listener on a button It's the same thing with ingest You create different events that you
1:34:55
want to listen for For example this hello world listens for the event test/hello world Anytime that event gets
1:35:00
triggered anywhere in your entire application it's going to run the code inside of here It's going to have retry logic and everything built in It's great
1:35:06
for longunning tasks AI anything like that Super super useful for those types of tasks And it's going to make sure
1:35:11
it's fault tolerant and everything So that's all the event based stuff And the nice thing is if you have multiple different functions that all run on the
1:35:17
same event they'll all work just fine very similar to JavaScript events It's more of a pub sub type of system So
Clerk user webhooks
1:35:23
let's go ahead and set up our very first event which is going to be for dealing with these clerk web hooks because we want to handle all the different clerk
1:35:28
web hooks Specifically in our case we care most about the user related event web hooks at this time So inside of
1:35:34
ingest we can create a new folder for all of our different functions And then inside of this folder I want to create a file for clerk And this is going to be
1:35:40
for handling all of our clerk related functions Now you can name these functions or put them wherever you want I just found that this type of
1:35:46
organization system worked relatively well for me Now to create a function we just set it to a variable So we can say clerk create user We'll call that
1:35:54
ingest.create function Let me make sure we import ingest There we go We want to create a
1:35:59
function And this create function again is going to take two main parameters The first parameter is going to be all the configuration for our function So we
1:36:05
need to give it a unique name We'll call this clerk/create db user Kind of describes what the thing
1:36:11
is doing We can also give it a more human readable name which I like to do so it's easy to see in my dashboard We can call this clerk create db user So
1:36:19
this is the function that is going to create a database user for us Now the second parameter is for defining what
1:36:24
event we want to trigger on So in our case we want to trigger on the event of clerk/
1:36:30
user.created because that's how we set up our web hook If you remember when we were back inside of here if I expand
1:36:36
this you can see clerk/ user.created That's the name of the event that's going to be triggered from our web hook
1:36:42
So that's the name of the event that we want to listen to So now anytime that that event gets triggered it's going to
1:36:47
run the code directly inside of here And all we need to do is just take this and pass it along the function we want to run So we can come in here with an
1:36:53
asynchronous function And there we go Make sure I turn that into an arrow And
1:36:58
this is going to be all the code that we're going to be running And this specifically is going to take in all of our event parameters That again if we
1:37:04
look over here is all the content over here That's what our event is going to contain inside of it And it's also going to take along this step parameter And
1:37:10
the step parameter is kind of interesting and it's how all the magic of injust works I'll explain it as we get to the different sections that need
1:37:16
it But one thing you'll notice immediately is that currently I don't have any type safety on my code And I
1:37:21
really love TypeScript You know that So I want to add type safety into my code with with ingest is actually really easy
1:37:27
We just need to go back to our client and specify our schema So to do this all we need to do is create a type We'll call this events Doesn't matter what it
1:37:33
is And it's going to be a type that has keys For example clerk/ user.created
1:37:38
And then it's going to have an object that is going to return all the different data that I care about For now we'll just leave it as an empty object We'll come back for it in a little bit
1:37:45
Now to hook that up with ingest here where we have our ID we can paste in our schemas And our schemas is going to use
1:37:51
a new event schema just like this We want to call from record and pass it in the type right here There we go So now
1:37:59
that's actually going to hook up properly with So now we will have type safety based on whatever we type into
1:38:04
this particular section Now since all my clerk web hooks are going to be very similar I'm going to create a type called clerk web hook data it's going to
1:38:12
take in a generic type of t And this is going to return to me a data object And this data object has data which is of
1:38:17
type t It's going to have raw which is a string And it's going to have headers which is a record which is a string
1:38:24
string And if we look at our code that's essentially what we're passing into here Our raw is a string Headers is again an
1:38:30
object that contains headers And then our data is just whatever this data property is right here So that's kind of
1:38:35
what our clerk web hook looks like and I want to use that everywhere inside of my application So we'll say clerk web hook data and for this one we're going to use
1:38:42
the user JSON type and that comes from clerk because we know that when we create a user they pass along the user
1:38:47
JSON type So that's going to give us all of our type safety information We can even do the same thing for updated for
1:38:53
example And in our case of deleted we can do the exact same thing but deleted is a little
1:38:58
bit different It's going to use the deleted object JSON again coming directly from clerk So now let's go
1:39:03
ahead and actually implement this web hook If we go back into here the nice thing is we have full type safety If I come in here and try to autocomplete my
1:39:10
event you can see it's giving me all the events that we have defined Also my event inside my data you can see that
1:39:15
all of my properties are being defined properly inside of here So the very first thing that we want to do is we want to verify that our web hook is the
1:39:22
correct web hook This is something that directly comes from the clerk library and they have some documentation on what
1:39:27
we need to do But we're going to create a separate function called verify web hook And this is going to take in our
1:39:34
raw data and our headers which we know the types for those Our raw is a string
1:39:40
and headers is a record of strings Just like that There we go And what we want
1:39:46
to do is we want to verify that this is the correct information To do this is actually really easy inside of clerk They have a simple function you can
1:39:52
return new web hook Just like that And this actually is going to be need to install a separate library So let me get
1:39:58
to that So this library we need to install we'll just create a new terminal for this npm svix
1:40:04
and make sure we force that And this svix library is just the library behind the scenes that Clerk uses for verifying
1:40:10
all of its web hook related information So we're going to be getting all that information here We need to pass along
1:40:16
an environment variable We'll get to that in a little bit And then we can call verify And verify just takes in our
1:40:21
raw data as well as our headers and verifies it's what we expect So let's make sure we import web hook I'll need
1:40:26
to do it manually it looks like and that's coming from svix There we go
1:40:32
And inside of here we just need to pass along our secret key that we get from clerk So we can say env.clerk
1:40:38
web hook secret There we go And let's make sure that we import this variable
1:40:44
that's going to be from our server And then we can go ahead and define that So we can say clerk web hook secret is
1:40:50
going to be a string with a minimum value of one There we go Now let's go into our environment variables and
1:40:55
define that as well So in here clerk web hook secret To be able to get that web hook secret all we do is we go to our
1:41:01
clerk dashboard scroll down sign in secret right here We can just expose that copy that over and now inside of
1:41:08
here we can paste that down And we are now able to verify that all of our different web hooks work properly So let's go back into ingest and into that
1:41:15
specific function So the very first thing that I want to do is I want to verify my web hook just like this Now to
1:41:20
be able to verify this we just need to pass in our event.data data that contains our headers and our raw data And this will throw an error if our web
1:41:27
hook doesn't work Otherwise if our web hook is valid it'll just continue on So essentially it's a nice little sanity
1:41:32
check But inside of ingest the best way to handle different steps of your application are by using steps And the
1:41:38
nice thing about steps is that they run in sequence and they're able to be run So like for example if this step
1:41:44
succeeds and then the next step in my thing fails the next time that I retry my event it'll start with the step that
1:41:50
failed instead of starting at the very top of my function So steps allow you to create pieces of your application that
1:41:55
if one of them fails when it retries it starts from the point where it failed instead of starting at the very beginning So this is going to be my very
1:42:01
first step And to do a step all you do is just call step.run And then you pass it in the name of the step It doesn't
1:42:06
really matter what this is This is mostly just for your own visual use when you're looking at the dashboard So we'll
1:42:12
call this verify web hook We'll make this an asynchronous function There we go And we're going to call verify web
1:42:19
hook directly inside of here And we're just going to await this to make sure it finishes running properly Now if this throws an error it'll retry this step
1:42:25
over and over again until it reaches the maximum amount of retries which is really great when you want to retry something if it failed Now in our
1:42:32
particular case if this verify web hook fails it means that our application will never succeed because for some reason we
1:42:38
have an invalid web hook So in our case I'm going to wrap this in a try catch
1:42:45
just like this I'm going to put my verify web hook directly inside of here And inside my catch I actually want to
1:42:50
throw a special error And this is going to be a new non retryable error just like this And we'll say invalid web hook
1:42:58
Now this non-retable error essentially is a fancy little function inside of ingest that tells you hey this failed
1:43:05
It's impossible for it to ever succeed So don't bother wasting time retrying this event because it's never going to
1:43:10
succeed So now we essentially hooked up an event that verifies our web hook is correct If this step succeeds we can
1:43:15
move on to the next step which is going to be creating our user in the database So let's create a brand new step We'll
1:43:20
call this step.r run We'll call this create user And this is going to be an asynchronous function just like this And
1:43:26
inside here is where we're going to do all of our code for creating our user So first I want to get my user data
1:43:32
which is just going to be eventdata data Then the next thing that I want to do is I want to get my email from that So we
1:43:38
can take our user data email addresses And what I want to do is I want to find whatever their primary email is So I can
1:43:45
say email ID is equal to the user data.primary email address ID So if this
1:43:51
is correct we should hopefully find their primary email Now if email is null this is again
1:43:58
another error that we cannot come back from because inside of our web hook they just didn't give us valid information
1:44:03
There's no primary email address that we can use So I'm going to do the exact same thing I'm going to throw a non-retable error that says no primary
1:44:10
email address found Often times we don't have to worry about throwing these non-retable errors but in this particular case it makes sense to do
1:44:16
them Now the next thing to do is actually insert our user into the database So we'll just create a function
1:44:21
for that called insert user And this function will take in all of our different information for our user We'll
1:44:27
come back and create that function in just a little bit but for now we'll just kind of leave it blank with an empty object And finally what we want to do is
1:44:32
we want to return our user data ID so that we can use this wherever else in other sections of our application And up
1:44:39
here we can get that data directly from it So we can say user ID There we go This is really useful for creating
1:44:45
different things in our application if we want to use that user ID which we will Now before we get further along
1:44:50
though we should probably create a function for inserting our user into the database So inside of our features folder we have our user section I'm
1:44:56
going to create a new folder called DB for handling all of our database stuff I'm going to create a file called users.ts for handling all of our user
1:45:02
database stuff Now inside of here I want to export an async function insert user
1:45:09
And this is going to be a user And this is specifically going to come from our user table data And we want to get the
1:45:14
infer select So essentially what I'm doing or actually I don't want infer select I want infer insert There we go
1:45:20
So I'm just saying hey whatever my user table accepts as an insert is what this user type is going to be As you can see
1:45:25
it gives me all the information for my user Then what I can do is I can call await db.insert
1:45:31
I can insert into that user table and I can pass along the values that we want to insert which is just these values we
1:45:36
passed along up here Then what I want to do is since a web hook could be sent to our application multiple times It's very
1:45:42
unlikely but it could be possible that our web hook gets sent multiple times to create a user If that happens I just
1:45:48
want to make sure that we update the user instead of inserting and throwing an error So if we have a conflict when
1:45:53
we try to do something I'm going to do an update instead So I say you know what if we have a conflict on the user table
1:45:59
ID so essentially if we try to insert a user and we already have a user with that ID instead I just want to set all
1:46:04
my user data to whatever data I pass in So really what this allows me to do is to do something called an upsert it'll
1:46:10
do an insert if there's no user or if there is a user it'll do an update instead And again this is just to handle the case where multiple web hooks could
1:46:17
be sent to our application for the exact same user It's unlikely but it could happen So this right here will insert a
1:46:22
brand new user into our database for us So now let's go back to where we're implementing that and pass in the information we need As you can see it's
1:46:28
going to load up a bunch of information that we need First we need to import the function though so we can get that autocomplete So let's do our ID which is
1:46:34
our user data ID Next we're going to have our name And this is going to be essentially a combination of our first
1:46:39
and last name So we'll say user data.irstame And we want to get our user data.last
1:46:46
Whoops Last name There we go Next up we need to get our image URL which is just user data image URL Then we need to get
1:46:54
our email which we already know is going to be our email but this is actually a property that has some things on it So we want to get the email address
1:47:00
specifically from that Our created at field is going to be a new date using the user data created at And we want to
1:47:07
do the exact same thing with updated at and updated at There we go So that's
1:47:13
going to get all the information for our user insert it into our database and then we're going to return the ID of the user we just created And if for some
1:47:19
reason this particular section fails ingest will wait a while and then retry to hopefully fix it For example if our
1:47:24
database is down or offline or something this will make sure we have that resiliency to still add our user to the
1:47:30
database even if for some reason our database is down Now before we test this I do want to do one last step and that's for creating some user notification
1:47:36
settings because by default when we create a user we should probably create some default settings for them as well So let's come down and create a brand
1:47:42
new step So we'll say step.run This is going to be called create
1:47:48
user notification settings Make sure I spell that properly There we go And this is
1:47:54
going to be pretty similar to what we did up here I'll kind of copy quite a bit of this code There we go And inside
1:47:59
of here I just want to call insert user notification settings I'm going to pass it along the
1:48:06
user ID that I want to create this for There we go Notification settings And let's create a brand new file for that
1:48:11
So what we're going to do is we're going to go back into our features We have database I'm going to copy this over for user notification
1:48:18
settings Make sure I spell that properly There we go And now I want to insert my user notification settings Just like
1:48:25
that This is going to come from my user notification setting table
1:48:31
There we go Just like that And this is of course is going to be my settings So we'll pass that in just like that And
1:48:37
get the correct table for all of this Now in our case we're not going to do an update We're just going to do an on conflict do not update So we're going to
1:48:44
say do nothing So essentially if for some reason this web hook gets sent multiple times instead of overwriting their existing settings we're just going
1:48:51
to completely ignore the settings that are there or we're going to completely ignore the new settings and do absolutely nothing Now with that done
1:48:57
that's everything to actually create our user notification settings as well as our user itself And inside of here
1:49:03
instead of doing the on conflict do update we can do the exact same thing where we do on conflict do nothing which is honestly probably the better option
1:49:09
cuz we don't want to overwrite their user information with a possible old or expired web hook So there we go Let's
1:49:14
come into here and import that setting Just like that And that's going to give us a default notification setting where
1:49:19
everything is set to false essentially by default because those are the default values And these are the three steps that we've created So the nice thing is
1:49:25
they're going to run one by one after each other And if one of them fails instead of retrying everything it just starts with the one that failed and
1:49:31
continues onward which is a really nice feature So now before we actually go ahead and implement the rest of our functions let's make sure that this one
1:49:36
is working before we do everything else So I'm going to take that function name I'm going to copy it go into our API and what I want to do is I just want to add
1:49:43
that in as one of our functions So now you can see here we have that as one of our functions We can kind of get rid of these comments We don't really need them
1:49:49
And if we go back into our application and we look at our development environment we should see here give it a couple sections And now we have one
1:49:55
function being found Clerk create db user And if we go into our functions we have that function And the nice thing is we can even invoke this by passing along
1:50:01
our own custom data In our case we don't want to do that though We want to run this when we create a brand new user inside of our application Now I've
1:50:08
already created my user to start with So I'm going to take my user that's already been created I'm going to delete them and recreate them So we make sure that
1:50:14
this web hook runs properly So I'm going to completely delete my existing user They've been deleted And now I want to
1:50:19
come over to my application I want to log in as a new user I'm going to create an account using GitHub just like I did
1:50:24
before So we're going to create that account with GitHub Going to give it a second to load everything Pass in my name
1:50:31
Make sure I spell everything properly Give it a continue And now that should hopefully fire off a web hook and we should be able to see that web hook
1:50:37
working Now before we do that I do notice that there's two quotes down here So let me just search my application for that I accidentally put two of them side
1:50:44
by side somewhere in my code Looks like right here Let's just delete that There we go That removed that So now let's go ahead and actually look to see if a web
1:50:50
hook was sent So inside of our configure tab we can scroll all the way down to web hooks again And we should see if we
1:50:55
click on this web hook that we did have our user created and userdeleted events were sent And they were sent over to
1:51:01
ingest So now if we go to our ingest dev environment and actually instead of going to the dev server we first need to go to the cloud server here under our
1:51:07
dev environment We'll make this a little bit bigger so it's easier to see And what we want to do is we want to specifically go to the section for our
1:51:13
event types This is going to show us all the events that have run As you can see user created and user deleted So we have
1:51:18
a user created event that ran You can see that this ran 1 minute ago And if we click on this event it'll give us all
1:51:23
the different details for that particular event As you can see here here's all the details for this particular user Now to be able to send
1:51:30
this down to our dev environment all we need to do is click send to dev server and it'll send it down to that dev server for us and it'll run in our
1:51:36
development environment This is really great for testing So I click send to dev server And now you can see if we come over here we have a stream right here It
1:51:42
streamed down that one particular event And if we go to runs you can see all the functions that ran associated to that
1:51:47
event So this event was triggered and it ran this one particular function And you can see each of the steps as well as all
1:51:53
the different data that was returned for each of these different steps So it looks like everything was successful So we should see that we now have a user
1:51:59
inside of our database And if we go over to Drizzle inside of our studio which we probably need to hook up So let's just
1:52:04
come in here We'll say npm run db studio
1:52:10
There we go Give that a second to run and we can pull that up We don't even need this drizzle tab open anymore cuz
1:52:15
we're not really using it Same thing here with this clerk one Let's open up this and we should hopefully see we have a user and a notification setting And we
1:52:21
do You can see we have user Kyle Cook and we have notification settings for them where everything is defaulted to false Now the next step we can work on
1:52:27
is to implement the update and delete versions of these functions so we can get those to work just as well So we can come back into our application We'll
1:52:33
minimize everything down We'll go back into our services for ingest and we want to add essentially a clerk create or
1:52:38
clerk update and a clerk delete I'm going to copy in the code here and explain exactly what's going line by line so we can understand it You can see
1:52:45
here we have clerk update user That's just the name We gave it a specific ID and name purely for our internal use And
1:52:50
then we have an event that's going to trigger You can see clerk user updated is what triggers this We verify our web hook just like we did before and then
1:52:56
we're calling update user And inside of our verify web hook we should probably do the same thing here where we wrapped it inside of a try catch So let's come
1:53:03
down here and make sure we wrap all that inside of a try catch to throw that non-retable error Same thing down here
1:53:08
Do the exact same thing Now inside of this update user it's essentially the same thing We get our user data get their email If the email is null then
1:53:15
hey we have some type of error occurring with our user So we throw that error and then we just update our user We update
1:53:20
their name we update their image we update their email and we update that updated ad field We'll create this function in just a second here Now when
1:53:26
we go to delete it it's a little bit different because the data that's actually returned to us is this deleted object JSON data which has an ID that's
1:53:33
returned to us either an ID or null If for some reason it returns to us null then we essentially want to say no ID
1:53:38
found and we'll throw a non-retriable error because it gave us bad data Otherwise we'll delete the user associated with that ID So again very
1:53:45
similar step-by-step process Verify the web hook do something in particular Same thing here Verify the web hook then do
1:53:50
something in particular Now let's go ahead and write the code for updating and deleting our user So we can go into that user DB function I'm just going to
1:53:56
copy this over We're going to say that this is going to be called update user This is going to take an partial version
1:54:01
of this So we'll say type of partial because we can always update less than
1:54:06
the full insertion So we're going to get a partial user that we want to update We want to call update and we want to set
1:54:12
these particular values We don't have to worry about on conflict or anything like that And we just want to make sure that we only update the user for a particular
1:54:17
ID So we're going to take in an ID which is a string and then we're going to get all of our user information which is a
1:54:23
partial user And what we want to do is we want to say where equal user table
1:54:30
ID is equal to that ID Let's make sure we import that equal function just like that And there we go Now we're updating
1:54:36
the user with that particular ID based on the ID that we passed in Finally we can do a delete I'll just copy this down
1:54:42
delete is going to take in just an ID and it's going to delete from the user table where this is an ID that is equal
1:54:49
to that ID So very similar to update but instead of updating we're doing a simple delete So now let's go ahead and import those functions here So we have delete
1:54:55
user import that and update user will import that So now we have all of these different functions working Let's just
1:55:01
make sure we hook them up by coming into our app API with our routes and we'll add in our update and our clerk deleted
1:55:08
user Just like that And let's make sure that we import this There we go So now if we look at our dev
1:55:15
server we should hopefully see that we have functions that are defined for all those It might take a little bit of a second for it to refresh but as you can
1:55:21
see we have our create our delete and our update database user We can invoke them all if we want and we can also hook them up with our actual dev environment
1:55:28
that was running right here to make sure everything is running just like we want it to Now the reason we did all of that code to get our user in our database is
Finish auth buttons
1:55:34
so that we can more easily implement the code inside of our feature button here So if we go to our users sidebar user
1:55:40
now instead of hard coding this data we can actually get this data from our user and we're going to create a custom
1:55:45
function for that called get current user and that's going to return to us our user information Now for this
1:55:52
function we're going to specifically put this inside of our clerk provider here and we're going to create a new folder which is going to be called lib and
1:55:57
inside this lib folder we're going to create a get current off.ts and this is where we're going to have our function
1:56:03
for getting the current user as well as the current organization So let's export an async function called get current
1:56:09
user And this is also going to take a property called all data which by default will be set to false And this is
1:56:15
for example sometimes all we care about is getting the user ID while other times you want to get information like the name and the email So this allows us to
1:56:22
only access the database in the case that we need this extra data So we're first going to get our user ID from
1:56:28
clerk That's by calling await off just like that That's going to give us the user ID of the currently logged in user
1:56:34
then we can return an object that has the user ID as well as our user information So with all data we want to
1:56:40
make sure we have all data and a user ID is not equal to null So if we have all
1:56:45
of our data or we want to get all of our data and the user ID is not equal to null then I'm going to call a function called get user and pass in our user ID
1:56:54
Otherwise we'll just return undefined So we'll create a function called get user just like that
1:57:00
And this will return all of our user information We can get that from our database So we can say return db and we
1:57:06
want to do a simple query on our user table Actually I could just say query do
1:57:12
user table just like that and we want to find the first user where and we want to
1:57:17
get specifically for a user ID There we go So we could say user table ID is
1:57:24
equal to the ID we pass in This is going to give us that particular user information So if we want to get all the data we return true here We can pass it
1:57:31
true If not this will just return undefined and we don't access the database if we don't need it Now in our particular case right here we do want to
1:57:37
get all the data So we'll say all data true And this is going to give us a user property which contains all of the
1:57:42
information we want about our user which is really useful because we can pass that along right here There we go We can
1:57:48
pass it in our user You'll notice that we have a slight difference The type undefined is not a definable here That's
1:57:53
essentially accounting for the fact that user could be undefined because let's say that we sign up for an account but our web hook hasn't registered the user
1:57:59
in our database yet Well user for our database will be null while the user ID will be valid So we want to make sure we
1:58:05
take that into account It's a very small window of time most likely less than a couple hundred milliseconds that they'll have to wait but it is something that
1:58:11
could happen So we're going to come in here with an if user equals null to make sure we take into account what should
1:58:17
happen here by returning something else So for our particular case I'm just going to copy the code over because it's
1:58:22
relatively straightforward I'll import the different things that we're using and I'll explain exactly what's going on inside of here But essentially in the
1:58:29
case that we have these things happening where we have a user that's not in our database but they are in clerk well we
1:58:34
can't show the full information for the user because we don't know that yet So instead what I'm going to do is I'm just going to be returning a simple log out
1:58:40
button for now And then once the user gets populated in the database then it'll show them the full user information So now if we go over to our
1:58:47
application and we just give this a quick refresh you can see all the information has been updated based on my
1:58:53
image URL from GitHub my email address my name all that stuff has been properly updated to the real actual data And if I
1:58:59
come into here and I actually update my profile for example let's say that I change my last name to add some extra data to the end of it I click save That
1:59:05
is going to update my information And once the web hook runs and I refresh my page you'll notice it doesn't actually quite show my data yet And the reason
1:59:11
for that is is because the web hook ran but we never sent it from the cloud down to our dev environment So if we go back
1:59:17
over to our event types you can see here here's the user created event or updated event I'm sorry If I click on this and I
1:59:23
actually send it down to my dev server that will then trigger the update So that's something you need to keep in mind when you're working with ingest is
1:59:28
just to make sure you send your web hooks down to your dev server So now we give this a refresh you can see it properly updated my name Now to show you
1:59:34
what this fallback state looks like I'm going to go through I'm going to log out and I'm going to create a brand new user So I'm just going to sign in with some
1:59:39
bogus email address Actually I probably should make it something I can actually remember We'll do test.com and we'll
1:59:45
enter in some bogus information here We'll enter in a bogus password And then we'll go ahead we'll create that And
1:59:51
since we of course I can't just use password as my password We have to make it something a little bit more secure
1:59:56
There we go And now you can see it's just giving us that logout button because we haven't actually received the web hook yet As soon as I send down the
2:00:03
web hook from here so I go back over to my event types event for the user created give this a refresh so it gets
2:00:08
the brand new event showing up inside of our page There we go We can click on that event and then we can send that
2:00:13
down to our dev server and that'll actually give us the actual information So you can see here it shows the log out button before we receive that web hook
2:00:19
and then as soon as we get the web hook you can now see it shows me all of my user information Now before we get too much further I do want to do one little
Caching system
2:00:25
bit of housekeeping and that's going to be dealing with the caching system inside of our application Right now we're not dealing with caching anything
2:00:32
If you can see here I'm not caching this particular function return But generally in Nex.js it's a good idea to do caching
2:00:37
especially for this dynamic data So to cache things using the new dynamic IO way of doing things We can come in here
2:00:43
and just say use cache just like this And to enable this since we're in an experimental version of our code we need
2:00:49
to go directly down into our next config and we need to enable this as an experimental feature So we can come in
2:00:55
here we can say we want to do dynamic IO and we'll set that to true And that allows us to do that and we'll just need
2:01:00
to restart our dev server to make sure that this takes into account So we'll just give that a quick refresh real quick And now we should hopefully see
2:01:06
that that'll take into account these new changes And if we refresh our page we should see everything over here is working properly And it looks like it is
2:01:12
Now we need to make sure we invalidate our cache at the proper times because right now if we go over to this particular file that had that inside of
2:01:19
it which was right here you can see we're caching it but we're not specifying what type of cache it is how long it lives for any tags that are
2:01:25
associated with that cache So I like to create a system in place that handles all of my caching for me in a really
2:01:30
easy and seamless way So to do that in this lib folder we're going to create a brand new file called data cache.ts And
2:01:36
this is where all of our caching logic is going to go We're going to have a type for all of our different cache tags
2:01:41
We'll say cache tag just like that Make sure I spell that properly And this cache tag is going to be something as
2:01:46
simple as like users if we want to cache the user information or organizations for caching our organization information
2:01:52
I'll copy over all the different tags we're going to be using just like this So we have users organizations job listings notification settings resumes
2:01:59
applications and user settings for organizations Essentially we're just taking this stuff directly from our database and mapping it one to one to a
2:02:05
caching tag Then we're going to export a function for getting all the different tag types that we create So one type of
2:02:12
tag that we're going to use very often is the global tag And this takes in one of our cache tags just like this And
2:02:18
it's just going to return to us a string We'll call it global tag And we'll return that as a constant variable So
2:02:24
when we hover over this you can see these are our different return types based on our cache tags The whole idea behind this global tag is anytime that
2:02:31
we're accessing data for example I want to get all of the job listings on my entire site That is global data Anytime
2:02:38
I update any job listing anytime I add any job listing anytime I delete any job listing I want to refresh that cache
2:02:45
This is a very common type of caching where you want to access all the information and anytime any of it changes you want to refresh Another
2:02:51
really common type of application caching would be if you want to cache based on an ID specifically So this is
2:02:57
going to take in a tag and it's going to take in an ID which is a string and we can pass that in just like this We'll
2:03:03
say ID id dash tag just like that So in this particular case where we have an ID tag
2:03:10
what this is really useful for our user For example we have a specific ID for our user So I'm saying I want to refresh
2:03:16
the cache of this user anytime the user with this specific ID changes If we add another user I don't want to refresh
2:03:22
this cache But as soon as this user is deleted or updated in any way I want to refresh the cache for this particular ID
2:03:29
So that is where this ID style caching comes in And there's other types of caching that we may use For example if
2:03:34
we want to cache something on the organization level or the job listing level but we'll get to those when we need them because right now these are
2:03:40
kind of the main ones we care about And to make my caching system even more robust what I like to do is inside of
2:03:45
each one of my features for my application I like to create a specific section in my database for a cache So
2:03:51
we'll come in here with cache and we want to create a cache for our users.ts And this is going to return to me all the functions for creating different
2:03:57
cache entities for this So for example I can create a user global tag cache and
2:04:03
that's just going to return get global tag and it's going to be for users just like that And I can do the exact same
2:04:09
thing to create an ID version So I can say get user ID tag And this is going to
2:04:14
be getting an ID tag There we go Which is going to be my user as well as my ID
2:04:21
So if we pass in an ID for a user it's going to give me the proper tag for that And the thing that pulls everything together is this function called
2:04:27
revalidate user cache And it's going to take in all the data it needs to revalidate In our
2:04:33
case just an ID And it's going to call essentially revalidate tag which is built into Nex.js When you call this it
2:04:39
revalidates all caches that are tagged with a specific tag And we're going to pass it in our user global tag And we're
2:04:46
going to pass it in our user ID tag with our ID as well There we go So now
2:04:52
anytime that we change our data for a user update a user delete a user we're going to call this function and it's
2:04:58
going to update all the caches associated with our user whether it's a specific user cache or a global user
2:05:04
cache So let's show you this in action I'm going to use this get user ID inside of here So I can come in here I can add
2:05:09
a cache tag which is a function built in XJS to say hey this function is cached with this tag and I want to get my user
2:05:16
ID tag I want to pass it in the ID So I'm saying get the tag for this specific user Then whenever I update that user
2:05:23
it's going to refresh this particular cache Now to make sure I refresh my user properly anytime I change data in my
2:05:29
database I want to call revalidate user cache and pass in my user's ID property
2:05:34
Same thing here Do the exact same thing Pass in the ID that I'm going to be revalidating And same thing in here Pass
2:05:41
in the user ID for what I'm revalidating Now anytime I delete update or add a user it's going to revalidate all the
2:05:47
caches associated with that user as well as the global user cache and any other caches that I put inside of this
2:05:53
particular function And the really great thing about doing it this way is when we go back into our get off function let's
2:05:58
just find that function real quick inside of clerk There we go Whenever I try to access my user information the
2:06:04
first time I access it there's no cache So it's going to have to get the data But then as long as my user ID doesn't
2:06:09
change or my user data I'm sorry doesn't change it'll always get the cache version which means it returns the data
2:06:14
to me pretty much instantly which is exactly what I want for an application like this And to make sure that everything is working just fine let's go
2:06:20
ahead and look at our application You can see it's returning my user Let's log out and log in as a different user to make sure it pulls that new data when I
2:06:27
log in with a new user ID And you can see that it's pulling in that correct new information And now let's go ahead
2:06:32
and we'll update our profile We're going to come in here I'll reset my last name to what it actually should be We'll close out of that And then I'll make
2:06:39
sure that I send that down to us So we'll go into our cloud here Go back to the different event types Find the one
2:06:44
for updating our user Make sure that we get the most recent one right here And we'll send that down to our dev server And we should hopefully see that this
2:06:51
data will update as soon as we refresh our page So we'll come over to where we were Send that down to the dev server
2:06:56
And now when I refresh you can see it properly updated which means when my cache data changed it revalidated my
2:07:01
cache So it got the most up-to-date data And now every time I refresh this it's not calling that function again because
2:07:06
it has the correct data already in the cache Now we're going to want to do the same thing with our user notification settings as well because we did it for
2:07:13
our users So let's go ahead and do it for our user notification settings I just copied over the file It's almost
2:07:18
identical We pass in the global tag We have an ID tag And for our user notification settings the ID is just the
2:07:24
user ID because it's a one to one relationship And then when we call revalidate we're revalidating everything And we want to make sure inside of our
2:07:30
database function that we call that revalidate function And we want to make sure we pass in our setting do user ID
2:07:37
Just like that Make sure we import that And now that's going to make sure our cache for our user settings is also
2:07:42
revalidated properly This is probably one of my favorite things about the new way of caching in X.js JS is it makes it
2:07:47
really easy to create these robust caching systems that are really performant while also being relatively easy to use because that's kind of the
2:07:52
trade-off a lot of times with caching So now at this point we have most of our kind of boilerplate background code done
2:07:58
which is great because now that we've done all this upfront work implementing new features is actually going to be relatively quick and you'll notice that
2:08:04
the second half of this tutorial or the later half of this tutorial new features are going to be added incredibly quickly compared to this first half where I mean
2:08:10
literally we've created a sidebar which is not very impressive for the amount of time this has been going on Now for us I want to work on the employer dashboard
Finish sidebar
2:08:16
before I start working on the side for the actual job listings because we can't really show a list of job listings until
2:08:22
we have the ability to create different job listings So let's kind of minimize and close all the stuff that we have And inside of our app I'm going to create
2:08:28
two new folders The first one is going to be employer That's where all of our employee side or employer side and
2:08:33
organization side of things is going to go Then we're going to create a new folder called jobseker And this is for
2:08:38
essentially all of the code that's going to be for the jobseker side of things because we almost have two different applications One for the employers and
2:08:45
one for the people looking for jobs Now the reason I put job seeker in parenthesis is because I want this to be a route grouping I don't actually want
2:08:51
it to change the URL of my route I just wanted to change what different grouping I have inside my application for things
2:08:56
like shared layouts and so on So now I kind of have these two different sections of my application that I want to work on And both of them are going to
2:09:03
have their own layout.tsx file For now we'll just say export default
2:09:09
function job seeker layout And of course
2:09:14
we're just going to return the children that are returned from this function So we know that the children property is
2:09:20
a React node There we go So now essentially it's just going to return our basic children And we can put our
2:09:26
page or whatever we want directly inside of that section And same thing with employer here We want to have a layout that's essentially going to be the same
2:09:32
thing We'll call this employer layout Just like that Now to make this a little bit easier to work with they're both
2:09:37
going to have sidebars but they're going to be having a few differences between these sidebars So I'm going to create a shared component for them I'll put them
2:09:43
inside this sidebar section We'll move our client sidebar into here That's this section right here And I'm also going to
2:09:49
create another file called app sidebar Just like that tsx And this is going to
2:09:54
be where all of our shared sidebar code goes So I'm going to take what we have currently inside this page I'm going to essentially copy all of this code and
2:10:00
we're going to put it into here Export function app sidebar And we're just going to take all the
2:10:06
code that we have for our sidebar and put it into here And I'm even going to copy over the imports because essentially these are the imports that
2:10:12
we're going to need So I might as well copy them so we don't have to manually import all of them There we go Now let me make sure that I get all my imports
2:10:18
proper So this app client needs to be imported from the correct location There we go That works fine And now I
2:10:23
essentially want to take all the stuff that is going to be shared between my pages and keep it And the stuff that's going to be different I want to put
2:10:28
inside of its own section So for example this sidebar group in the middle here this is going to be different for each application It's whether the employer
2:10:35
side or the employee side it's very different So we're going to put some type of label called content where we put all of our sidebar content And we'll
2:10:41
pass that in up here just like that And content will just be a React node There we go The next section that we have
2:10:47
differences is down here for our user button versus organization button If we're on the user page we look at user
2:10:53
button If we're on the employer side we should have a your organization button here So this is going to be for our
2:10:58
footer button just like that And again we're going to pass that in as a prop
2:11:05
that is going to be a React node There we go Make sure I get rid of some of this stuff that we don't need Essentially just imports that are no
2:11:11
longer needed now that we've removed a lot of these different things And then finally we have the section down here which is just our main content which
2:11:17
we're going to call children And we're going to pass that in as the children property There we go And same thing up here
2:11:25
Perfect So now we've got all of our shared content as well as all of the content that differs between our sections So now inside of our page which
2:11:32
we essentially want to make our layout now over here we can just use this exact same code but we can change around what
2:11:37
we're working with So inside this layout we're going to return here This section down here is going to be our children And we're going to make sure instead of
2:11:43
using this sidebar provider this is our app sidebar Just like that And we can get rid of pretty much all of our main
2:11:49
code We just want to return a content section a footer button section and then we want
2:11:55
to return our children Now our children in this case is just this text asf Doesn't really matter super much what that is Let's close off our app sidebar
2:12:02
down here There we go And we know that our content is all of this section right here So
2:12:08
let's just copy that paste that into our content section Our footer button is just this button right here So we'll
2:12:14
paste that into here And all the rest of this content we can completely get rid of minus just this random text that
2:12:19
we'll replace with real code in just a little bit There we go Give that a quick save And now we just need to make sure
2:12:24
we import all these different section components
2:12:31
Get link imported And there we go And our sidebar user
2:12:36
button That should be all the different imports that we need I just want to make sure that I import my version of the
2:12:41
signed out component There we go And the children section is what's going to go into here There we go So now we have
2:12:48
everything inside this layout just like we want it to Let's create a page This page is going to be export default
2:12:56
function This is our homepage The first page that we render on our application Now just return the text high There we
2:13:03
go Now this old page we no longer need We can completely get rid of this And if we give this a save and we hopefully
2:13:08
refresh our page you can see the text high shows up and our sidebar is still exactly the same as it was before because we just kind of swapped things
2:13:14
around The nice thing though is that now I can essentially take this sidebar I can copy it and I can use it on the
2:13:19
employer side as well and all I need to do is add in all these different imports So let's go ahead real quickly go
2:13:26
through import all these different components
2:13:31
Again making sure that we import them all from the correct location And then finally down here Now currently we're
2:13:36
obviously going to change around some of these things because we don't want to show a user button for example on the sidebar but we have at least our overall
2:13:42
layout for the employer side And if we go to that slash employer play page and we make sure first of all we need a page
2:13:48
in here And this page is going to look just like this We'll call this our
2:13:54
employer homepage And this will say hi employer There we go So now if we go to
2:14:00
that employer page we should see exactly the same stuff on the sidebars and everything And it says hi employer Now to make it easier to navigate between my
2:14:07
employer page and my non-emp employer page because right now there's no links or anything that allow me to do that I'm going to create a really handy component
2:14:13
that will make it really easy for us to create a sidebar we'll call this sidebar nav menu group.tsx
2:14:19
And if we look at one of our layouts you'll notice that inside of this we have a sidebar group menu menu item menu
2:14:25
button It's a lot of the same code to create a single link There's a ton of different components that go into it So
2:14:30
essentially I just want to be able to pass an array of where my links go and it's going to automatically create this different component for me So inside of
2:14:36
this sidebar nav menu group we can export a function with that name
2:14:42
It's going to take in some objects and these objects are going to be typed So we're going to have items This is going
2:14:48
to be an array of objects where we have an href which is a string An icon This is going to be a React node for the icon
2:14:54
associated with it A label that's just going to be the text associated with that particular link And then also some
2:15:00
of our icons or our links should only show up if we're signed in or signed out So we'll have an off status of signed
2:15:06
out or it'll be a status of signed in So for example we can show links only if
2:15:12
we're signed in or only if we're signed out Also if I want to specify any class names I can do that as well This is
2:15:18
something I add to pretty much all my components So now we have our items and we have our class name and we can use
2:15:23
that information directly inside of here And we kind of want to mirror this particular syntax So we'll just come in here with a quick return and I want to
2:15:30
import all these different components that we're going to be using Make sure I get my own custom signed out I'm going
2:15:35
to get our sidebar menu Sidebar menu button We want to get our link We don't really care about this component or this
2:15:40
icon because that's going to be different for each one But now we have our ability to render out the exact stuff that we want to render So what we
2:15:46
can do inside of here we have our sidebar group we have our sidebar menu and then I want to loop through each one of our items and I want to turn them
2:15:52
into essentially a component that we can use So inside of here I want to get the HTML portion of my component which is
2:15:59
essentially just going to be this section right here So we'll copy that directly into there We have our item we have our button and then we have our
2:16:05
link that's going to go to a particular href which is just item.href Inside of our link we're going to have
2:16:11
our component as well as our span which is going to say item
2:16:18
And let me make sure that I have all my parentheses and everything proper Looks like I do for the most part We can return our HTML down here That should
2:16:24
hopefully get rid of any errors that we have And actually the reason I'm getting an error is cuz I need to make sure that this is typed as an array And now that
2:16:29
should clean everything up So now the final thing I want to do is I want to render out my item icon Just like that
2:16:34
So this is all the HTML for my particular element exactly as I want it which is great Also for my sidebar menu
2:16:40
button this should say as child Actually it already does say as child but also we want to add this is active prop And this
2:16:46
is going to be if this is the active link we want to render that So we'll say if the path name is equal to item.href
2:16:52
href then it's going to be the active item on our list So what we can do is we can scroll up and we can get that path
2:16:57
name which is just path name is equal to use path name which is a hook that we can import directly just like that So
2:17:04
now we have that path name property So if we're on the current path it'll highlight this as my active link Also
2:17:09
since we're in an array we should wrap this in a key So we'll put the href directly on there Now the reason I'm not returning our HTML directly is because
2:17:16
if our item.au status is equal to signed out for example then what I want to do is I want to wrap this in my signed out
2:17:22
component which we actually have right here So I'll just use that and I'll put the HTML directly inside of that And
2:17:28
again we need to make sure we specify a key on this So we'll say item.href I
2:17:33
essentially want to do the exact same thing for my signedin status but in this case I want it to say signed component
2:17:42
There we go So now I have that properly working So if I'm signed out render wrapped on signed out If I'm signed in
2:17:48
wrap it in the signed in Otherwise return the HTML as is Finally I want to just be able to add my class name So
2:17:53
we'll say class name of class name in case I have any additional class names to pass through And now this allows me
2:17:58
to create a really easy sidebar menu So I can come all the way back to where we have our sidebar being defined We'll do
2:18:03
it in our job seeker section first This whole entire section I can replace with a sidebar nav menu group And inside of
2:18:11
here we're going to specify a class name of margin top auto That'll just push our links all the way to the bottom And then
2:18:17
we need to define all the different items for essentially all the different links that we have possible So the very
2:18:22
first link that I want to have is a link that's just going to bring me back to the job board So we'll just have that as an empty href Our icon is going to be
2:18:28
the clipboard list icon And then finally our label for this one is just going to
2:18:36
say job board There we go So that's going to be our very first icon Also I'm getting an error because of the off
2:18:41
status related stuff I didn't make that an optional property when I should have So what I want to do is I want to go back into here O status should be
2:18:47
optional And also I need to mark this as a use client since we're using hooks inside of it So there we go That cleaned
2:18:53
that up Now if I look over here and I expand this you'll notice I don't see anything But if I give this a quick save hopefully we should see a link And of
2:18:59
course I'm on the employer page Let's go back to the normal page And now you can see that I have my job board link and it's highlighted as my active link
2:19:05
because that's the page that I'm currently on Now I'm going to copy this down a couple times We're going to have our AI search page That's going to be
2:19:13
having the brain circuit icon and this will just say AI search
2:19:20
So now you can see we have a link for AI search down there Next we're going to add another link This one is going to be for going to the employer dashboard and
2:19:26
this will say layout dashboard Just like that And we'll call this employer dashboard
2:19:34
And this one specifically has an off status of signed in because I can only go to the employer site if I'm currently signed in So now you can see that
2:19:40
employer dashboard And the nice thing is when I minimize this down on a full screen you can see if I minimize that I
2:19:45
have my icon showing up which is exactly what I want So that looks really good And then we have a final link here which
2:19:50
is going to be for me able to sign into the application So this will say sign in This will be my login icon
2:19:58
Just like that This will say login or actually let's just make it say sign in And then my off status on this one is
2:20:04
signed out There we go So that button will only show up if I'm signed out which is why it's currently not showing up on my page which is exactly what I
2:20:11
want And now the really nice thing is if I click on employer dashboard it brings us to the employer page and we can go ahead and add in our own nav menu on the
2:20:18
employer page So I'll copy this over We'll go over to our employer page and we'll come in where this entire section
2:20:23
is and we'll just replace it with our nav menu with all the stuff that we want to do inside of here instead Now this sidebar menu is going to be a little bit
2:20:29
different because we're actually going to have multiple sections So I'm going to just take this drop it down there like that We're going to have our
2:20:35
sidebar nav menu group And then we're going to have a section for listing out all the current job listings as well We'll call this our sidebar group
2:20:44
If I can spell properly There we go We have our sidebar group And inside of here we need a sidebar group label This
2:20:49
will say job listings There we go If we just give that a quick save obviously we're going to get some errors because none of these icons are
2:20:55
being rendered properly So let's just comment this out for now And you can see over here it says job listings at the
2:21:01
top Also we can give this an action as well So we can come in here sidebar group action Just like that We'll give
2:21:07
it a title so it's easy for people to know what it says Add job listing We'll make this an as child And essentially
2:21:13
what we want to do is we want to put a plus icon in here So we'll say plus icon This plus icon is then going to render
2:21:19
some text afterwards which is going to be specifically for a screen reader So we'll say screen reader only
2:21:25
And this is going to say add job listing So now we essentially if I make sure I
2:21:30
close off everything properly and actually I don't need to close anything I need to wrap this in a link because that's the whole reason why we made it
2:21:35
as child So it should say employer job listings new There we go
2:21:43
Now if I give that a save and I open this up you can see that I have this plus button and when I click it it'll redirect me to job listings/ new which
2:21:49
isn't a page yet but at least we have that section of our navbar And then below that we would obviously add in all
2:21:55
of our job listings but we'll get to that once we create job listings Now I want to go ahead and actually create what all my different navigation URL
2:22:01
links are going to be So the first one is going to be the same link to go back to the job board And then we don't care about AI search or the employer
2:22:07
dashboard All we care about is sign in So really all we care about is these two links Now if we open this up we have job listings at the top and we have a link
2:22:14
to the job board on the bottom And to be fair we don't even need this sign-in link really I'm going to keep it there just in case but we should never get to
2:22:20
this page without being signed in So actually I'm just going to completely remove it because there is no way that we get to this page without being signed in because this is a private page Now
2:22:27
here instead of our sidebar user button this should be our sidebar organization button And we'll create that next
2:22:32
because that's going to be kind of the thing that glues everything together Before we do that though let's just clean up a lot of these imports that are
2:22:38
no longer needed just to make our code a little bit cleaner And now let's go ahead and create that sidebar organization button And this is actually
2:22:43
going to be very very similar to our user version as well So I'm actually going to take the user version and copy it over We'll say
2:22:49
organizations/components because that's where we want the code for this to go And then inside here I'm
2:22:54
just going to take these two components and copy them over This one's going to be called sidebar organization button
2:23:00
And same thing here replace this organization There we go So now let's
2:23:05
start with this button cuz it's going to be rather straightforward where we have user I'm going to replace that with organization Just like that So we have
2:23:12
our suspense version And in the suspense version we need to get the current user and the current organization So
2:23:18
essentially I just want to copy this code paste it down just like this and I want to create a get organization
2:23:25
function and up here get current organization They're going to be very
2:23:30
similar So essentially here I can get my org ID This is the currently signed in organization for the user We'll get that
2:23:36
information right here And then this is just saying hey if I have an org ID I want to call get organization with that
2:23:43
or ID So really it's exactly the same as what I did for my user I'm just swapping it out with the organization's ID
2:23:48
instead Down here I want to get the organization ID tag which we don't have a function for yet but we'll create in a
2:23:54
second And then I want to get my organization table if the ID matches So we can say organization table ID just
2:24:01
like that So now let's go ahead and create the caching for our organization as well So again something that's going
2:24:06
to be very similar to what we did with our user So I'm going to go into my users database I'm going to go specifically into the cache section for
2:24:12
that I'll copy that over And here we'll say db/cache and I want to do this cache right here
2:24:18
And we'll change it to organizations Now our cache tags for these are identical All I'm going to do is take the word
2:24:24
user and swap it out for the word organization Otherwise everything is exactly the same So I'm not going to make you watch me type that out multiple
2:24:30
times Now we can come back into here We can import that That way we have our same caching system for both of these
2:24:35
all hooked up properly That way we don't over access things if we don't need to And now inside of here we can actually get the current user and the current
2:24:41
organization So what we want to do is we're going to wrap this in a promise.all So we'll say promise.all
2:24:47
We're going to wrap our git current user And we'll do the exact same thing for get current organization
2:24:53
Get current organization Just like that Again we'll make this a little bigger so it's easier
2:24:58
to see Make sure that I get all this closed off properly And this is going to return to me an array First property is
2:25:05
going to have my user object Second one is going to have my organization Just like that Make sure I spell that
2:25:11
properly There we And I just need to make sure I await this promise and that's going to give me all my information Now if my user or my
2:25:17
organization is equal to null well I can't actually render out what my button should look like So we'll just give us that log out button Same exact fallout
2:25:23
that fallback that we had before Otherwise I want to render out my sidebar organization
2:25:30
button client Just like that And we'll make sure that we get rid of all these imports that we no longer need And this
2:25:36
is going to take my user and my organization There we go So now I can copy that and
2:25:42
inside this other file the one that we copied over we can essentially just replace the name to the sideboard organization button And then we can
2:25:48
replace the content that we want inside of here because this is going to get in an organization and a user So we can
2:25:53
come in here organization We'll call this organization And we'll copy this
2:25:59
type to get our organization Now for our user the only thing that we actually care about is going to be the email property
2:26:06
And for our organization the image URL can actually be null And of course there's no email on the organization
2:26:11
Otherwise these properties are pretty much exactly the same between the two of them We just need to make sure that when we're using our user we swap that out to
2:26:17
make sure we use the actual organization and so on So here you can see we have our user info I'm going to replace that
2:26:22
with organization info just like that And this is going to take in our user as
2:26:28
well as our organization So we'll say user and organization
2:26:35
There we go And I can just make sure I copy that to all the places that this particular component is being used So I
2:26:40
believe it's being used right here as well There we go And then down here where we're using this it should take in
2:26:46
an organization and a user And we want to make sure we get those
2:26:52
types There we go So now we have those types proper For our name initials that's going to be coming from our
2:26:58
organization.name And then we want to make sure we use our organization image URL here And by
2:27:03
default if we don't have one we're going to set it to undefined Just like that And same thing here This is our
2:27:09
organization.name Our organization.name And here's the one place where we use the users information
2:27:15
is for their email Other than that we pretty much keep everything else exactly the same because really we're just swapping out our organization stuff for
2:27:21
our user stuff Now hopefully if we import everything properly we should actually see this rendering on our page So let's give that a quick save And I
2:27:28
believe inside of here I need to import that button as well And now hopefully you can see we have that organization
2:27:34
button down here But we don't actually have an organization we're signed into yet which is why it just says log out which is that fallback state which is
2:27:40
kind of exactly what we want So let's go ahead and like finish out this button because right now our drop-own menu has
2:27:45
the wrong in content inside of it As you can see it has content for like user profile and user profile which we don't
2:27:51
want So the very first dropown menu item this one is going to open our organization profile for modifying our
2:27:57
organization So up here just swap that out for our organization And then down here we want to use the building to icon
2:28:05
which is going to be an icon that kind of looks like an organization And it'll say manage organization There we go Next
2:28:12
up for the list that we want to have is going to be our settings for our user So we're going to say user settings and this is going to be the user round cog
2:28:20
icon And this is going to allow us to modify the settings for the user like do you want to get email notifications for
2:28:25
new job listings for this particular organization So it's kind of that organization user settings That's what
2:28:31
this is going to be allowing us to modify And this is needing to go to employer/ user settings just like that
2:28:37
Next step that we need to work on is going to be our pricing section So we can kind of copy this down as another
2:28:42
dropown menu item And this one's going to be for pricing So if we want to change our plan there we go For this one
2:28:48
we want to have the credit card icon And this will say
2:28:56
change plan Then with that done we can add in a drop-own menu separator because I have another item that I want to add
2:29:02
in between our logout and our changing of our plan And this one is going to be for swapping organizations So this can
2:29:08
just go to slashorganizations slash select And I should make sure I put a slash in front of these URLs so
2:29:14
they go to the right place This will allow us to change what organization we're currently on We'll call this arrow
2:29:19
left right icon There we go And this is going to say switch
2:29:25
organizations There we go Then finally just like before we have the logout button down here So essentially I just
2:29:30
changed what's inside of our menu options for our dropdown Now one thing that you may notice which is a bit of a problem with our page is that we're on
Organization selector
2:29:37
the employer dashboard but we don't have an organization created or signed into at all This is something we want to make
2:29:43
sure that we avoid So what we're going to do is we're going to go to our layout for our employer and we're actually going to break this into two different
2:29:48
sections We're going to have our export default which is what we have for our employer layout and we're going to render that particular section out And
2:29:55
this is just going to wrap a suspended version of our page So we can return here a suspense
2:30:02
And this is very common pattern that we have to use when we're working with this dynamic IO way of doing things And we'll
2:30:07
say layout suspense just like that And that's what we're going to call the component that we have down here and we're not going to export
2:30:13
that or anything And this layout suspense is going to take in our children So essentially what's happening
2:30:18
is while we're doing our loading we're just going to be having the suspend and render out no content at all And that's
2:30:23
perfectly okay for this particular use case And the reason I'm doing that is because inside of here I'm going to make this an async function I'm going to try
2:30:29
to get my current organization So I'm going to say org ID is equal to await
2:30:34
get current organization There we go And then if my org ID is null
2:30:40
well then I know I'm not signed into an organization so I shouldn't be here So I'm going to redirect the user Just
2:30:46
going to return that I'm going to redirect them to slashorganizations/
2:30:51
select There we go So now when I save this we should hopefully get redirected to /organizations/
2:30:56
select which is a page that I'm going to create now So we can go into our clerk section because this is going to be handled by clerk for us And we can
2:31:02
create an organizations slash select And then we can inside of here create a page
2:31:10
And this page is going to be rather straightforward I'm going to get started by just pasting in some code I'll explain exactly what's going on Let me
2:31:17
just create this suspended page real quick though There we go Make sure I get
2:31:22
all that proper There we go Okay So for this props we're taking in search prams And specifically I'm taking in a search
2:31:27
pram of redirect with a potential question mark So if I have a redirect option being passed in then I want to
2:31:33
redirect to that page Otherwise don't redirect at all So for example if I navigate to a specific page and then I'm
2:31:38
not signed into an organization it'll direct me here I'll choose my organization and then I'll get redirected to exactly the page I used to
2:31:44
be on That's all this redirect prop is there for Now for our suspended page it's going to take in those search
2:31:49
params So we're going to take in essentially the search params property Exactly the same as we had up here So we'll say search params is of type props
2:31:57
Just like that It's taking in all the same properties we had from up here And inside of our suspended page all I want to do is I want to get what that
2:32:02
redirect is So I'll say redirect is equal to calling await search params
2:32:08
because this is a promise This is the whole reason we had to wrap inside of the suspenses because we need to wait for those search params And then we'll
2:32:15
say that our redirect URL is either equal to redirect if we passed it in otherwise it'll be equal to employer
2:32:23
There we go So we're either going to redirect them back to the employer page by default or a specific URL that they want to go to Then what we're going to
2:32:29
do is we're going to return organization list And this organization list is a
2:32:34
component directly from clerk And inside here we want to do a few things First of all we want to hide the option to choose your personal account because we only
2:32:41
want them to be able to choose an organization We're also going to hide the slug which is just kind of like a URL friendly way of displaying
2:32:47
organizations We don't need it And we also don't care about the invitation screen So we'll skip that as well Then
2:32:53
finally after they select an organization URL we will redirect them back to our redirect URL And if they
2:32:59
create a UR or create an organization for example they don't have one yet we'll also redirect them back to that
2:33:04
URL So this is going to work for both cases where they either create a organization or select an organization So now notice we're getting a new error
2:33:10
Essentially we just need to make sure we enable organizations in our application So inside of our application wherever we
2:33:15
have organizations you can see right here organization management enable organizations And now we can use them throughout our entire application So we
2:33:22
can come over here and we can give this a quick refresh And now you can see I have the ability to create an organization because I don't have any
2:33:28
organizations I'm a part of That's why the list by default will show you a create screen Otherwise it'll show you the list of organizations you're in So
2:33:34
let me just go ahead and we'll create an organization We'll just call this WDS comp And we'll create that organization
2:33:40
And now you can see I've been redirected back to this page It says hi employer but you'll notice it still says log out down here instead of my big organization
2:33:46
picker The reason for that again is because we need to make sure we hook up our web hooks to be able to send the
2:33:52
information from clerk over to our application If we look inside of ingest you'll notice it actually received our
2:33:57
web hook If we go over to our event types we should see organization created and it has a brand new web hook inside
2:34:03
of here that was sent to us for that organization we created So we just need to make sure we set up a way to consume that web hook inside of our application
2:34:09
So what we can do is inside of our source services ingest inside of clerk we need to essentially create three more
Clerk organization webhooks
2:34:15
for creating updating and deleting our organization Now I'm going to go ahead I'm going to copy my clerk create user
2:34:20
to get started as a nice little starting point We'll say this is going to be creating an organization create db
2:34:27
organization There we go Going to update it in a bunch of different places at once So there's our event Right now we're
2:34:32
getting an error because we don't have that event hooked up inside of our application So let's make sure we go into our client and we set up the event
2:34:38
for all three of these So we're going to have our organization deleted and we want one for created and
2:34:44
so on And make sure I spell organization properly So this is going to be created updated And this should take our
2:34:50
organization JSON There we go For both of these So now at least we have the proper typing
2:34:56
set up So at least we don't have any errors for that We verify our web hook just like we did with all the rest of them And then finally we can create our
2:35:02
organization just like this So this is going to return to us an organization ID but we don't even care because we don't
2:35:08
need to bother with the settings down here We can get rid of that completely Also we don't need to worry about email or anything like that All we care about
2:35:14
is our org data just like that That's coming from our data And then we want to insert an organization just like this
2:35:21
And the organization we'll create a function for that before we dive into the rest of the code So inside of our features inside of organizations I
2:35:27
essentially just want to copy what I did for my users and I want to put it into here This is going to be for insert
2:35:33
organization and this is going to be for my organization table Just like that And we want to do
2:35:39
the exact same thing for update and delete So we'll say update and delete Again they're going to be
2:35:46
coming from the organization table on all of these Make sure I just import
2:35:51
that in all of those places There we go This is going to be our organization
2:35:57
Perfect Same thing here And this is going to be my organization ID And we want to revalidate our organization
2:36:04
cache So let me make sure I do that in both places as well And that should be everything I need to make sure that updating and deleting and or inserting
2:36:11
our organizations works just like we expect it to So now if I go back to here I can import that function I can take
2:36:17
our org data I can get our ID from it I can also get our name which is going to be much simpler because organizations don't have a first and last name They
2:36:23
just have a single name We're also going to get our image URL They obviously don't have a in an email to associate
2:36:29
with them So that we can get that information and we don't even need to return anything And that's all we need to do to insert this organization into
2:36:35
our database So now we should be able to just send down that event to our dev and it should work So we click send We can
2:36:41
look and we can see our runs You can see that so far it doesn't look like we have anything that ran inside here And that's
2:36:46
because of course we have a failure because I don't have these events hooked up Let's go all the way into our app
2:36:52
inside of API our route and make sure we add this as a function Make sure I import that And now we should be able to
2:36:59
send that down just fine and it'll work So let's go back into the cloud Send that down to our dev server And we
2:37:04
should see here that we have organization created and it successfully ran through all of our different steps which is exactly what we want And now we
2:37:11
should see when we go to our application and refresh There we go We have our WDS comp down here with our URL or our image
2:37:17
And if we open this up we have the option to do all these different things such as switching organizations Now you can see I can swap or create a brand new
2:37:23
one I can come into here I can change what plan we're on which we don't have a page for yet I can change my settings which we don't have a page for yet And
2:37:29
then finally I can manage all the stuff related to my organization like adding new members and so on Now to save us all
2:37:34
a little bit of time instead of typing out the create and or the update and delete versions I'm going to copy them over I'm again going to explain what the
2:37:41
code is doing but you'll notice it's pretty much identical to what we did inside of the organ or the user version
2:37:47
So you can see we named everything properly hooked it up to the updated event and here we verified the web hook and we call update organization with our
2:37:53
new information Same thing with delete We set up the delete web hook we verified that it was correct and then we made sure we delete the organization
2:38:00
with this delete organization function And if there's no ID we throw an error for it So now let's go ahead and actually implement this dashboard page
Employer dashboard
2:38:06
because we kind of have all the nuts and bolts done now Finally I know it's been taking forever to get to this point but
2:38:11
now inside of this employer section we can go into our page and instead of just rendering out some random text what I want to do inside here is I want to
2:38:18
first get the current organization And again we're going to need to make sure we wrap that inside of a suspense So
2:38:23
we're going to have a function We'll just define it down here Suspended page
2:38:29
Just like that This is going to be async and we're going to wrap that inside of suspense
2:38:35
And this is going to be our suspended page There we go And then inside of here make sure we
2:38:41
import that Perfect Now what we can do inside of our suspended page is we just make sure that we properly redirect the
2:38:46
user and do whatever else we need to do So first let's try to get the organization that they're a part of we'll say org ID is equal to await get
2:38:53
current organization Just like that This gives us that ID for the organization And if the org ID is equal to null well
2:39:02
we should never actually have it be equal to null but if it is we'll just return null from our data Next what we want to do is we want to get all of our
2:39:08
job listings And specifically I just want to get the most recent one So we'll say job listing is equal to weight most
2:39:14
recent job listing I'll call this get just so it's a little bit more consistent And
2:39:21
we're going to pass in here the organization that we want to get this for And then we have an async function for dealing with that So async function
2:39:30
get most recent job listing takes in an organization ID We again want to make
2:39:36
sure that we use cache on this and we want to add a cache tag This one's going to be a little bit more complicated of a
2:39:42
cache tag but we'll get to it in a second For now I'll just leave a comment that says to-do so that way we remember to actually do this particular thing And
2:39:48
then when we return calling our database we want to query on our job listing table not the application table We want
2:39:54
the job listing table We want to find the first one and we want to specifically get it where our
2:40:00
organization ID is equal to that organization ID So we'll say organization ID is equal to our org ID
2:40:07
And here we're also going to do a little bit of a sort So we're going to say order by and we want to get it descending So essentially what I want to
2:40:13
do is I want to get the most recently created one So we'll say created ad So whatever the most recently created job
2:40:18
listing was is the one that I want to actually render first And the way that this get most recent job listing is
2:40:24
going to work is if we have a recent job listing I want to redirect to that page Otherwise redirect the user to the new page because we don't really have
2:40:30
anything to show on the dashboard So if job listing is equal to null
2:40:36
then I want to redirect the user and I want to redirect them to the employer
2:40:42
slashjob listings slash new page Otherwise
2:40:50
I want to redirect them to that job listing So we can come in here job listings slash and whatever that job
2:40:55
listing ID is Make sure that I put that inside of
2:41:00
brackets Just like that And down here I only really care about the ID column So I'm going to just return the ID column
2:41:06
and nothing else That's just going to save me a little bit of bandwidth So I don't have to return too much information There we go So now I'm
2:41:11
redirecting us back to the proper page And you can see here we're getting redirected to the new page cuz we don't have any job listings which is exactly
2:41:17
what I want Now we're going to go through and deal with the caching for our job listings next So what I want to do inside of our features section we're
2:41:23
going to create a brand new folder This one is going to be job listings Just like that Make sure I spell it properly
2:41:30
And inside of the job listings folder I want to create a new file So that's going to be in DB And then we want to
2:41:35
call this job listings There we go TS I want to do the exact same thing inside of here We'll create a folder called
2:41:41
cache And inside of that I will create a new file
2:41:46
job listings.ts And this is again going to be very similar to what we did for our user So I'll take my user information copy it
2:41:53
into here But there are going to be a few changes So first of all anywhere that I have user I just want to change this to say job listings There we go
2:42:01
Just like that And let's make sure that this is lowercase because that's how I actually have it set up There we go So
2:42:07
this works perfectly fine for global job listings as well as job listings with a specific ID But if we look back at the
2:42:12
actual page where we're using this you'll notice we're actually querying based on organization ID So I only want to revalidate my cash when a job listing
2:42:20
changes for a specific organization Not an individual job listing and not all job listings only job listings under one
2:42:26
single organization So to do that we're going to create another function kind of in the middle here That's going to be
2:42:32
our job listing organization tag And this is going to take in an organization
2:42:37
ID that it's going to use in place here And instead of a get ID tag this is going to be a git organization tag Now
2:42:44
this get organization tag is going to be pretty straightforward We're going to come in here Get organization tag It
2:42:49
takes in our organization ID Just like that Here it's going to be
2:42:55
for a specific organization and for a specific ID So essentially this new tag that I created doesn't matter what you
2:43:01
call it Doesn't matter what the text you put here is All that matters is that this is now associated with organization
2:43:06
level management So anytime all the things under an organization change it's going to refresh this particular thing
2:43:12
So in our case whenever any job listing under an organization changes it's going to refresh this cache And now down here
2:43:19
I want to make sure I call this with my org ID And when I pass in my parameters here I want to pass along an ID as well
2:43:25
as an org ID So I'm going to pass it along as an object actually
2:43:30
which going to be a string There we go And make sure here
2:43:35
Whoops Put that one too early There we go So we have our ID and our organization ID And I need to make sure
2:43:42
that's a capital I there capital I there And we can pass that along right there So now I'm properly revalidating all
2:43:47
three of those different cache tags So now I can use this exact tag inside my function So let's go all the way back to
2:43:53
this page here Here's my cache tag Pass that in And we're going to pass in the org ID So now that this should be
2:44:00
hopefully properly cached using that tag that I just created So anytime I update job listings under an organization it's
2:44:06
going to refresh this cache So now let's go ahead and actually create this page So this is going to be joblistings
New job listing form
2:44:12
slash new just like that And we want to create a new file called page.tsx
2:44:17
directly inside that folder there And inside this page we're going to export a default function called new job listing
2:44:24
page Whoops Make sure I get it inside of here There we go And inside of here
2:44:30
we're just going to return essentially a card on the page So we're going to add a div
2:44:36
This is going to have some class names on it max width of 5 XL because we don't need it to be super large We're going to
2:44:41
put MX auto just to make sure it's centered And we're going to put padding of four to make sure we space it out from the edge of our actual space We
2:44:47
just put a little text inside of here You can see that padding just pushed us away from the edges which is what we want Next I'm going to put an H1 that
2:44:54
says new job listing And to make sure that the text is large and readable
2:44:59
we'll come in here with a text of 2XL font of bold Whoops bold There we go and
2:45:05
we'll add some margin on the bottom of two There we go We have that nice large text Next we have some padding that says
2:45:12
this does not post the listing yet It just saves a draft That way people know
2:45:18
that when they're creating this job listing it's not actually going to be saved for them or it's not going to be posted to other people It's just going
2:45:23
to be saved for a draft So then we can come in here text muted foreground and finally margin bottom six to give us a
2:45:30
large amount of space underneath this Then this is where our card comes in which we're going to import from shad CN
2:45:36
So let's just add in an extra terminal here npx shad cn at latest And we want to add in
2:45:44
specifically the card component Give that a second to run It's going to ask us to do the force where we're going to do that So just one second And actually
2:45:51
we didn't even need to force to install this which is great And now we have access to our card component And
2:45:56
specifically we want to put this inside the card content And then this is where we want to put our form So this is the
2:46:01
text that we're going to put and this is where we're going to import a brand new component called job listing form which
2:46:06
we're going to create because we want to share this form between our update and our new page which is what we're currently on So let's create a brand new
2:46:13
component for that We're going to go into our features for our job listings which it looks like I accidentally put that inside my organizations folder
2:46:19
There we go So now our job listings I want to create some components inside of here And specifically I want to create a
2:46:25
job listing form So we're going to say export function job listing form Just like that Now for this form we're going
2:46:31
to need to import the form the input and the select components from Shadan So we
2:46:37
might as well go ahead and get those started We'll make sure we force install those That'll get everything that we need I want to make sure I just do a
2:46:42
quick save on all my different pages to hopefully make sure everything references properly here I'm going to import that job listing form And now at
2:46:49
least we have everything rendering and we can go ahead and actually implement what this form looks like So first I want to get my form which is going to be
2:46:55
from the use form hook Just like that And up here we're going to make sure we add this as a client component Now
2:47:01
behind the scenes Shad CN uses React hook form So that's kind of what we're working with right here And inside of
2:47:06
here I want to add a resolver This is going to be using ZOD resolver So we can come in here with ZOD resolver Just like
2:47:12
that And we're going to pass it in whatever schema we're going to be using And it doesn't look like this wants to autoimp import So we're going to
2:47:17
manually import this which is Zod resolver That's coming from at hookformresolvers/zod
2:47:25
There we go That gives us the zod resolver and we pass in some type of schema here which we're going to create and we're actually going to put that
2:47:31
inside of its own folder So we're going to come in here with actions and inside this actions folder we're going to create a brand new file called
2:47:37
schemas.ts and this is because pretty much all of our schemas are directly tied to actions that we're taking These
2:47:42
are server actions that I'm specifically talking about server functions So what I want to do is I want to export a constant called job listing schema
2:47:51
and this is going to be a zod object So we'll say Z object and we specifically
2:47:57
want to mention all the different properties that we need So for example we're going to have a title which is a Z dot string
2:48:04
We're going to say that it's a minimum of one just like that Next we're going to do the exact same thing with description
2:48:12
Again it's going to be a minimum size of one Make sure I spell all that properly There we go Then I want to have an
2:48:18
experience level And experience level is going to be a little bit interesting because it's going to be an enum that uses that experience levels variable at
2:48:25
the top there And we want to do this for a bunch of different enums So we're going to have a location requirement
2:48:32
enum And that's just right there Location requirements Make sure I get that imported properly Then the next one
2:48:39
that we're going to be working on is our type And I believe I called this job type Job listing types There we go Next
2:48:45
we're going to have our wage which is not an ENM So we'll just come in here Wage This is going to be a number It's
2:48:52
going to be specifically an integer It's going to be a positive integer The minimum value it can be as one And we
2:48:57
can also let this be nullable because they could pass in no value for this Then we're going to have a wage interval
2:49:03
which is another one of these So we're going to say wage interval just like this
2:49:08
Whoops Wage intervals There we go And again this one can be nullable because they could pass in no wage at all Next
2:49:14
we're going to have a state abbreviation So I can say state abbreviation and this is going to be
2:49:21
something that can be nullable So instead of having a minimum value of one here I'm going to have it be nullable
2:49:26
And I'm also going to do a little transform here This is kind of a trick I like to use where we're going to take our value and if our value.trim is equal
2:49:34
to an empty string well then I want to return the value of null Otherwise I'll return what my value was All this does
2:49:40
is it takes empty values and converts them to null That way we don't save an empty string in our database Instead
2:49:45
we're storing null which is really what we're trying to represent I'm going to do the exact same thing with city It's
2:49:50
literally exactly the same It's going to convert any empty strings to null And this is again a nullable value Now the
2:49:55
final thing that I need to do is I need to add a little bit of refinement to this because the way that I have my code set up is I have these location
2:50:01
requirements And this could be in office hybrid or remote And if you specify a remote job you don't need a state or
2:50:07
city to go with it cuz it's remote But if you have a job that's in office or hybrid obviously you need a state or
2:50:12
city where that particular job is defined So I'm going to add a refinement here And this refinement if it returns
2:50:18
false essentially says that there's some type of error So this is going to take in my full listing So like all of my
2:50:23
properties that we have up here And I want to check to see a specific thing So I'm going to return if my listing.loation requirement is equal to
2:50:31
remote Well that means we're fine It doesn't matter if there's a city or not But if this is not equal to remote
2:50:36
remote then I want to check to see if the listing city is not equal to null So essentially what this code is doing is
2:50:41
if I'm remote return true Okay we're fine Otherwise I'm checking my city to see if it's not equal to null If it's
2:50:47
not equal to null I return true It's fine If my city is null though then that means that I have a non- remote job
2:50:52
listing without a city being defined which is obviously a problem because I need to have a city associated with it
2:50:58
So here I'm going to set my message equal to required for non remote
2:51:03
listings And I'm specifically going to say the path for this is going to be an array that points to
2:51:09
city That way it's going to be on my city object itself And I essentially want to do the exact same thing but for state So down here state required for
2:51:17
non- remote And this is going to check my state property And this is actually state abbreviation And down here same
2:51:24
thing state abbreviation So now I've just refined this a little bit more to make sure that extra conditions are met
2:51:29
that you can't really check in the normal ZOD schema So now let's go into our job listing form here and I want to use that job listing schema that I just
2:51:36
created There we go And now I also need to define some default values So my default values are just going to take
2:51:41
everything I've defined and set them essentially to empty strings or null or whatever it needs to be So description
2:51:46
is going to be an empty string by default My state abbreviation is going to be null because I could have none of
2:51:52
that being passed in Same thing with city that is null My wage is null
2:51:58
My wage interval is going to be set to yearly by default because most jobs are salary based at least for developers
2:52:04
Experience level we're going to set to junior Our type is going to be set to full-time And then finally our location
2:52:10
requirement here we're going to set to in office as the default So this is all of our default values for our form And
2:52:15
then we can go ahead and actually start implementing what our form is going to look like So down here we're going to
2:52:21
return a form object directly coming from shad CN Make sure you import the correct one And we're going to pass it
2:52:27
in all of our different form properties Then inside here we're going to specify a form that's going to have our onsubmit
2:52:32
property which is calling form.andsubmit where we pass in our own onsubmit handler So this is just a function
2:52:39
onsubmit Right now it doesn't do anything but essentially this function is going to take in all of our data which is going to be essentially the
2:52:45
type of object So we're going to say type of job listing schema Just like that And make sure we import zod There
2:52:52
we go And now you can see that that's giving us proper type safety on all the data for our property And we can do whatever we want with it For now I'll
2:52:58
just console log data so at least we have something inside of there Then I want to add some class names We'll say
2:53:03
space Y of six And I'm also going to put an at@ container in here So we can style things with container queries And for
2:53:09
the most part for my application I'm actually really heavily using container queries And the main reason is is the width of my container changes whether or
2:53:16
not my sidebar is open or closed So it makes more sense to use container queries rather than media queries because again my container size changes
2:53:22
drastically based on the size of my sidebar Now let's go back into our actual code and we'll start implementing
2:53:28
all the different form fields that we need Now most of my form fields I'm going to wrap inside of a div cuz we're going to put them side by side But on
2:53:35
smaller screens we're going to stack them vertically So I'm going to come in here with a class name of grid grid
2:53:40
columns one And then on a medium screen size and this is a medium container size specifically I'm going to say mid grid
2:53:47
columns of two So on a really small screen they're one column wide while on a larger screen they are two columns wide The gap in the x direction is going
2:53:54
to be four and the gap in the y direction is going to be six And the reason my gap in the y direction is six
2:53:59
is to match this gap right here That way they're exactly the same Then finally we're going to put our items at the start just so if we have an error
2:54:06
message below one item they both are still aligned at the top instead of being aligned in the center which looks really strange Now we can go ahead and
2:54:13
implement each one of the form fields that we want And for our form field we need a name In our case we're going to put title as the name of this particular
2:54:19
form field We need to specify our control which is our form And then we have a render function which
2:54:25
is where all the magic happens This takes in an object which is going to be our field That's kind of the main thing that we're going to care about most of
2:54:31
the time And then inside of here what we want to do is actually return whatever we want to render So in our case we're
2:54:38
going to render out a form item This form item is going to have a form label
2:54:43
which is going to say job title That's just what displays to the user Our form control is going to be the thing that
2:54:49
allows us to control this input And then we're going to have the actual input that we're rendering which in our case is just going to take all the properties
2:54:55
from our field and use them So this is allowing us to like onchange set everything because as you can see field has different properties like onchange
2:55:01
and so on So if we come in here with like field dot you can see on blur on change value all that different stuff
2:55:07
Finally we can add a form message and this is going to show our error message if there is an error on our page Now if
2:55:12
we give that a quick save you can see we have our job title showing up on the lefth hand side of our page Next I essentially want to copy this down cuz
2:55:18
we're going to do the exact same thing but this is going to be for our wage input instead So for our wage input let's change this to say wage And this
2:55:25
input is going to be a little bit more complex because it's going to be a type of number here So let's add our type of number The value is going to be equal to
2:55:32
our field value or an empty string So if our wage is null we're just going to be passing in an empty string here Also I
2:55:39
want to add in a few custom class names I'm going to say that the rounded on the right side is going to be equal to none
2:55:44
And that's because I'm going to add a drop down on the right hand side So I want to make sure we don't have any rounding conflicts between them Lastly
2:55:50
we want to set up an onchange here onchange There we go And this onchange function
2:55:57
is just going to call field.onchange And it's going to say is the number not
2:56:02
a number essentially Did I pass in something that's not a number so like an empty string in our case So e.target dov
2:56:09
valueue as number There we go So if I don't have a valid number then I want to return undefined Otherwise my target is
2:56:17
going to be e.target.value as number There we go So essentially I'm just trying to say hey if I don't have a
2:56:23
valid number return undefined as my particular type and actually it probably makes more sense to return null here So
2:56:28
we are going to return null So now you can see I have my wage input and that right hand side has no borders which is exactly what I want because I'm also
2:56:35
going to add another form field directly after this So we can come in here with a form field This one is a name is going
2:56:41
to be wage interval We need to specify the control just like
2:56:46
we did on all the other ones So we'll say form.cont control And then finally we have our same exact render function
2:56:52
So for this one we'll put our field in here and we're going to render down kind of very similar stuff to what we did up
2:56:59
here We're going to have our label and our form control and so on So we have our form label which is going to be wage And we want to make sure that we wrap
2:57:05
this inside of a form item just like that So let's make sure we
2:57:10
close that off down here Looks like it's actually right here
2:57:15
There we go Form item Perfect We got all that closed off properly And in this case we're going to be using a select
2:57:21
instead So here I want to have a select We don't even need a label for this one So we're going to come in here with a select Our value is going to be equal to
2:57:29
our field value or an empty string Again if we don't actually have a value it's going to default to an empty string
2:57:36
And we essentially want to wrap everything inside of that So we're going to put that all inside of our select here Make sure that we import our select
2:57:42
from the correct location And then what we can do inside of our form control is we can have our select trigger So we can
2:57:48
have our select trigger just like this That essentially replaces this entire input component right here The class
2:57:54
name on this is rounded left none again because I don't want to have any rounding occur on the lefth hand side So
2:58:00
we will close this off And inside this select trigger I'll just have a slash symbol as well as my select value There
2:58:06
we go So essentially whatever my value is that's being selected is going to show up here So for example it could have the text yearly being displayed
2:58:13
right there which is essentially whatever the selected value for this is going to be Now we can also specify what
2:58:18
our selected content is So here our select content is going to be our wage intervals
2:58:24
and we want to map through each one of those intervals And we essentially want to return a
2:58:30
select item Make sure we import the correct one There we go Our key
2:58:36
is interval Our value is our interval And then to render out what our interval
2:58:43
is I'm actually going to create a little handy function called format wage interval And we're going to pass it in
2:58:48
our interval just so we format this in the correct way So let's actually create this function before we finish out what the rest of this component is going to
2:58:54
look like So inside my job listings I'm going to create a new folder called lib And inside of here I'm going to create a
2:59:00
formatterers file And I'm gonna export a function with that exact name This is going to take in an interval
2:59:06
which is a wage interval And then we just want to render that out So essentially what this code is going to do is if the text is hourly it's going
2:59:12
to render hour If it's yearly it's going to render year And then this little code just throws an error if we enter something invalid And the nice thing
2:59:18
about it is it'll actually throw a TypeScript error if we forget to put one of our different values in our case which is really handy and useful So now
2:59:25
back into here we can import this particular function And now we should see that that is rendering out properly And you can see that it's it doesn't
2:59:31
look great because I think I imported something from the wrong location One of these came from Radex Yep I need to fix
2:59:36
that These should be imported from Shad CN and not from Radex directly There we
2:59:41
go So now you can see when I drop down on that it looks really good But I need to make sure they're side by side To do that I can come all the way up into here
2:59:48
where I have my form label and right below it I can just create a div with a class name of flex And I can wrap
2:59:54
essentially all of this different content just like that And now you can see that they are side by side Also I'm going to add a form description
3:00:01
Description There we go That just says optional So we know that this is an optional field that they don't have to
3:00:07
pass in So now to finish out the rest of the rows we kind of just need to copy what we've done paste it down and change around a few values So inside of here
3:00:13
let's paste this down and work on the very next property which is where we're going to deal with city and state So this one's going to be a little bit more
3:00:19
complicated cuz we essentially need another level of grid nesting because city state are going to show up right next to each other except for on really
3:00:25
small screens they're going to show up stacked vertically So I'm going to create another div It's going to have almost the exact same styles So I'm
3:00:31
going to kind of copy this over to do a little bit of cheating The only difference is where our break points are going to be So instead of breaking on
3:00:37
the medium screen size we're going to break on the extra small screen size And our gap in the X direction is going to
3:00:42
be slightly smaller so that these elements look slightly closer together Then we can go ahead and we can add in
3:00:47
the form field specifically for our city just like this And we can come in here and say city on this one And since our
3:00:54
value could be null we need to make sure that of our field show you is null Then we return an empty string instead There
3:01:00
we go So now we have our city showing up on just one section Just like that We can create another form field This one
3:01:06
is going to be a select So it's going to be kind of similar to what we did here So I'm going to copy this one in particular Going to paste that down as
3:01:13
our next option And this is going to be for our state abbreviation There we go This one is going to have a label So
3:01:19
we're going to come in here with a form label that says state So now we have our state showing up Now we just need to make sure we specify what the values are
3:01:25
going to be So for our select trigger we don't actually need to do anything fancy All we just want to do inside of here is
3:01:30
add a full width on that so at least it fills the entire screen size which is what we want Next inside of our select
3:01:35
content we want to have essentially all of our state select items Now to loop through all the different states that we have I'm going to be using a JSON file
3:01:42
So I'm just going to copy this over It'll be in the GitHub repository linked in the description but if we paste that down make sure that's in the right
3:01:48
folder You can see that this just associates essentially a name here or a name with the abbreviation Just one to
3:01:54
one mapping between the two And I'm going to create a really simple helper function that allows me to convert this into some objects for my select option
3:02:00
So inside of my features inside the components I'm going to create a brand new one called state select items
3:02:07
just like that TSX I'm just going to copy the code for it because it's relatively straightforward As you can
3:02:12
see all that we're doing inside of here is we're taking the states which is from that JSON file We're converting it into
3:02:17
an array by using object entries That gives us an abbreviation and a name And we're creating a select item for each
3:02:23
one of those different options Super straightforward code Now what we need to do is use that inside of our form So
3:02:28
here instead of using our wage intervals essentially we're going to use that custom component that we just created That will loop through all of our states
3:02:34
for us So now if I click over here you can see that every single one of these states shows up Now one thing we need to modify is currently when we try to
3:02:40
select an option it's not being saved And that's because we need to set up the on value change property And we can for
3:02:46
now just set that to field on change That's not quite going to work perfectly but it's going to work well enough that
3:02:52
we can select something and it shows up We need to do the exact same thing up inside of our wage section as well So
3:02:57
here where we have our select we want to make sure that we specify the on value change And this one's going to be a
3:03:03
little bit different because we actually have the option that maybe null could be passed along for this one So I'm going to come in here with a value and we'll
3:03:10
just say value or we're going to pass along null just to make sure it's properly showing up as the correct value
3:03:16
We don't ever get undefined and empty string will show up as null But we again shouldn't have that happen And you can see we can swap between the two That's
3:03:22
working just fine Now the problem that we're having is when I select Arkansas I can't unselect this There's no way to
3:03:27
unselect this option So I need to add my own custom ability to unselect a particular option So inside of my select
3:03:33
items I'm going to add a brand new select item This is going to be a select item which has a value which we're going
3:03:39
to set to none select value just to kind of denote we're not actually selecting
3:03:44
anything I'm going to add a class name to this of text muted foreground and I'm going to set this to the value of clear
3:03:49
Now let's just create this variable We'll do it way at the top of our page up here
3:03:55
And we'll just set it equal to none Doesn't really matter what the text on this is because it's only used internally But now you can see we have
3:04:01
that none select value And if we actually open this up you can see we have that clear option right there which allows us to set this to clear Now
3:04:07
there's two problems One is that clear option always shows up I don't want it to show up And two it's setting our value to clear which we don't really
3:04:13
want So first if our field value is not equal to null then what I want to do is
3:04:19
I want to render out this clear option So if we have a value show me the clear option But if we don't have a value I
3:04:24
don't want to show it So in order to make sure we change from a null or change to a null value up here where
3:04:30
we're doing our field on change I want to get our value I want to see if my val is equal to the none selected value
3:04:36
option then I want to render something in particular And we'll actually do this directly inside my field on change So if
3:04:41
I have the none value selected I want to return null Otherwise I want to return my value So essentially if I select the
3:04:48
clear option change my value to null instead of changing it to clear So now we should see if I click clear it
3:04:53
actually clears out my state input and that clear option is no longer there And then as soon as I select something clear is there and I can clear it out again
3:04:59
Now the next section that we're going to be doing right after this let me just minimize that down Copy this over Everything inside this wage section we
3:05:05
don't need anymore So I'm going to completely delete that and all this other stuff associated with it I'm going
3:05:11
to paste in our next option which over here is not going to be state but instead it's going to be our location requirement So we can say location
3:05:18
requirement And inside of this location requirement we kind of need to do a pretty similar thing but this one we can't clear out So we don't need to
3:05:24
worry about clearing out this information We can just pass along the field on change just like this That's
3:05:30
going to work fine Same thing up here Field value is going to be passed along just fine because we don't have an option for this to be a null value Then
3:05:37
we have our select value We make sure it fills up the full width And down here instead of doing this section here we
3:05:42
just want to take our location requirements There we go And we want to map through each one location requirement And I'd
3:05:50
want to just render that out as a select item There we go Our key is our location
3:05:56
requirement Value is the location requirement And
3:06:01
then I want to format our job location Actually we'll just call it format location requirement There we go
3:06:09
And pass it in our location requirement And again we're going to go into our formatterers and export a function with
3:06:15
that name It's going to take in a location requirement
3:06:21
And I'll just copy over the code for this one again because it's super straightforward We're just converting to some human readable names based on what
3:06:26
we did And again we're making sure we have that fancy little TypeScript check right here to make sure we actually have all of them defined So now let's import
3:06:33
that real quick And we should hopefully see we now have the option to select whatever location requirement we want
3:06:38
I'm going to minimize down some of our fields that we have right here So we're going to minimize that down Minimize that down And for this next one I'm
3:06:43
going to copy it in I'll go through all the code exactly but it's super super basic We've done this on the last couple
3:06:48
So you can see here we're doing our job type one Same thing with our field and value on changes The only difference is
3:06:53
we're looping through each of our types and we're going to be calling a format job type function which we're going to create Same thing down here Experience
3:06:59
level Loop through our experience levels Call the format experience level function Super straightforward That's exactly what these two columns are for
3:07:06
They're pretty much identical to our location requirement All we need to do is define the formatterers for them Again I feel okay copying and pasting
3:07:12
these in because if we look at these real quick let me just make sure I import experience level and job listing
3:07:18
type You'll see that all I'm doing is taking the string and making a human readable version Super straightforward
3:07:23
exactly what's going on here So now if I come back into here I can import these two functions Just like that Give that a
3:07:30
save And now you can see we can change between the different job types that we have exactly like we want And to make sure everything's mobile responsive you
3:07:37
can see as I shrink down my screen size things are changing to stack above and below each other which is why we have all those container query related styles
3:07:43
for our application Now we can minimize down this row and we're on our final attribute inside of here which is going to be a form field And this is going to
3:07:50
be for the description So we can come in here with description Make sure we close
3:07:55
that off Our control whoops spelled that wrong Control is our form And then finally we have our render function And
3:08:02
this one is going to be a little bit more complex than the rest of them because we're actually going to be using a markdown editor directly for this So
3:08:08
inside of here we're going to create our form item And then we're going to have our form label
3:08:14
This is going to say description This one's going to take up the full width which is why we don't have those extra divs Then we have a form control And
3:08:22
inside here I want to render out a markdown editor which is a component we're going to create in a little bit So
3:08:28
we'll take all of our field properties and we're going to take whatever our markdown should look like and that's
3:08:33
going to be field.value Just like that And there we go Now we can just make sure if we have an error it shows up in
3:08:39
this field or the form message section Now this markdown editor is going to be built on top of the MDX editor library
3:08:45
just to make this a lot easier to work with So let's go ahead and install the library that we're going to be using We're most likely going to need to force
3:08:52
install this So I might as well just come in here with a force There we go That way it's going to be force
3:08:57
installed And you can see that they have specific instructions on how to get this to work inside of the app router which
3:09:02
is really handy So now that we have all that installed let's go into our application What I want to do is I want to go into my components folder I want
3:09:08
to create a brand new folder inside of here specifically for my markdown related components And I'm going to create a brand new component called
3:09:14
markdown editor tsx Just like that And this is where the specific section right
3:09:19
here comes in In order to do this we need to make sure we import it We're using a dynamic utility with SSR equal
3:09:25
to false So this is actually quite simple to do All I need to do is I want to import dynamic from next slashdnamic
3:09:34
There we go And then I want to export a constant variable called markdown editor This is going to be my component I'm
3:09:39
going to call dynamic And all I want to do is import whatever that function is going to be And make sure I actually
3:09:45
call this as a function There we go And import is just going to point to the location where my file is that's going
3:09:52
to contain my markdown editor So I'm going to call that markdown editor with an underscore at the front And all we
3:09:58
need to do to make sure that this works properly is to disable SSR So we're going to set SSR equal to false That's
3:10:03
kind of what this particular line of code right here is telling us to do Now what we can do is create this markdown editor file which I'm going to create
3:10:09
right here underscoremarkdowned.tsx And we want to make sure we mark this as a default export So we're going to
3:10:16
export this as a default function mainly because when we import dynamically write this it imports the default export by
3:10:22
default So we'll call this internal markdown editor just so we don't accidentally use this anywhere else This
3:10:28
is going to take in a ref It's going to take in a class name and it's going to take in a bunch of props for everything
3:10:33
we want to do And this specifically is going to take in my MDX
3:10:39
MDX editor props Just like that Make sure I get that imported properly
3:10:47
MDX editor props from and that is at MDX editor and the
3:10:54
rest of the props that I want to be able to have is my ref So we can just come in here and say ref is equal to ref from
3:11:00
react and it's the MDX editor methods There we go That is exactly what we want
3:11:06
to make sure we do to get our actual ref being imported properly And this again is all inside the documentation as you
3:11:11
can see right here I've just updated it slightly because you don't need to worry about forward ref anymore because we're using React 19 Next what we can do is we
3:11:18
can render out our MDX editor And this MDX editor is a rather simple component that is going to take in essentially a
3:11:24
bunch of different configurations as well as all the different props we want So first we can pass in our props that
3:11:29
we're getting in and then we can pass in all the rest So class name is going to be easy So we're going to come in here with CN This is going to take our
3:11:35
markdown class names which are going to be some classes I define in a little bit Kind of our default class names Then if
3:11:41
we're in dark mode we want to specifically pass along the dark theme style that allows us to actually do dark
3:11:47
mode And then we're going to pass in any additional class names we have So first of all I can come up to the top of our
3:11:53
function and I can make sure that this is actually being returned There we go So I can say const is dark mode
3:12:01
is equal to use is dark mode And I can just call that function Also this should
3:12:07
be a client component because everything on here is a client related object Just like that I also want to make sure I
3:12:12
pass along my ref So I can come in here Ref is equal to ref Now these markdown class names are something we're going to
3:12:18
use in multiple places So I'm going to paste that in We're going to be using the pros feature directly built into Tailwind which allows us to actually
3:12:24
automatically style things that are in a markdown format really easily So if we look at how we install this Tailwind library we can just install this as a
3:12:31
dev dependency Going to need to most likely force install this That's going to run fine And then we just add this as
3:12:36
a plugin directly into our Tailwind file So that's inside of our app inside of our global CSS at the very top of our
3:12:42
page We can just add in that plugin just like this And now we have the plug-in support specifically for Tailwind
3:12:48
typography And this is all we need to do And now all these pro styles are going to work automatically which is great Now
3:12:53
kind of the last thing to specify is how we want to configure what this MDX editor is going to look like So first of
3:12:59
all I want to say that we want to suppress HTML processing I don't want to allow these organizations to pass HTML
3:13:04
into their markdown That's not something I want Completely suppress that That essentially is going to escape and sanitize any HTML Then we need to
3:13:11
specify the plugins that we want And all these are built in which is really nice For example we want the headings plugin
3:13:16
that allows them to specify what headings they want to use We want the lists plugin that allows them to create
3:13:21
list We want the quote plugin We want the thematic break plugin that's just allowing them to create an HR
3:13:28
essentially We want the markdown shortcut plugin Just allowing them to do different shortcuts for markdown The
3:13:34
table plugin And then finally we're going to have the toolbar plugin And this allows them to essentially have a
3:13:39
nice little toolbar that has different options they can click on Very similar to like Microsoft Word So inside of here
3:13:44
we specify our toolbar contents which is going to be a function We'll make this into an arrow function
3:13:51
There we go And inside of here we have a bunch of pre-built components we can use For example we have the block type
3:13:57
select component we're going to use We have the bold italic component
3:14:03
the list toggle component the insert thematic break component and then
3:14:09
finally the insert table component There we go So these are all the different ways that they can modify our code
3:14:14
inside the toolbar section So these are essentially enabling the feature in markdown and this section is enabling
3:14:20
the button for them to interact with that in the toolbar itself And that's all we need to do to get the editor to work You can see it's really just about
3:14:26
plugging in a bunch of different things Now we want to make sure that we import everything properly So let's go over
3:14:31
here and make sure that we import this particular component And we should hopefully be able to see it show up on the side of our page We have a few
3:14:38
problems with our TypeScript code or not our TypeScript our Tailwind code Does this need to be imported maybe up here
3:14:44
down here or maybe our import didn't work properly no Looks like our import worked We may need to restart our server I'll try that just to see if that works
3:14:50
real quick because we did add a brand new plugin That could be something that kind of messes with the tailwind It's not sure how to handle that So let's try
3:14:56
to refresh that to see if that works properly And of course the issue is I forgot a semicolon at the end of my plugin That should hopefully fix the
3:15:02
issue There we go Now everything works Obviously as you can see our styles are not perfect here I want to go ahead and add my own custom styles to make this
3:15:09
look a little bit better So inside of here we can scroll all the way down to the very bottom inside of our base layer
3:15:14
And I want to add specific styles for my NDX editor because there's a bunch of different things that we can actually style built into the editor So we can
3:15:20
for example style the root content editable And for this section we're actually
3:15:26
going to be applying a ton of different styles because these are essentially all the styles that Tailwind removes by default We're going to be adding back in
3:15:32
Now I'm going to go through what each of these is doing but if we save we should hopefully at least see something showing up a little bit better on the side of
3:15:38
our screen in a little bit But essentially what we're applying is we're adding a border to this by giving it the input color So it's just a color We're
3:15:44
saying that if it has focus visible we're adding another border around it that's a little bit better Essentially I just copied the styles from the tail or
3:15:50
from the shad CN input and paste them into here So you can see here we're adding a ring around it So essentially a focus state We're giving it a little bit
3:15:57
of rounding on the edges No rounding on the top because we have a toolbar that's going to be on the top We get rid of any
3:16:02
background that it has Add a little bit of padding Give it a shadow And then finally we're just doing a little bit of an animation on the colors and the box
3:16:08
shadow and so on And also here we're adding more of that ring around it And then some just disabled properties and
3:16:14
so on So for the most part I just took the Tailwind or the Shad CN input component styles pasted them into here
3:16:19
and then modified them slightly Also I want to come in here with one simple style and I just want to remove the
3:16:25
outline from other elements that are going to be rendered inside of here This just helps to remove some outlines that
3:16:30
are there from the styling of the actual application that we don't actually need Now also to make sure we get some default styles as well I'm going to go
3:16:36
into our layout for our entire page Right below where we import our global CSS I'm going to import the styles for
3:16:42
this markdown editor as well That'll give us a bunch of default styles So at least we have some styles being rendered
3:16:47
And if I give this a quick save we should hopefully see some of our other styles being rendered as well I don't see our styles being applied though And
3:16:52
that's I believe because this should have no hyphen between it It should be one word And now if I give that a save you can see it just added some of those
3:16:58
styles We get the nice focus state around it Essentially the exact same thing as we get for the inputs up here You can see I pretty much just copy
3:17:03
pasted it Now our toolbar looks terrible So we need to make sure we styled that next So let's come down here MDX editor-
3:17:11
toolbar Luckily the styles we need to apply are much more minimal So we'll come in here We'll add a background of the card color Border of the card color
3:17:19
We'll give it a rounded medium style We're also going to make sure that we round it Border on the bottom is none
3:17:25
And we're going to make sure that's marked as important because we need to override the styles built into it Shadow is going to be small And then we're
3:17:31
going to make sure these elements wrap on a really small screen size So you can see that just kind of cleaned that up a little bit And if I go to a very small
3:17:38
screen size you can see my elements are just wrapping down to the next page instead of overflowing my container
3:17:43
Finally the last thing I want to do is to make sure my popup right here works properly So I can come into here MDX
3:17:49
Whoops MDX editor
3:17:55
popup container We're going to set that to be
3:18:00
a zindex of 50 just so that if we're in like a dialogue or something it properly shows up over top of everything And then
3:18:07
finally you'll notice our dark theme inside of here does not work properly So let's come in here We're going to select that dark theme class and we're going to
3:18:13
change the base page background variable which is a variable built into the
3:18:18
actual MDX editor that we can change I'm going to change it to that muted variable I'm going to set that to
3:18:23
important So now if I just give that a quick save notice I'm getting an error I believe it's because I have a space here
3:18:29
that shouldn't be here Essentially flex wrap has a space between it maybe Let me see Flex wrap There we go I just had a
3:18:36
interesting space there that shouldn't have been there So now you can see that that has worked and that this has now changed to that dark color when we're in
3:18:42
our dark theme which is what we want Now the last thing we need to do is just add a button for submitting this form So we're going to go back to our job
3:18:47
listing form Scroll all the way down to the very bottom here and we can add a simple button
3:18:53
This is going to be nice and easy part of our application where we add in a button It's going to be disabled
3:18:59
if we are currently submitting our form So formstate issubmitting
3:19:06
There we go That make sure it's disabled We're also going to set the type of this to be submit Even though that's the
3:19:12
default I like to be explicit And then we're going to make sure it fills the full width So we'll set the W to full So
3:19:17
now we have that button down here Let's add some text inside of here that says create job listing Just like that So now it'll create a job listing when we click
3:19:24
on that button Right now it doesn't do anything but you can see we do get our errors at least which is really nice Now one thing you notice is these are not
3:19:29
super nice error messages String must contain at least one character Let's go ahead and actually try to fix that up a little bit We'll go into our schema and
3:19:37
where we have our min we're just going to say required So that way it's a little bit nicer of an error message for those So now if we click create you can
3:19:44
see it just says required required required for non- remote listings and so on Now one thing I'm noticing is my state error message is not showing up I
3:19:50
most likely forgot to include it inside of my job listing section So let's go back to that form where we were just
3:19:55
working inside of I'm going to go wherever I have my state which is this second one So this is the city And then
3:20:01
here's my state abbreviation And I most likely just forgot to put my form message down here which I did So now you can see that's showing up properly There
3:20:07
we go Fixed that little error that we had Now the very next thing is to make sure the rest of our button is working And I want to add a loading state when
3:20:13
we're in the loading state for this button Right now it doesn't do anything but we can imagine that this onsubmit
3:20:18
function it's going to be asynchronous and we're just going to make it do a simple wait So we're going to say new
3:20:24
promise resolve set timeout resolve 1 second So now you can see this button is
3:20:30
going to be disabled for 1 second whenever we click on this particular button Obviously we need to make sure our data is set properly So let's just
3:20:36
come in here and set some information Click create You can see it's disabled for 1 second and then it comes back to normal Now we want to add a little bit
3:20:42
of a loading state to this So I'm going to create a function or custom component called loading swap which is going to
3:20:47
take in an is loading property which we already know is based on our form if it's submitting or not So what this is going to do is it's going to return a
3:20:53
loading spinner or it's going to return whatever text we have inside of here depending on if the loading state is true or false So let's go ahead and
3:20:59
create that component We'll come into our components folder because this one's kind of generic So we can just create it here
3:21:06
Export function with that name And we know is loading is the only variable that we care about inside of here
3:21:15
and it's going to be a boolean Also I guess we have children so we might as well use those as well
3:21:23
There we go Now this loading swap is going to be using one of my favorite features built into CSS for when you want to make something an equal size as
3:21:30
another thing So like when I want to swap between two different things and I want to make them equally sized this is going to be the perfect place for doing
3:21:36
that So I'm going to come into here I want to return a div And this div is going to be a grid I want to center all
3:21:42
my items So we'll say item center and justify center just like that And we'll say
3:21:48
actually specifically justify items center So perfectly centered inside of our container I'm going to have another div This is going to be a class name
3:21:54
We're going to put a bunch of class name stuff inside of here Whoops Make sure I get that down on the new line there Close that off There we go I want to
3:22:02
call CN specifically because I'm going to take a column start of one a column
3:22:07
end of one a row start of one and a row end of one
3:22:13
Start one Just like that So essentially I'm saying this div takes up my first cell in my grid I now want to copy that
3:22:19
down and do the exact same thing for a second grid I want them both to take up the exact same space in my grid This way
3:22:25
they overlap each other and I'll only show one element at a time The nice thing about this though is when I swap one element for the other element it'll
3:22:32
make sure whatever the larger of the two elements is is how much space this thing will take up This is really important
3:22:38
because normally when you swap your text in a button the button will change size But with this particular case we won't
3:22:43
have anything changing size when we swap between them I'll show you exactly what that looks like once we finish writing out the rest of the code So in the is
3:22:50
loading state this one I want to be invisible when we're loading So we're going to say invisible Otherwise it's
3:22:55
going to be set to visible So invisible makes it so it doesn't show up on the screen doesn't show up for screen readers but it still takes up space and
3:23:02
that's the important part It takes up space without actually being on the screen That's how we make sure the button doesn't change size Then finally
3:23:09
I'm actually going to have the ability to pass in some custom class names So we'll come in here with class name just like that Paste it down and we'll make
3:23:16
it an optional string Again this is something I do on almost all of my components And this is where we render out our children So by default if we're
3:23:23
not loading we render the children Otherwise I essentially want to do this exact same thing inside of here So if
3:23:28
we're loading this one is going to be visible Otherwise it's going to be invisible I think we need to put one
3:23:34
more div in here to make this work No we don't have to It's just getting some weird styles Oh cuz I need to return up here There we go And inside of here I
3:23:40
want to return a loading icon So I'll say loader to icon We'll say the class
3:23:45
name on this is going to be animate spin There we go So now we're gonna get a nice little spinning animation in the
3:23:51
case that we're loading So let's see if this actually works If I click on this button you can see of course I need to pass in some information We'll make that
3:23:57
a remote job There we go Create job listing You can see it spins and then it goes back to normal Now to show you how this actually works in the case of
3:24:03
buttons being a different size we'll remove this full width So you can see the button is exactly the size of our create job listing text When I click on
3:24:09
it you can see the size of my button does not change when I change that loading spinner state While if I
3:24:15
actually was just swapping the text you'll see that I get an error So for example I'll come in here and I'll just swap the text with nothing else none of
3:24:21
our other fancy tricks that we did So here we go If we are submitting the form then I want to do that loader to icon
3:24:29
Otherwise I want to do my text that I had right here There we go Comment this out So now you can see our button still
3:24:36
looks the same right now If we go ahead and we submit some information click create you'll see how my button shrinks down in size because of the fact that
3:24:43
I'm swapping the text without keeping the original size of the old thing That's why I really like this loading
3:24:48
swap component I use it all over the place in different applications It's a really neat trick to be able to keep your button the same size Now for this
3:24:54
component it doesn't matter as much because we're going to be using a full width button but it still does give us the nice little spinner Now let's go
3:25:00
ahead and actually make this do something when we submit it Because right now all that's happening is it's logging out some data and doing a fake
3:25:05
weight which we don't really want We want to actually submit this data and saving our database So inside of the
3:25:10
folder where we have our job listing actions I want to create a new file called actions.ts And this is where we're going to put our
3:25:16
actions that we're going to use and this is use server So these are our actual server actions We're going to export an
3:25:21
async function called create job listing This is going to take in unsafe data
3:25:27
because we don't know that this is safe data It's coming from the client It could be a bunch of bogus data We don't know So we need to make sure we actually
3:25:33
test this data but we know it should hopefully be in the type of job listing schema So we can say job listing schema
3:25:42
and this should say type of There we go Close that off So that's the shape that we hope that our data is supposed to be
3:25:48
in because it's coming from our client But we don't know if that's the shape that the data is going to be in Now what I want to do is first get the
3:25:54
organization for the user So we can say org ID is equal to a weight get current organization Just like that Then if our
3:26:02
org ID is equal to null well obviously we can't create this So we'll return an error down to the user We'll just do it
3:26:08
as an object that says error true message And the message will just be a
3:26:14
simple thing that's like you don't have permission to do this or something along those lines You don't have permission to create a job listing Then what I want to
3:26:20
do is I want to get my success and my data by checking to see if this data matches our schema So we'll do a safe
3:26:26
parse on our unsafe data Then we can check to see if our success is false If
3:26:31
success is false well then there is just going to be an error So we want to return that to the user There is an error creating your job listing Finally
3:26:37
we can go ahead and actually insert the job listing because we know that we have an organization We know the data was successfully parsing our you know schema
3:26:44
so it matches our schema So we can say that we want to get a job listing by calling insert job listing It's a
3:26:52
function we're going to create in a little bit We'll pass along all of our data We'll pass along the organization ID and the status for this is going to
3:26:59
be draft because it's going to be the first instance of this Finally if that was all successful then I want to
3:27:04
redirect the user to the employer/job listings
3:27:10
slash whatever the job listing ID is So we can redirect them to that new page Now we want to create a database
3:27:16
function for this So inside of our database we have job listings right here And I want to create that insert function So I'm just going to copy from
3:27:22
our users because it's going to be pretty similar So right here copy that code from user Go into here This is
3:27:27
going to be insert job listing Just like that our job listing table
3:27:34
Same thing here Make sure I import my database There we go My value here is
3:27:40
going to be my job listing And we want to revalidate my job listing
3:27:47
cache based on the job listing ID But we also need the organization ID Luckily we have that though So we can say ID
3:27:55
and organization ID is joblisting.organization ID There we go So now we're properly
3:28:00
revalidating everything It looks like here I'm getting an error cuz my ID here could be a string or undefined So I need
3:28:06
to make sure I get the ID returned from here instead because when I create an job listing it doesn't always have an ID
3:28:11
So we can just say here const new listing This is going to be in an array because when you call insert it always
3:28:17
returns to an array We don't need to worry about on conflict do nothing So we can completely remove that line But we
3:28:22
do want to return specific values In our case I want to return an ID which is my job listing table ID And I want to
3:28:30
return an organization ID which is my joblisting.organization ID So now I can pass in my new listing
3:28:36
here And that's going to pass along that information And I can also return this data as well So now I have my new
3:28:41
listing which is just an ID and an organization ID that allows me to revalidate my code And then where I'm
3:28:47
using this actual function which is directly here inside my action I'm getting that job listing and using the ID specifically returned from it So you
3:28:54
can see if I spell this properly now everything is hooked up and we should be able to actually create a job listing by doing this and be redirected to the
3:29:00
correct page if everything works successfully So what we want to do is we want to go all the way back to where we have this form right here and inside
3:29:07
this form is where we're going to do our code So instead of doing this await of a promise I want to actually call this function which is going to be called
3:29:13
create job listing I'm going to pass along my data and we're going to get a
3:29:18
response by calling a wait on that Now this could return to us an error so we should probably handle that So if our response is an error then we want to
3:29:25
render out a toast message And we're going to use shad CN for this again So we can come in here go all the way down
3:29:30
to where we're importing our shad CN components We want to do our shad CN component right here This one is going
3:29:36
to be our sauner component which is the toast library that we're going to be using Make sure we force install that
3:29:41
Everything else should work properly There we go And now what I want to do is I want to call toast which comes from
3:29:47
sonner There's an error version of it And I want to pass in my message So now if we have an error it's going to return to us that error message So we can
3:29:54
actually test to see what this looks like with an error first So inside of my actions here I'm just going to say if my
3:29:59
org ID is not equal to null it's going to return an error So it should return an error every time because we do have an organization ID So if I click create
3:30:05
job listing you can see it rendered real quick but it looks like it didn't quite do what we expected it to do Actually I
3:30:11
believe it did work but we actually need to make sure that we render our toast properly by going into our layout for our entire application And down here
3:30:18
somewhere in our body we need to render the wrapper for our toast to render So we can just say toaster just like this
3:30:24
And this is where our toast are going to render Now hopefully if we change around what our code looks like to actually render something click create You can
3:30:30
see you don't have permission to create a job listing Shows up right here as our error text So let's go ahead and change that back so it actually does succeed
3:30:37
because we obviously don't have an error in this particular case And I want to create a brand new job listing We'll call it front-end developer We'll say
3:30:44
that it's a remote job And we'll just say test description And we might as well make that into a heading And actually it looks like when I do that
3:30:50
that the text color is incorrect That's not what we want our text color to be We'll fix that actually Now let's go
3:30:55
into our global CSS And we want to make sure that the text color for everything is going to be inherit And actually when
3:31:00
I dive into the error it's specifically dealing with tailwind and not actually the MDX editor It's that the tailwind
3:31:06
styles for my pros inverted are not being applied properly So let's make sure we go back to my markdown editor
3:31:12
This is where I'm checking my dark mode properly That's fine my markdown class names It should be getting my dark mode
3:31:18
and inverting that with this pros invert But it looks like this is not working as I expect Now I'm not 100% sure why it's
3:31:23
not working in this particular case but one thing that we can do to make it relatively easy is if we're in dark mode
3:31:29
we can just set pros invert manually just like this And that'll at least invert those colors for us And we can
3:31:35
see we have a test description with some stuff underneath of it And that's working fine I'm not 100% sure why Tailwind is not picking up on that
3:31:41
properly but at least we have a workaround So now let's go ahead and create that job listing And you can see it created it and we got redirected to
3:31:47
the page We just don't have a listing page for this yet So to at least get it so we can see what's going on on our page Let's go over to our job listing
Employer job listing page
3:31:53
section Let's create a new folder We'll call job listing ID Inside of here we'll create a page.tsx We'll just export a
3:32:01
default function Job listing page And this job listing page is going to return
3:32:08
null So at least we can just see something on our page We have our sidebar showing up and it's all rendering properly within it which is
3:32:13
great So now let's work on this job listing page Then we can work on editing and that's going to give us a great starting place to be able to build out
3:32:19
the rest of our application rather quickly hopefully So let's create a function here for our suspended page
3:32:24
There we go And then we have our job listing page up here which is going to take in our params And we know that
3:32:29
these params are going to be a promise So we can say params just like that And then we could type out whatever our
3:32:35
params are And we know that it's going to be a promise that returns to us a job listing
3:32:43
ID as a string There we go Close that off Now we have our params And essentially I just want
3:32:49
to wrap this in a suspense There we go And I can say job listing And actually I
3:32:55
called this suspended page There we go And the suspended page needs to take in our params So imagine we'll make a type
3:33:01
called props And that props type is just this There we go And then I can just call this props
3:33:12
There we go And now what I can do is I can say that I want to get my params down here
3:33:18
from my props type Now what I can do is I can first check to see do we have an organization because if we don't
3:33:24
obviously we have a problem So we'll get the current organization Make this a little bit bigger so it's easier to see And if we don't
3:33:33
There we go If that's equal to null then we can just return null because we shouldn't be able to get to this point We could return undefined or not found
3:33:39
or whatever we want We're just going to return null because again we shouldn't be able to get to this particular place without an organization
3:33:46
Then we're going to get our job listing ID by calling await params
3:33:51
Next we want to get our job listing There we go And that is calling await
3:33:56
get job listing which is a function we'll create where we pass in our job
3:34:02
listing ID as well as most importantly the org ID because we only want to be able to render job listings for specific
3:34:08
organizations If you're in an organization you can't access someone else's job listings So if job listing is
3:34:14
equal to null well then we'll return not found just like that And then finally we
3:34:19
have that function get job listing It's going to be an asynchronous function Takes in a job listing ID and an
3:34:27
organization ID Just like that Might as well just call this org ID Save us a few characters
3:34:35
We're going to cache this And for the cache tag on this one we're specifically going to be getting the job listing ID
3:34:42
tag And we'll pass it in that ID which we might as well just call it ID There we go Then what we can do is we can
3:34:47
return database.query query job listing table
3:34:53
not the application table There we go Find the first and we want to specifically get it where two different
3:35:00
things are equal So we have our job listing table ID is equal to our ID and
3:35:06
then also where our job listing table organization ID is equal to our org ID
3:35:13
There we go We're just checking to make sure that both of those are true before we get our job listing information So then once we have a job listing well we
3:35:20
can actually render out what that job listing should look like So let's do a quick return here with a div This class name is going to be space y6 to space
3:35:27
out all of our different content vertically We're going to make a maximum size of 6xl so it doesn't get too
3:35:33
terribly large on really large screen sizes Make sure it's centered And then we're also going to be using some
3:35:38
padding as well And we're going to put this inside of its own container again to do some container queries on Next
3:35:44
we're going to have a div that's going to contain even more information like our header type information So this one we're going to have a class name of flex
3:35:51
We're going to put the items in the center We're going to justify some space between these items a gap of four to
3:35:57
give them quite a bit of space from each other And on a max screen size of 4 XL so a quite large screen size we're going
3:36:03
to convert this over to a column based layout And again on the max screen size of 4 XL we're going to change the items
3:36:09
to be at the start instead of in the center So this allows us to have the things that would be side by side instead be vertically stacked So that
3:36:16
way all of our job information is going to be vertically stacked with all of our buttons Those are the two different things we're going to put inside of here
3:36:22
So this first section of our div is going to contain all of our job information And the second div is going to change all of our buttons for editing
3:36:28
updating deleting so on all that different stuff So inside of here I want to have an H1 which contains our job
3:36:34
listing.title Just like that And I want to add some classes to this so it's a little bit easier to see So we can say
3:36:39
text to XL font bold and we're going to change the tracking to tight to put the letters a little closer together So now
3:36:45
if I save you can see front-end developer is showing up at the top Next I want to have a div that's going to contain all the different badges that we
3:36:51
have So going to put a class name flex flex wrap
3:36:57
a gap of two and a margin on the top of two And then here is where we're going to render out our badges And of course
3:37:02
we need to make sure we import this from Shad CN So let's add the badge component as well And we'll need to make sure we
3:37:08
force that most likely There we go So now we have the ability to actually render out a badge And let's just close
3:37:13
that off for now And inside of here I'm going to call format job listing status
3:37:19
There we go And this is going to take in my job listing status So this is going to be like active published and so on So
3:37:26
import this badge just like that And let's create this format function for us I'm going to kind of close out of all these tabs we're not using now just to
3:37:33
clean up some space Again minimize this down into our job listing formatterers and we're going to create a formatter
3:37:39
for that Now I'll just copy this over because it's just like all the other ones Again
3:37:45
we're just doing essentially a loop through to make sure we change the value to something that is more readable in
3:37:51
English than like underscore published There we go So now we can format that job listing status so we at least get
3:37:56
the first badge showing up And I'm actually going to change the default styles for a badge cuz I'm not a huge fan of how they look by default So we're
3:38:02
going to go into our badge here and specifically I want to scroll up to all these variant styles up here So first of all the thing that I want to do is I
3:38:08
want to add a brand new variant specifically for size So inside of here I want to add a variant for size We're going to have a small size which is
3:38:14
going to be text extra small We're going to use this to make our SVGs a certain size So we're going to say SVG
3:38:22
size 3 We're going to do two padding on the right and left And then padding on the top and bottom is going to be 0.5 So
3:38:29
rather small I'm going to copy that down a couple times because it's going to be pretty similar We're just going to be changing around the values for medium
3:38:34
and large Now small is what the default is from shad CN I'm going to make our default medium instead So we're going to
3:38:41
have slightly bigger than normal sizes for our badges So here text of small
3:38:46
This is going to be a size of four We're going to use a padding of three here and a padding of one here This will be 1.5
3:38:53
This will be five or sorry four and this will be five And then finally our text is going to be the base size here So at
3:38:59
least we have all of our sizing done Now up here we just need to remove essentially all the things that deal with sizes So like padding on the left
3:39:05
and right we need to get rid of that Text small we need to get rid of that Also we need to come through here and make sure that our SVG sizes are removed
3:39:12
So we'll get rid of that And I think that should be about everything that we need to get removed You can see immediately when I save that we have a
3:39:18
larger size here because by default our size is now medium which is larger than the normal default size in Shad CN So
3:39:23
now we can come back through here and get the rest of our badges that we want But we're actually going to be using these badges in a lot of different page
3:39:29
places in our application So I'm going to export them into a separate component Job listing badges And this is
3:39:35
essentially just going to take in my job listing So we'll pass in our full job listing just like that There we go And
3:39:42
now I want to create this component We're going to put it essentially inside of our job listing component section
3:39:50
We're going to export that as a function just like that And inside of here we're going to be taking in that job listing
3:39:57
And we're going to type that as well So we'll say just like this it's going to be a job listing And we could say that
3:40:03
it's going to be the type of our job listing table.infer
3:40:09
select just like that And that will give us all the props for our job listing But we don't want all the props for our job
3:40:14
listing We only want specific ones So I'm going to come through here and pick just the properties that we want And I'm
3:40:19
actually just going to copy down the different properties that we want So I'll paste that in Again mostly just so you don't have to watch me type it all
3:40:25
out But we're going to be getting a wage based one a state and city based one a type based an experience level location
3:40:30
requirement and if it is a featured job or not Those are the things we want to show in our job listing sections Next
3:40:36
what I want to do is I want to get my badge props because we're going to be rendering a bunch of badges with all the
3:40:41
exact same props So we're going to get our badge props to give us type safety We're going to say that it's going to satisfy the component props for the type
3:40:50
of badge just like this There we go That way at least we get some autocomplete
3:40:55
inside of here And specifically I want the variant for these all to be outline And I want to add some specific class
3:41:01
names for them And the class name here is going to be that if it is featured And let me make sure that I change that a little bit So it should be I can just
3:41:08
come up here Job listing is featured There we go That way we extract out that prop So if it is featured then what I
3:41:14
want to do is I want to make my border primary 35
3:41:22
And actually I want to change why this is happening The reason I am putting this border on here is because when I
3:41:27
have these details on a job listing that's featured the featured job listing has a different background But that's only in one place in our app not all the
3:41:33
places So instead like I do with most of my components I'm going to take in some custom class names So we'll come in here
3:41:38
We'll add in our own custom class name section We'll make this a string that is optional and instead I'm going to pass
3:41:45
in some custom class names here So we can say that our class name is just going to be equal to whatever those custom class names are So now we can go
3:41:51
ahead and actually define what all of our different stuff is going to look like So we can come in here with a return and we want to just return a
3:41:57
bunch of different badges So let's come in here with a badge just like that Make sure we close that off And then we want
3:42:03
to put our text inside of here Let's put format wage as our first one So not format wage interval This is actually going to be format wage which takes in
3:42:09
our wage and our wage interval Make sure I spell all that properly
3:42:14
There we go And these should be coming from up here So let me say wage wage interval There we go Whoops
3:42:22
State abbreviation city type experience level location requirement There we go
3:42:28
And we can move is featured down to the bottom That way it's in the same order as it is down here So there we go Now we
3:42:33
have this format wage function that we're going to want to create First of all let's take our badge props though and pass it along here So all of our
3:42:39
badges would look exactly the same And we also want to only render this if we have a wage So if wage is not equal to
3:42:45
null and wage interval is not equal to null then we can render out this
3:42:50
component Otherwise don't render out this badge So now let's create this as our formatter
3:42:55
So inside of our formatter we'll export a function called format
3:43:02
wage which takes in a wage and a wage interval which is a wage interval There we go I'm
3:43:09
just going to copy the code in for this one again because it's rather straightforward All we're doing is we're creating an internationalization number
3:43:14
formatter in the English format because this is an English US-based job board We're styling the currency as US-based
3:43:20
currency with no decimal points unless they are actually needed And then if it's hourly we put per hour at the end
3:43:26
Otherwise we just render the yearly wage as is because most people when they see a salary assume it's a yearly based
3:43:31
salary Now we can come in here say format wage get rid of that We can come over here import this So at least we
3:43:37
should be able to see that badge showing up And right now I don't see anything And that's because this job doesn't have any salary associated with it Also
3:43:44
inside of my badge I want to add an icon So we're going to say banknote icon just so we have a little bit of an icon that
3:43:50
shows us that this is a moneybased icon that we want to render on the screen I then am essentially going to copy that
3:43:55
and do the exact same thing for state So if our state
3:44:00
abbreviation is not equal to null or our city is not equal to null then we want
3:44:06
to render out the city version And for this one I'm going to use a map pin icon
3:44:11
There we go And for the class name on this one I'm going to put a size of 10 just because this one is a little bit
3:44:16
smaller of an icon So I want to bump it up a little bit to make it look more in line with the rest of our icons Now the reason I'm allowing this to work if
3:44:23
state abbreviation is equal to null or if city is equal to null Let me make sure I get my parenthesis right on this
3:44:30
There we go The reason I'm allowing either to be null and only one needing to be allowed is because you could specify just a state like this is just a
3:44:37
job for California or you could specify a city and a state or even just a city But honestly that's probably not what's
3:44:42
going to happen very often So now we want to create a format job listing location that's going to take in those
3:44:49
properties So we're going to have our state abbreviation and our city that we're going to pass into this function
3:44:54
And again we just want to create that function And this is going to take in those two
3:45:00
parameters state abbreviation which is a string and city which is a string Make sure I get
3:45:07
my spacing properly And the important thing to note is they technically could be null So we want to
3:45:13
make sure it's either that or null that passes in So if my state abbreviation
3:45:18
equals null and my city equals null well then I'm just going to return the text none because we don't have anything
3:45:24
passed in for the location Otherwise I'm going to create my location parts as an array And I want to first check if city
3:45:31
is not equal to null Then I'm going to take my location parts and I'm going to add in my city There we
3:45:39
go I'm going to do the exact same thing with state Just like that But this one's a little bit different because this is a state abbreviation Actually it's going
3:45:45
to be exactly the same because we don't actually really care much We just want to make sure we convert this to uppercase There we go Going to put that
3:45:52
inside of curly braces so it's a little bit more clear what's going on So I'm converting my state to an uppercase version And then finally I'm going to
3:45:58
take my location parts and I'm going to join them on a comma with a space in between So if we pass in just a city
3:46:05
it'll show just the city If we pass in just a state it'll show just the state If we pass in both of them it's going to
3:46:10
show them with a comma in between them which is exactly what we want So now we can get our location And if we give that
3:46:15
a save again nothing shows up because we don't have a location specified for this particular element Now we can copy this
3:46:20
down again for our next one And this one is going to be for the format job location Actually I just call it
3:46:27
location requirement There we go So we want to get our location requirement And we want to format that And our icon for
3:46:34
this one is going to be the building icon There we go We don't need to worry about putting any custom size on this
3:46:39
And now as you can see that is showing up which is looking really good The next thing that we can focus on is going to be the job type So we can say format job
3:46:47
type And this is going to be the type There we go And this one is going to
3:46:52
have an hourglass icon There we go So we can see this is a full-time job And then finally let's
3:46:58
come in here with one more graduation cap icon format experience level There
3:47:04
we go And this is our experience level And again now you can see that this is for a junior developer job Now the last
3:47:09
badge that we want to put in is the is featured badge So we can say if is featured then we want to render out our
3:47:15
own badge inside of here So we can say badge just like this This badge is going to be
3:47:20
a little bit different because it's not going to use the same styles as all the rest of them It'll say featured inside of it but we want to modify what our
3:47:27
badge props are real quick So we could say badge props Then we want to specify what the class name is going to be
3:47:33
specifically This is where our code is going to get a little bit more complex We're going to come in here with our class name And we're actually going to
3:47:38
put in our default class names first the or not default the ones that we custom pass in because we want to make sure
3:47:43
that this specific badge has things overridden So we want our border to be our feature color which is going to be a
3:47:50
style that we're going to create in just a second Also we want to make sure our background is going to be that same exact featured color but we want this
3:47:57
one to essentially be a partially transparent one of 50 Finally our text is going to be the featured foreground
3:48:03
color And now all we need to do is to create these specific colors for this badge Now currently this is not a
3:48:09
featured job So we see it's not showing up I'm going to change this to not featured And now you can see that it is showing up right there It's saying
3:48:15
featured Now to get our featured colors what we want to do is we want to go into our global CSS We're going to scroll
3:48:20
down to kind of where we have our accent And instead I'm going to add a brand new style We'll just do it directly above here And this is going to be for
3:48:26
featured Now this is the light style It's going to be a purpley-ish color And I'm going to do the exact same thing for
3:48:32
our dark styles as well I'm just going to be copying the styles over I just went to a color picker to find these particular styles but it's a kind of
3:48:38
purplish based color So now we have those inside of there If we give this a refresh you'll see it's still not quite hooking up properly And that's because
3:48:44
all the way up here where we define our theme we need to also define our theme up here So I'm going to make sure that I copy the correct one here Paste that
3:48:51
down And then where it says accent I'm going to change that to featured Now if I get that to save you can see that's changed to that purple color that we
3:48:57
created And we have a different color for our light mode and our dark mode just to make sure it matches well with all of our different backgrounds So that
3:49:03
right there if we go back to our page handles essentially the left-hand side of our page Now we can minimize this down and we can work on what is going to
3:49:09
be the right hand side of our page inside of this section So first of all this is going to be a bunch of buttons So we're going to align them in the
3:49:15
center a gap of two And if this section is empty I'm going to add a negative margin on the top of four Now this may
3:49:22
seem really weird but the reason that this could be empty is because only users that have the ability to edit job
3:49:27
listings are going to have buttons in this section So if they can't edit things this will be completely empty But
3:49:32
because we have a gap of four set up it'll still add a space of four underneath of this element even though
3:49:38
this div is empty So this div is empty we essentially are removing that margin on the top by rem or we're adding or
3:49:44
getting rid of margin on the top to essentially offset this gap right here So really all this is doing is if this has no buttons we're essentially
3:49:50
pretending this div doesn't exist Now the reason we can't wrap this inside of our check though is because we have like four or five different buttons and each
3:49:56
one has different permissions So it would be unwieldy to wrap the entire thing in a check So instead we just add this empty property which does the same
3:50:03
thing for us Now before we start dealing with permissions and everything I just want to first add a simple button so we can kind of see what we're dealing with
3:50:08
So we're going to add in a simple button here This is going to say as child and this button is going to be an outline
3:50:14
button There we go Make sure that I actually render this properly by importing it And
3:50:20
we'll make sure we import it from the correct location And here this is going to be a link that's going to go to the edit page So we'll come in here get a
3:50:26
link that brings us to the edit page which is going to be slash employer/joblistings
3:50:33
And we want to get our job listing ID Whoops Joblisting ID There we go And
3:50:42
we want to go to the edit page specifically Now we can come inside of here I want to use the edit icon There
3:50:49
we go And then what I want to do is I want to have the text edit And the size
3:50:54
of my icon is going to be four So we'll just come in here Size of four Give that
3:50:59
a quick save And now you can see we have our edit button showing up right there And if we're on a large enough screen size quite larger screen size I might
3:51:05
have to zoom out just a little bit You can see that the edit button has now moved over to the right hand side instead because we're on a much larger
3:51:11
screen size While if I zoom it in you can see it shows up on the bottom So let's zoom it back in a little bit so
3:51:16
it's easier for us to see Minimize that down over And there we go Now before we start adding the rest of the buttons in
3:51:21
those ones are going to be quite a bit more complicated They have complicated permissions and so on What I want to do is I want to add the section for
3:51:27
rendering out our markdown which goes below pretty much everything that we have inside of here So we can just come down here and we want to render out our
3:51:33
markdown but we only want to render out some of the markdown because if we render out all of the markdown they type in it could be a very large page and we
3:51:40
also want to show all the applications and stuff for the job on the same page So instead we're going to render out just part of the description with the
3:51:46
option to click a button to view the full description So we're actually going to create a component for this called
3:51:51
markdown partial which allows us to render out essentially just some of the markdown that we want So we can have our
3:51:58
dialogue markdown and this is going to be the markdown that is rendered in the dialogue the popup that allows us to view everything and we're going to
3:52:04
create a component which is called markdown renderer and we're going to pass it in a source and the source is
3:52:10
just going to be whatever our markdown is In our case it's our job listing desescription just like that There we go
3:52:17
Make sure I close off that component So now that's our dialogue markdown entirely done I will copy that down for
3:52:22
our main markdown because our main markdown is essentially the same but I'm going to add a class name here And the
3:52:28
class name is pros small All that allows us to do is to use
3:52:33
a small version of text So the main version of our text isn't so large It's a little bit smaller which is really
3:52:38
useful And then we'll add in a dialogue title This is just what the title of our dialogue element will be And it'll say
3:52:44
description just so we know what this particular thing says Now we need to create all these different components So let's create this markdown renderer
3:52:51
first So we can come into our components tab We can go into the markdown folder that we created Create a brand new file
3:52:56
call it markdown renderer.tsx This is going to export a function called markdown renderer Just
3:53:04
like that And this is going to take in a class name some options as well as different props
3:53:12
that we want to pass along And these are going to be using the MDX remote props and we're just going to combine in
3:53:19
our own class name as a string And this MDX remote is actually a library we're going to be using So if we go over to
3:53:25
the code for this library you can see we can just install and next MDX remote which the really nice thing is is this
3:53:32
is a library essentially directly built in to work with Next So it's going to be really good at working directly with Next And we just give that a quick
3:53:39
second There we go You can see that that has worked properly It says if we're using Turboac we'll need to add the following to our Next.js config I didn't
3:53:45
end up having to do that and I was using Turopac Maybe this issue has been fixed but we can just ignore that for now And
3:53:50
the next step is just all the examples of how to get started with MDX remote It's relatively simple The main thing you need to know is this must render on
3:53:56
the server It cannot render on the client So we're going to go ahead We have this component We know it's rendering on the actual server So that's
3:54:03
fine And here let's make sure of course we import our type Looks like I need to manually import this
3:54:10
We want to get that from next MDX remote slash And we want to make sure we get the RSC Because if we're using React
3:54:17
Server components we must import from the React server component version It's very important Now let's wrap this
3:54:22
inside of a div that's going to be using that CN function to take all of our markdown classes So our markdown class
3:54:29
names and then combining them with our custom class names such as making our text smaller Then we have our MDX remote
3:54:35
and this is what allows us to edit everything out or render everything I'm sorry So here is our props that we're going to be passing along And then also
3:54:41
we have our options So the reason that we're extracting our options up here is because we want to pass along some custom options to MDX options So we have
3:54:49
our MDX options just like this Make sure that I put this inside of an object because this allows us to configure what
3:54:55
type of plugins we're using So we have our remark plugins and our remark plugins we're going to be using remark
3:55:02
GFM Essentially this just allows us to use formatting from GitHub things like tables which are not built into native
3:55:08
markdown So what we can do is we can install this library which is called remark gfm We'll just do a quick force
3:55:13
on that to make sure that it actually works And that'll give us that actual thing And then we can take whatever the rest of our options are So we can say
3:55:20
options.m MDX options plugins And if we don't have any options we'll use an
3:55:26
empty string by default Come in here Looks like I might need to manually import this
3:55:32
Remark There we go That's going to be imported properly And then we can also make sure
3:55:38
inside of this MDX options we get the rest of our options MDX options Whoops
3:55:43
there we go MDX options So really all that this custom component we created did is it added in support for this
3:55:49
GitHub flavored stuff that added like tables and stuff And then we added the ability to have our markdown class names
3:55:55
by default So hopefully everything looks the same between all of our different markdown classes Now the next thing we need to do is this markdown partial.tsx
3:56:03
Make sure I spell that properly And this one's going to be a little bit more confusing First of all we have the
3:56:08
markdown components that we said that we need to pass in that we've already dealt with and covered And the reason we're passing them in is because this is
3:56:14
actually going to need to be a client component to be able to handle all of our different resizing and so on because we need to be able to check to see if
3:56:20
things are overflowing So we're going to create a variable called is overflowing and set is overflowing
3:56:27
There we go We'll set that equal to use state and we'll set that to false by default just so we don't have to worry
3:56:32
about anything There we go Then what we can do down here is we can get a reference to where our markdown
3:56:38
container is We'll use a ref for that and this is going to be an HTML div
3:56:43
element and we'll set it to null by default This is going to reference what our markdown container is so we can
3:56:48
handle the overflow related content inside of this Then we'll create a function called check overflow which is
3:56:54
going to take in a node which is our case our markdown reference or whatever So it's an HTML div element just like
3:57:00
that And we can set is overflowing Make sure I put that inside the actual function There we go We can set is
3:57:06
overflowing to the node.scroll height is greater than the node.client height So
3:57:12
essentially if the scroll container size is larger than the client container size that means we have more text than we can
3:57:17
fit inside of the container This is true of any element If the scroll height is larger than the client height that means it is overflowing its current container
3:57:23
Then to make sure that we actually call this check overflow function in the place it needs we're going to be setting up two different effects The first one
3:57:29
is going to be a use effect and the second one is going to be a use layout effect Now this use effect is only for
3:57:34
hooking up an event listener on resize So when we change the size of our window that changes how large our text is and
3:57:40
how tall it is which means it could change if we're overflowing or not So that's what this does Essentially every time we change our window we check the
3:57:46
overflow property Use layout effect is an effect that is run after our page completely renders So after our page
3:57:52
renders all of our text is on it Everything is good to go There's no more changes to be made This then checks hey is this thing currently overflowing
3:57:58
because if so now we need to change around what we're rendering on the page So now comes where we actually render out the content itself So the first
3:58:04
thing I want to render is the div that contains our markdown So we can make this our markdown ref And inside of here
3:58:10
we can add some class names For example we'll have a max height of 300 pixels This is going to be our overflow size
3:58:15
Anything over that is going to be hidden So overflow hidden is going to be set And we're also going to set a position of relative just so we can absolutely
3:58:22
position some overflow styling as well And then I'm going to specify my main markdown just like that So this is
3:58:27
whatever my main markdown container is And if I'm overflowing I want to render some additional content on the page And
3:58:33
this is just going to add a little bit of a fade effect to our animation So add a class name here a background It's
3:58:39
going to be a gradient background to the top is what we're going to do It's going to go from our background color Just
3:58:45
like that And it's going to go to transparent There we go
3:58:51
And we wanted to start this at 15% And we want to make sure we have an inset of zero Absolutely position this
3:58:59
And we're going to say pointer events none Close that off Just like that So
3:59:04
essentially what I'm doing is I'm creating a div that covers the entire size of my main markdown And I want to create a background that goes from my
3:59:10
background color So essentially completely black up to transparent And I want it to stop and be transparent at
3:59:16
exactly 15% So I have a very small gradient at the bottom 15% of my container That's all that this div is
3:59:22
doing I'll show you by disabling this in a little bit what it looks like Next I want to check if we're overflowing I
3:59:27
want to add a button to read more So if overflowing is true well then we're going to add a dialogue in our container
3:59:33
So we'll say dialogue and I need to make sure I import the correct one So we can say dialogue and this is going to be coming specifically from our component
3:59:40
library And it looks like we don't actually have dialogue imported for us So let's go ahead and actually do that inside of Shad CN We can get the
3:59:46
dialogue component Just like that So now we have that dialogue Make sure we force install that And now we should be able
3:59:52
to hopefully import whatever that dialogue is So now we can come back over here dialogue and we can get that
3:59:58
directly from our UI folder which is what we want We also want to get the dialogue trigger
4:00:04
There we go Same exact place we want to get that from This is going to be an as child because we want it to render out a button
4:00:11
The variant for this button is going to be the ghost variant Make sure I get the button imported properly
4:00:18
And I'm also going to add some class names to this of underline so it kind of looks like a link I'm going to remove the margin on the left So by default a
4:00:24
button has a three p or padding of three on the inside But since this is a ghost button I want to remove that cuz it
4:00:30
looks kind of weird with that margin on there And this will just say read more There we go Then inside of here we have
4:00:36
our dialogue content And our dialog content will actually have quite a few class names on it just to make it as wide as possible to fit our screen So on
4:00:43
a medium screen we're going to set our max width to 3XL On our large screen our max width will be 4XL Our max height
4:00:50
will be essentially set to a calculation of 100% minus 2M so essentially almost
4:00:56
the full screen size minus a little bit of space Our overflow will be set to hidden and we're going to make sure that
4:01:01
we stack everything in the flex column direction This is just making sure our dialogue is as large as it needs to be
4:01:07
to fit all the different content that we want inside of it Then we're going to have a dialogue
4:01:12
header and inside of that a dialogue title And as we know the dialogue title
4:01:18
we'll just render out our dialogue title property Just like that And finally inside of here we can have a div with a
4:01:24
class name of flex one This will just grow to fill the full size And the overflow in the Y direction is going to
4:01:29
be set to auto because we want it to scroll if it overflows And this is going to be our dialogue markdown Now if we
4:01:36
give that a quick save and we make sure we import everything we should hopefully see that we are able to render out the markdown for our component So we give
4:01:42
that a quick save Let that refresh over here And you can see that it's rendering out exactly what that content is Now I'm
4:01:49
going to create a brand new job listing with a lot more markdown inside of it So we can come in here I'm just going to add a bunch of different text So we can
4:01:55
see that we have a very large file right there I'm going to give it a bogus job title We'll say it's a remote job And
4:02:00
we'll click create this job listing And now you can see that when I get beyond that 300 pixels of height which if I'm
4:02:06
in a normal zoom level it's not too much of my page that's being taken up by it But you can see once I cross that 300
4:02:11
pixel height barrier you can see I need to click read more and it'll pop it up inside of a dialogue which is exactly
4:02:16
what I want And you'll also see that we have this nice little fade effect at the bottom where I'm getting that small amount of fading That is happening
4:02:22
because if we go inside of our markdown partial this particular section right here if I remove this and I save you see
4:02:28
that fade goes away So that's the whole reason why I put this little bit of a fade in there So now that we've kind of got the bulk of what this page should
Employer job listing edit page
4:02:34
look like minus all the different buttons let's work on the edit page because right now we don't have an edit page which is obviously not great So
4:02:39
we'll create a new folder called edit inside of here I'm going to take my new job listing and just kind of paste it
4:02:44
into here This will say edit job listing page And right now you can see it's kind of just rendering out this stuff We want
4:02:50
this to say edit job listing And really the only difference between this page and the new page is we want to pass in what the current job listing is just
4:02:57
like this So we're going to need to modify our form to accept a job listing And we're also going to need to get a job listing as well So this is also
4:03:03
going to take in some params So we'll say props is equal to props We'll create that type
4:03:10
is equal to params and it's going to be a promise that returns a job Whoops Job
4:03:17
listing ID which is a string There we go Just like that
4:03:23
Now we have our props And the reason I need to do that is because we're going to have an asynchronous function which is our suspended page And that is going
4:03:30
to take in our params of type props There we go So
4:03:36
a lot of this code can stay the same but this particular job listing form section needs to go into here Just like that And
4:03:42
then up here I can render out my suspended page So I can say suspended page just like that There we go I can
4:03:49
also get rid of this section right here because I don't need to worry about that whole posting thing It's just for editing a job listing So we can remove
4:03:54
that And now inside of here we can try to get our job listing So first of all what I want to do is I want to say that
4:04:00
we're going to get our job listing ID by calling await params just like that And
4:04:06
this I need to wrap inside of a suspense There we go We could add some fallback state for loading if we want but in our
4:04:12
case we don't really need to Next thing that I want to do after that is I want to get our org ID
4:04:19
That is just a wait get current organization There we go If our org ID is equal to null this shouldn't happen
4:04:26
but if it is we can just return not found or null or whatever you want It doesn't really matter Then we can get
4:04:31
our job listing that's just going to be wait get job listing with our job
4:04:37
listing ID and our org ID And we've kind of already created this function before
4:04:42
Let me make sure I actually type that properly There we go I think if I just do a quick search for that we should hopefully find a function that's nearly
4:04:48
identical to that Here we go Get job listing I'm just going to copy and paste that over because it's essentially the exact same code So let's import all the
4:04:54
stuff we need and then make sure that this still does exactly what we want it to do Get that imported
4:05:01
And there we go So yeah it looks like this is taking in an ID or ID and it's searching for exactly that So that does
4:05:06
do exactly what we wanted to do which is great Then what we can do we have our job listing If our job listing is equal
4:05:13
to null well then we want to essentially get out of here So we'll return not found because we're on a page that
4:05:19
doesn't exist There we go So now what we can do inside this suspended page is we can add in our props and we can just say
4:05:26
or actually we can just take our props like this There we go That'll pass along everything we need inside that suspended
4:05:32
page Now you can see edit job listing with all the information but it's not pre-populated because we need to make sure our job listing form accepts in a
4:05:38
job listing So in the job listing form this is going to take a job listing
4:05:45
just like that And we're going to have a job listing
4:05:50
Whoops And we need to make sure it is that type of job listing
4:05:55
table.infer select There we go And I want to make sure I only pick the properties that we actually need from
4:06:02
this because I don't need to get every single thing from here So I believe the things that we need from here are going to be title We're going to need
4:06:08
description Description There we go
4:06:16
We're going to need to make sure we get the experience level
4:06:22
the ID We need the organization Actually we don't need the organization ID but we do
4:06:27
need the state abbreviation We need the type
4:06:35
We need the wage And we need the wage interval Hopefully that's everything that we need And what
4:06:40
we can do is we can say hey if we have a job listing we want to use that Otherwise fall back to this And it looks
4:06:45
like we are missing some properties Title description state abbreviation Looks like city is the one we are missing There we go City wage wage
4:06:52
interval experience level that is up here as well Type is up here And location requirement is not location
4:06:59
requirement There we go That got rid of our error So we do have everything properly sent in So now we have all the different properties we need for our job
4:07:05
listing all the stuff hooked up here All we need to do is change this one little section right here because you'll notice if we just refresh our page over here
4:07:12
our title pre-populated You can see it's a remote job full-time our description populated So everything populated inside
4:07:17
of here just like we want Now we want to make sure we either create or we update our job listing So we're going to say
4:07:23
action is equal to and if our job listing is existing then we want to use
4:07:28
update job listing Otherwise we want to use create job listing just like that
4:07:34
and we'll call action and pass it in whatever our data is And then do that same thing with our response This one
4:07:40
we're going to bind the joblisting ID just like that And make sure we pass null at the beginning There we go That's
4:07:45
just going to make sure the first property that gets passed to this function is our job listing ID And now we just need to create this simple
4:07:51
function So here export and async function called update job listing takes
4:07:57
an ID and then it's going to take in all of our unsafe data just like we did up here So we can copy that in and bring
4:08:04
that down And actually our code is going to be pretty similar So I'm going to kind of copy all of this and paste it down because we're going to have a lot
4:08:09
of very similar stuff between the two Kind of the biggest difference between these different things is we need to make sure that we get the actual updated
4:08:16
or the correct job listing So we can create a function called get job listing
4:08:21
just like this It's going to take in an ID which is going to be a string And it's also going to take in an org ID
4:08:28
which is a string And this is something that we've created multiple times It's probably about the third time we've created essentially this exact same
4:08:33
function It's okay to duplicate this function in multiple places because sometimes you may want to query only
4:08:39
specific things about a job Sometimes you may not want to query specific things So it's really not a big deal to have this duplicated in a few different
4:08:45
places which is why I'm okay with just putting this in multiple different places So now you can see we have our get job listing function Let's make sure
4:08:52
that this is async so we can actually deal with the caching properly And now we can scroll up to here where we want
4:08:57
to get that So we can say const job listing is equal to calling that with our ID and with our org ID There we go
4:09:05
And we should call this our updated job listing There we go And we'll render that ID
4:09:11
just like that So this is our job listing We got our ID We have our org ID Here's our updated job listing
4:09:16
information And we're passing in some specific things but we don't need to pass in all of these things For example all we actually want to pass in is the
4:09:23
data I don't want to modify the things like the status and so on Those are not things I want to change So I'm going to call update job listing And this is
4:09:30
going to be the database version Pass in my ID and my data So I can scroll all the way up here where I have insert job
4:09:36
listing I'm going to get my update job listing And I'm going to rename it to update job listing DB So now what I can
4:09:42
do is go to this function I'm actually just going to copy this because it's going to be pretty similar This is going to be called update job listing There we
4:09:49
go It's going to take in an ID which is a string as well as all my job listing information And this is going to be a
4:09:56
partial because we're only doing an update We're not doing a create And I'm just going to copy over this code real quick because we've seen this in many
4:10:01
many different places So we can see inside of here I have updated listing I'm doing an update on my table setting
4:10:07
all my data to this data where my ID is equal to the ID I'm returning the ID and the organization ID That way I can
4:10:13
revalidate my cache down here So that's relatively straightforward We can make sure we import this directly from our
4:10:18
actions And now we should be able to update our job listing properly So if I change this to like a real title and
4:10:24
let's change this to be a little bit smaller and we click create job listing we should see it now says real title and
4:10:29
my description is much shorter Now from here there's a lot of different ways that we can go We can work on this sidebar We can work on implementing the
Permission setup
4:10:36
actual job board section next But I think the next place that I want to work on is going to be a little bit more groundwork and that's going to be
4:10:42
implementing features as well as permissions so we can handle that for the rest of our application instead of
4:10:47
just ignoring it So the way that we're going to be handling permissions and plans and pricing and features is all
4:10:52
going to be built into Clerk It's going to make it really easy for us to integrate with our application So if we go into Clerk we can go over to this
4:10:58
configure section and we have the ability to implement roles and permissions for our organization management And here we have different
4:11:04
roles we can customize as well as different permissions that we can create Now for our application we're essentially going to have three roles
4:11:09
We're going to have the admin role which is like the default role that person that creates an organization has Then
4:11:14
we're going to edit this member role We're going to change this to be an applicant whoops applicant manager role And we can
4:11:22
come in here and we can just say applicant manager
4:11:28
a role We'll just say it's a user who can approve slashdeny
4:11:35
applicants and update applicant details for all job listings There we go Let me
4:11:42
make sure I just spelled that properly And then we can modify any permissions that we want We don't really care about
4:11:48
most of these permissions so we'll just kind of leave this as is And we'll update this role so at least it has a new name and a new description I'm also
4:11:54
going to create a brand new role And we're just going to mark that message so we don't see it anymore And this is going to be a job listing
4:12:02
manager Just like that And this one is going to say job
4:12:07
listing manager Make sure I spell everything properly And for the description I'll
4:12:13
just copy this over There we go It's a user who create update delete and update the status of job listings And again we
4:12:20
can select different permissions I'm just going to use the billing and members permissions That's the same thing our other one had And then we'll
4:12:25
add our own custom permissions from here So now we have an admin an applicant manager and a job listing manager for managing the different things in our
4:12:31
application And this is to emulate what it's like where we have different permissions for different users because some people may only be able to create
4:12:37
job listings some people manage the interview process So we want to be able to separate those into different roles Now we can come into permissions and
4:12:43
this is where kind of the bulk of our application will go with creating brand new permissions So I'm going to kind of copy paste over a lot of the text here
4:12:49
This is going to be for changing the rating of an applicant So the applicant may have one star two star so on This is
4:12:54
allowing users to change that And we got a little description and then I'm also going to copy over the actual description for that There we go It's
4:13:00
job listing applications colon change rating So each of these is going to have the object it performs on as well as the
4:13:05
function that is being performed on that object and let's create that as our very first permission So our applicant manager would be able to do that The
4:13:12
next one is going to be for changing the status So we'll come in here We'll just get all of this copied over Essentially
4:13:18
it's just kind of descriptions and names to make this easier to work with in your UI But you can you know write whatever you want for the names descriptions and
4:13:24
so on And then we are going to have permissions for dealing with our job listings So we want to be able to change the status For example making a job
4:13:30
listing published or to make a job listing so it's delisted draft so on This allows the user to change the
4:13:36
status of those different things We also want to be able to have a permission for being able to create different job listings So we'll come in here with a
4:13:42
permission for that There we go We also want to be able to delete different job listings So we'll create a new
4:13:49
permission for that And then finally we're going to need a permission for updating a job listing as
4:13:55
well So we'll come in here and again just create a permission for that And the only reason I'm copy and pasting this over is cuz this is all just text
4:14:00
that's behind the scenes It doesn't really matter The only thing that matters is what the actual key for our permissions are because those are what
4:14:06
we use inside of our application But the nice thing is now we can assign these to specific roles and we can easily create
4:14:11
new roles based on these different permissions So for our applicant manager we're going to edit the roles that they have and we're going to change it so
4:14:17
they can do all the applicant related stuff So we're going to update that role Then we're going to go down to our job listing manager and we're going to do
4:14:23
the exact same thing We're going to come in here and we're going to change it so they can do all the job listing related stuff We're going to set that as an
4:14:28
updated role And then finally for our admin we're going to want to make sure that they have permissions for all the job listing and all the applicant stuff
4:14:35
And then we can update that rule So they have all the permissions of everyone in our application So now we have our three
4:14:40
different roles set up to be able to use in our application And more importantly we have permissions set up which is something that we can use in our
4:14:45
application to make fine grained control over who has access to everything Now the next thing that we need to work on is going to be the billing section cuz
Billing setup
4:14:51
we're also going to be handling that through Clerk cuz it has a really nice integration with Stripe to make working with it super easy which is really nice
4:14:57
So we can come into the settings for this We can make sure that we have everything enabled We have all of our rules and everything What we want to do is we want to specifically deal with the
4:15:03
billing So we'll go to settings for billing And we want to specifically create plans for our subscriptions And this is going to be specifically
4:15:09
organization billing So we'll go subscription plans We're going to click get started And we want to add an organization plan cuz we're on an
4:15:15
organization This very first plan is going to be called basic We'll give it a slug of basic which is the default We
4:15:20
can add a description if we want but we'll leave that off And we're going to say that this is $100 a month And we can make it so it's $80 a month if you pay
4:15:27
annually and we'll say that this is publicly available And then we can do anything we want with adding specific
4:15:32
features down here So we can add features If you want to be able to interact with permissions you need to make sure that the permissions you
4:15:38
created in our case job listings and job listing applications those are permissions we created We need to enable those to make sure everything's working
4:15:44
We can also add new features if we want So I'm going to come in here with a brand new feature that just says create job listings This is going to be a
4:15:51
publicly available feature We're not going to use this behind the scenes but it'll show up in the actual listing for our job application so they can see what
4:15:57
they can do So we'll create that quick permission right there And we'll also come in here We'll add some more new
4:16:02
features inside of here The next one is going to be manage applicant workflow
4:16:08
Again not something we're going to use on our application but it's something that shows up publicly which is really nice for doing the different things
4:16:13
inside of our features And then finally we can have post one job listing just like that And this is one that will be
4:16:20
used behind the scene to limit which job listings they have access to Finally we want to add those additional two features to make sure everything's
4:16:26
hooked up properly Give that a quick save And now you can see these are the three things on our listing that are going to show up Create job listings
4:16:32
manage applicant workflow and post one job listing Now we can go ahead and we can create some other plans Let's go
4:16:37
back We're going to modify our free plan Our free plan already has these two on it but we don't want to make this publicly available because you can't
4:16:42
swap to the free plan You either just don't have an organization or you have a plan That's really the only options you have There's really no free tier in this
4:16:49
application but we need a free tier just to make sure when you create an organization what are the bare minimums you can do and in our application you
4:16:55
can create job listings You just can't post them until you pay for something So now let's go ahead and we're going to create another plan This one is going to
4:17:01
be called growth We're going to come down to the fee for this one It's going to be $250 a month or it's going to be
4:17:06
$200 a month if you pay annually And then we can start adding in all the different features we want We know that we want these features and we also want
4:17:12
these features We want to be able to post more than one job listing though So we'll add these And then we're going to add our own new features So we're going
4:17:18
to have post three job listings That allows you to post up to three different job listings And then we also are going
4:17:24
to add a feature for one featured job listing And that's because some of our
4:17:30
job listings can be featured which actually show up at the top They're like a sponsored job listing It adds an extra incentive for people to pay more money
4:17:36
for these specific features So now we have all the features inside of our growth plan Now we can go ahead and we
4:17:41
can create what is going to be our final plan And this is going to be our enterprise plan Our enterprise plan is going to be $1,000 a month or we're
4:17:48
going to charge $800 a month if you are on the monthly or the annual payment We want to have all these but we want to
4:17:54
have different numbers of job listings and featured jobs So let's come in here We're going to add a feature This first feature is going to be post 15 job
4:18:01
listings Just like that And then we also want to have a feature that is going to be unlimited featured jobs or job
4:18:10
listings There we go And we'll create that one as well And we'll give that a quick save So now we have all of our
4:18:15
different pricing plans set up as well as all of our permissions set up in our application through clerk All we need to do is implement that into our
4:18:21
application And again we want to make sure that we use features and permissions and not roles and plans because if we use roles and plans that's
4:18:27
going to be ripe with error because we want to change what permissions roles have and so on That's impossible to do So we want to make sure we use the
4:18:34
permissions and the features to make things much more flexible So now back into our code let's implement this particular section We'll minimize all
Permission system
4:18:39
this down We'll go into our services for clerk I have our lib folder right here I'm going to create a brand new file
4:18:44
called org user permissions.ts and it's going to export a simple async
4:18:51
function And this is going to be used for checking the permissions So we can say has org user permissions or just
4:18:59
permission like that There we go
4:19:04
We'll get a user permission This is coming directly from our app We're going to create a type for that
4:19:10
And this user permission is essentially just a TypeScript type that matches the permissions we typed into clerk So you
4:19:15
can see here org job listing create org job listing update or job listing delete and so on Same with the applicant stuff
4:19:20
down here These are the exact values we typed into clerk This just makes sure we have a type- safe way of interacting with all these different permissions So
4:19:27
now that we have all of our permissions we want to get the has function from calling off from clerk That allows us to
4:19:33
check permissions and we can return has and we can pass it in a permission In our case we want to pass in whatever
4:19:38
this permission is super straightforward and easy to work with function I'm now going to copy this because we want to do the same thing but for plan features So
4:19:45
I can come in here plan features just like that And this plan features is going to work pretty much the same up
4:19:51
here We're going to be using our planned features Again the exact same features I typed into clerk one to one exactly what
4:19:57
we have And then I want this to say has plan feature And this is going to take in a feature and it's going to be of
4:20:03
type plan feature And again clerk is really nice It just allows you to input the feature and tell you if the user or
4:20:09
the organization has that permission or that feature in their plan So now let's go through our application and actually start working on implementing some of
4:20:15
these permission checks into the different places in our application where we're using it So we can go into our features folder where we have our
4:20:21
job listings Let's go into our actions here cuz we want to check to make sure we have permission to do these different things such as creating a job listing So
4:20:28
anywhere in here it really doesn't matter Let's just make it down here We're going to do a simple check Actually we might as well do it up here
4:20:33
where we're checking our organization And we're just going to do a quick check that says await has permission There we
4:20:39
go And we want to check a specific permission In our case we want to check can they create a job listing And we can
4:20:44
just wrap that in some parenthesis so we can make sure it's awaited properly And then we can put an exclamation point in the front And that's essentially saying
4:20:50
if our org ID equals null or we don't have permission to create a job listing then make sure we throw an error to let
4:20:55
the user know you don't have permission to do this particular thing We can do the exact same thing down here for update I'm just going to put it right
4:21:02
here but this one is going to be the update version instead of the create version Now again we're checking
4:21:07
permissions properly for this which is exactly what we want Now I did notice as I'm scrolling down we never actually used this job listing that we got to
4:21:13
make sure it existed So we can just come in here if job listing is equal to null
4:21:19
We want to return a new error And we'll just say that there is an error updating
4:21:25
your job listing Same thing here Updating and you don't have permission to update There we go
4:21:31
So now if we go back to our application everything still should work exactly the same If I try to edit this we'll change it to real title 2 I'll click create You
4:21:38
can see it still renders out just fine But if I come in to clerk and I go over to my user permissions and I remove this
4:21:43
permission from the admin user which is what I am We'll come in here We're going to edit the role and we're going to actually remove the permission for
4:21:49
updating a job listing There we go I'm going to update that role So now I don't have permission to update job listings
4:21:54
I'm going to go into the edit page So far we still haven't locked this down I'm going to change it to 22 Click create And I get an error you don't have
4:22:00
permission to update this job listing So immediately we can see that our permission system is working just like we want it to Let me add that permission
4:22:06
back because we do want our admin users to be able to update the job listings And now when I click create you can see it updates to that particular new title
4:22:12
Now one other thing that I want to do just so we can demonstrate what our icons look like I'm going to come in here I'm going to add a city Doesn't
4:22:17
really matter what the city is And I'm going to add a wage We'll just say it's going to be sure that much money And
4:22:23
we'll click create the job listing And now you can see here we have the icon for our location as well as the wage being displayed up here So we have those
4:22:30
badges working like we would expect them to Now we can go ahead and actually make it so that our UI implements these different changes So for example if I
4:22:35
don't have permission to edit it won't show me the edit button So I'm going to go back into clerk I'm going to remove my ability to edit again just so we can
4:22:41
test what this looks like Here we go I've removed the ability to edit Update that RO real quick Come back over here
4:22:47
And you can see the edit button is still showing up And we obviously don't want that to show up So let's go ahead and find where we can change that in our UI
4:22:52
Well we can go into our app We can go into the employer section job listings We want to go to the individual page where the job listing is viewed And here
4:22:59
is where our edit button is It's directly inside of this section We essentially want to do an if check that says if this particular thing is true
4:23:05
render one thing otherwise don't render anything or sometimes otherwise render some fallback value So we want to be
4:23:11
able to have essentially an if check inside of our JSX code that's also dealing with asynchronous code This is
4:23:16
something that's kind of tricky to do So we're going to create a custom component to handle this for us And this custom component we're just going to call async
4:23:23
if And this is going to be a really simple function that takes in a condition that's going to be something that evaluates and it's going to take in
4:23:29
some children and it's going to render those children We also can pass in some loading fallbacks and some like else conditions if we want But for now this
4:23:35
is the most basic use case for our async if So let's actually go ahead and create this component We'll do it inside of our
4:23:40
components folder We'll say async if.tsx We're going to export that function And
4:23:47
again like I mentioned it's going to take in some specific props We'll just type those up here and we'll say that
4:23:53
our condition is going to be a function that returns a promise
4:23:59
There we go So it's going to return a promise that gives us a boolean true or false and it takes in no parameters at all Also we're going to need to take in
4:24:05
some children This is a React node We're also going to take in a loading fallback This is
4:24:12
because we're going to be dealing with asynchronous stuff with suspense So we're going to put in a loading fallback option as well as an otherwise option
4:24:18
Essentially an else condition So like you can say if true do this otherwise do this particular thing So now we have all
4:24:24
the different props that we need inside of here So we can say children let me make sure I type this as props so we get
4:24:30
some nice autocomplete There we go Get rid of my settings there
4:24:35
And we have the otherwise prop So inside of here I want to return suspense We of course need to wrap everything in suspense And the fallback for this is
4:24:42
going to be our loading fallback state Then what I want to do is I want to render essentially the suspended component So we'll say suspended
4:24:51
component function suspended component and this is
4:24:57
going to be asynchronous And this is going to take in essentially all the props we had up here
4:25:03
minus one particular prop which is the loading state So we're going to take our props minus our loading state There we
4:25:09
go And that's going to give us all the props that we have here which are children the condition and the otherwise
4:25:16
clause And this code is really simple All we're going to do is call await on our condition If the condition is true
4:25:22
we render the children Otherwise we render the else condition the otherwise condition
4:25:28
Then we're just going to take our props and pass them into here So we have children which we need to pass in a
4:25:33
different way So we'll say condition we'll say otherwise There we go And then we're going to pass
4:25:40
in our children There we go So now we have this
4:25:45
asynchronous if component Make sure I pass in my otherwise properly There we go So essentially what this is doing is
4:25:51
it loads our fallback when we're loading Then if our condition is true it returns the children Otherwise it returns this
4:25:56
otherwise prop So in our particular case we can say has user permission to update
4:26:02
a job listing If they have this particular permission which we're just going to wrap like this then we want to
4:26:08
render the children Otherwise we don't render anything at all because we don't have an otherwise condition being passed in So now you can see immediately the
4:26:13
edit button has disappeared because I do not have permission to edit that particular button Now if I go into here and I add permission back for me to be
4:26:20
able to edit that So we'll come in here make my screen a little larger so we can actually edit this and we'll go and
4:26:26
we'll add that permission back in We'll update our roll minimize this back down and I refresh my page Now the edit
4:26:31
button is back because I now have that permission Now the next few buttons we're going to create are going to be much more complicated So I'm going to
Finish employer job listing page
4:26:36
put them in their own separate component We'll say that we're going to have the status update button just like this And
4:26:44
at a base level this button is going to share some things in common with this button So we'll just copy this over as a
4:26:49
baseline starting point but almost everything is going to be different We don't really care about this being a link or anything like that And inside of
4:26:55
here for now we'll just say toggle So this is going to toggle our status Now this is going to be quite a bit more
4:27:00
complicated because we're going to need to wrap this inside of multiple if checks So the very first if check we're going to do is that async if And this
4:27:07
very first async if is just going to check do you have permission to perform this action So our condition is going to
4:27:12
be has has or user permission and this is going
4:27:18
to be for changing the status of a job listing for example from dellisted to published or draft to published and so
4:27:23
on So if we have this permission then we want to render out for example our button to toggle things So now if we
4:27:29
have this permission it should actually render that out if we put this on our page So up here we're going to render
4:27:34
out that button just like that And now we should see a button that says toggle on our screen If I just give my page a refresh it should hopefully show up
4:27:40
Looks like it's not showing up though And that's because I need to get rid of this as child That makes it show up So now you can see we have a toggle button
4:27:46
showing up because we do have permission to perform this action But I actually need a second if check here And this
4:27:51
second if check that we're doing is also going to check to make sure that the user plan allows them to publish a job
4:27:56
listing in specific scenarios So first of all I have to figure out are we publishing this job because that's the
4:28:02
only time we have a limitation So I'm going to come in here with a get next job listing status function which allows
4:28:09
us to pass in a job listing status So of course we need to make sure we get our job listing status passed into here but
4:28:15
allows us to pass in a job listing status and it'll tell us what the next status is going to be For example draft goes to published published goes to
4:28:22
D-listed and dlisted goes back to published So let's actually create a nice little handy function for this and
4:28:27
we're going to do this inside of a utils folder inside of our section for job listings So we'll create a brand new
4:28:32
file in our lib Actually we'll just call this utils.ts And we want to export a function called
4:28:40
get next job listing status It takes in a job listing status just like that And
4:28:46
we essentially just want to do a switched case I'm just going to copy it over because it's really basic You can see here we'll call this status If we're
4:28:53
in the draft or delisted case our status goes to published If we're in the published case it goes to delisted So
4:28:58
it's kind of almost like a state machine for what our next state is going to be that we can move into So once we have that done we can import that from here
4:29:05
And we need to make sure that we actually get our status into this button So I can say status just like that And
4:29:10
this is going to be status which is a job listing status There we go And now all the way up here
4:29:16
where we use this button I can say job listing status
4:29:21
Okay there we go So now I'm essentially checking Okay let's get the next job listing status You can see right here it's already printing out published I
4:29:28
know that if the next job listing status is published then I want to render some particular code In my case that's going
4:29:33
to be the code that checks to see if we can do this thing So I'm going to put a little if check here There we go Move
4:29:39
this all the way down Otherwise we want to render out essentially just our button So we're going to take our button and move it down here And I'm actually
4:29:45
going to take our button we'll put it in its own file or in its own variable So we'll say button is equal to this
4:29:52
There we go And now in both places where we use this we can just render out the button That way we essentially share that logic between the different places
4:29:59
we're using it So now you can see in one case if our next status is going to be published we want to check to make sure
4:30:04
the organization has the ability to do this Then what we're going to do if it's not going to published well we can
4:30:09
dellist any job we want whenever we want So we're just going to render the button just fine Now this one is going to be
4:30:14
checking a plan feature So we're going to say has plan feature and we need to make sure we pass in the particular plan
4:30:20
feature And you can see this is a little bit confusing because we have a feature for one job listing three job listings and 15 So we're going to have a lot of
4:30:26
different if checks here So I'm going to create a helper function instead This helper function is going to be called has reached max featured job listings
4:30:35
Just like that we're going to get a variable from that Const is maxed equals
4:30:40
waiting that So we'll put an async here
4:30:46
Make sure that I get all of this in the right location There we go And then what I want to do is I just want to return
4:30:51
the opposite of is maxed There we go So now I need to create this
4:30:56
has reached max feature job listings Now I'm going to create a brand new file for that So we can go down into our lib
4:31:02
folder again here I want to create a plan feature helpers.ts and we're going to export a function
4:31:08
with that exact name And I'm going to make sure that this is asynchronous So the first thing that I want to do inside
4:31:13
of here is to figure out what organization you're in So we can get our org ID which is equal to a way to get
4:31:18
current organization And then if the org ID is equal to null
4:31:25
well then we just want to return true because obviously if you don't have an organization you can't post anything It doesn't make any sense Then we want to
4:31:31
get the count which we're going to create a function for called get published job listings count for our org
4:31:37
ID Now this function I'm just going to paste down because it's relatively straightforward I'll explain it Don't worry not going to be jumping past it
4:31:43
Let me just get all my imports in place though Get our job listing table and get all of our different wear clauses inside
4:31:49
of here So essentially what this little bit of code is doing and it looks like actually I imported the wrong count variable So let me make sure here I
4:31:55
import the count from drizzle There we go So what this code is doing is we're just selecting the count of the job
4:32:00
listing table for only the job listings for a specific organization ID and if specifically published So it's just
4:32:05
going to add up all the job listings that are published inside of this organization and it's going to return the count or if there's no job listings
4:32:11
it'll return zero as the count So it'll always either be the number of job listings in the row or zero Then once we
4:32:17
have that we can essentially create a check which is const can post and we'll call await promise.all and we just need
4:32:23
to check which one of these permissions the plan has So we can say has plan feature for post one job listing and
4:32:29
then we can just extend upon that by saying this is the has property and we'll say
4:32:35
and count is less than one So if they have permission to do this and the count is less than one which is how many they
4:32:40
can post we say that they are able to do this So it returns true I then need to copy this down for three job listings
4:32:46
must be less than three And then we also have the ability for 15 job listings and this must be less than 15 So all of
4:32:53
these are going to return true if they have the permission for it and if they have less than that number of job
4:32:58
listings Then what we can do is we can just return can post dot sum and we can pass in a boolean here What that's going
4:33:05
to do is it's going to say does any value in this array equate to true that means are any of these true if so this
4:33:10
is going to return true And then it negates it to return false because this is for have we reached the max number of job listings So if we've reached the max
4:33:17
number of job listings this is going to return true So now that we have that set up we can actually use that inside of
4:33:22
here by just saying has reached the max number of job listings If we've not reached the max number of job listings then render out our button in this
4:33:29
particular section right here In our case you'll notice that our button has actually disappeared And that's because
4:33:34
we have reached the max number of job listings because we don't have a plan We're on the free plan So this button has completely disappeared Now this
4:33:41
isn't quite what I want though because if we are trying to publish the job and we're not able to I want to still show
4:33:46
the button but I want them when they click on the button to be told hey you can't do this You need to upgrade your plan This allows me to essentially try
4:33:52
to sell them on upgrading their plan when they try to do something instead of them just not knowing they can't do this thing So we're going to put an otherwise
4:33:59
clause in here and this is what renders whenever we fail the check So for example if I just put some random text in here you can see that that text shows
4:34:06
up because we are failing this particular check And here is where I want to add some even more complicated code for adding a popover And I believe
4:34:13
we're going to need to add this directly from shad CN So we'll say pop over We're going to make sure that we force install
4:34:18
this So it's going to work with our version of Nex.js since we're on the Canary version And now inside the popover we're going to use a popover
4:34:25
trigger just like that This is going to be set to as child because it's essentially just going to render a button Let me make sure I import this
4:34:31
properly There we go And then inside of here we want a button with a variant of
4:34:37
outline There we go Close off our button And inside of here we want the status toggle
4:34:44
button text which is a function we're going to create that allows us to just get whatever the text and icon is for
4:34:49
this So we're going to take in our job listing Whoops Job listing Actually we already have our status It's just the
4:34:55
status right there So let's go ahead and create this function all the way down here here It doesn't really matter where
4:35:02
And it's going to take in a status which is a job listing status Now this is again code I'm fine with just copying
4:35:08
and pasting over because essentially it's just a switch statement If we are in the D-listed state or the draft state
4:35:14
it's going to say publish while if we're in the publish state it'll say D-list So we can swap between whatever state we
4:35:19
want to be in So now you can see it says publish right here but we're inside of a popover So what should our popover content look like well we can come over
4:35:25
here We can say popover content And the very first thing that I want to do inside my popover content is have some
4:35:31
text essentially telling them you must upgrade So we're going to copy some text you must upgrade your plan to publish more job listings Then I want to create
4:35:37
a button that brings them to the page to upgrade their plan So we can say as child is a link with an href And this
4:35:44
href is going to be employer/pricing And this is going to say upgrade plan
4:35:50
just like that And then inside of our popover trigger we're going to add a class name to this which is going to be flex
4:35:58
flex column and a gap of two just to give us a little bit of space between those So now when we click on this you
4:36:03
can see we must upgrade our plan And of course it looks like I imported something from the wrong location So let me make sure I fix that Here we go
4:36:09
Popover content was imported from the wrong location Get that from the right location And now hopefully when I click
4:36:15
on that you can see you must upgrade your plan to publish more job listings Click on this and it'll bring me to the pricing page which we have yet to
4:36:21
implement Now this seems like just as good a place as any to implement the pricing page And luckily the pricing page is actually incredibly easy to
Pricing page
4:36:27
implement So we're going to go over and we're going to create a pricing page inside of employer So we'll create a new folder called pricing And inside of here
4:36:34
we'll create a page called page.tsx And I'm just going to copy the code because it's actually dead simple We
4:36:39
essentially are just importing one single thing which is our pricing table directly from Clerk Now instead of directly importing this from Clerk I'm
4:36:46
actually going to change this slightly I'm going to create my own custom pricing table component that we import from just because it's going to allow me
4:36:53
to configure specific things that I want So inside my components we're going to come in here with our pricing table
4:36:58
Export a function with that exact name And we need to make sure we import pricing table as clerk pricing table
4:37:06
from And that's at clerk/next.js There we go And then we can just return
4:37:12
our clerk pricing table And specifically I want to make sure that we're only doing this for organizations And our new
4:37:18
subscription redirect URL is going to redirect us back to the page we're currently on
4:37:24
So employer/pricing So when they upgrade or change their plan instead of redirecting them to a new page it just keeps them on the same
4:37:30
page so they can easily see what they swapped between So now let's import pricing table from our own custom
4:37:36
component And now we should see that our pricing table shows up But of course it can't be rendered when billing is disabled We need to make sure we enable
4:37:42
billing on our application So we can come over to our application We can go to the settings for billing And we want
4:37:47
to make sure it's enabled I just clicked on the button for enable billing I can disable it again if you want And then we can click enable billing right here And
4:37:53
then we're just going to use the clerk payment gateway to handle everything for us No configuration nothing like that So now we have billing enabled And we have
4:37:59
our subscription plan set up for our user So all of that is ready to go So now we should see if we refresh our page
4:38:04
you can see we get our pricing plans on the right hand side of our page And depending on what screen size we have you can see it's super mobile responsive
4:38:10
which is really great It's kind of big cuz I'm super zoomed in but that's just so it's easier for you to see But now we can subscribe to any of these plans we
4:38:16
want So we can toggle between annual and non- annual Let's say that we wanted to describe to just the basic plan that
4:38:21
allows us to post one job Come in here We'll click pay with test card because we're in development mode And there we go Payment successful We can click
4:38:27
continue And now we're on this plan You can see it's active All that fun stuff And we can go back to the job listing we're on I'm just going to use the back
4:38:33
button to get here But now you can see we have the ability to toggle this which means that we have passed both of those
4:38:38
different checks that we were trying to pass So let's go back to the page that we were just working on There we go
4:38:43
We're on that page Actually no this is the wrong page So let's make sure we're on the correct page Here we go And I want to kind of
Finish employer job listing page (continued)
4:38:49
extract this popover into its own function So we'll just say upgrade popover
4:38:57
There we go We're going to return this popover content And I specifically want to be able to put whatever text is going
4:39:03
to be on the button So we'll say button text And we're going to say popover text
4:39:09
And these are just going to be different things So we're going to say button text is a React node And we have our popover
4:39:15
text which is also going to be a React node There we go So now in this section I can essentially just put whatever my
4:39:22
button text is And then inside of this section I can put my popover text This
4:39:28
will just make it easier for me to repeat this because I'm going to use this in multiple places So now up here where I want my upgrade popover it's
4:39:34
also going to clean up the code in here because it's going to look a little bit better So we're going to have our button text which is equal to this
4:39:42
And then we're going to have our popover text which is going to be equal to this right here
4:39:48
There we go Now I get rid of all this and just makes my code a little bit cleaner and easier to work with And it still does the exact same thing Now the
4:39:54
next thing that we're going to do is we're going to create another helper component because this button when we click on it we want it to toggle the
4:39:59
state of published versus unpublished And we don't want it to move pages or anything like that It's just going to stay on the current page show us a
4:40:04
loading spinner and if it's successful pop up a toast or if there's an error it'll pop up a toast as well just to let us know hey what's going on with this
4:40:10
particular thing so we can create a nice little helper component for this in our components folder We're going to call this action button because it's going to
4:40:16
be a button that when you click performs a server action for us Let's minimize all this down so we have a little bit more room to work with We'll export a
4:40:24
function called action button This is going to take in an action that we want to perform We're going to have
4:40:30
an option for require are you sure which is really great for when we have things that we want the user to perform
4:40:35
additional validation by clicking an are you sure button We're also going to have an are you sure description
4:40:41
which by default just says this action cannot be undone Sometimes you may want to customize what this specifically says
4:40:48
And then finally we're just going to have all of our additional props for our essentially our button that we're going to be using Now what we're going to do
4:40:54
is we're going to take in our component props for our button and we're going to make sure it's with a ref So we're going
4:41:00
to say component props with a ref type of button Just like that And this is the button coming from shad CN Make sure we
4:41:06
import that properly And we're going to get rid of the onclick property because we're going to override that ourselves
4:41:11
Then we're going to take whatever these omit properties are and we're going to add on to them by just using an amperand
4:41:16
here to give us our extra props for action Require are you sure
4:41:22
which we can just say that's a boolean And then finally an are you sure
4:41:27
description and this is just a string And this one is going to be optional This one is
4:41:34
going to be optional And finally for our action this is going to be a function that returns a promise And this promise
4:41:39
is going to have an error which is a boolean and a message which is optional
4:41:45
and is a string There we go Now also we're going to mark this as a client component So we're going to come up here
4:41:50
use client and then we can actually define what this function is going to look like on the inside So the first
4:41:56
thing I want to do is I want to be able to handle a loading state And on the client side the best way to do that is with a transition So we'll say const is
4:42:03
loading and start transition is going to be equal to use transition
4:42:09
just like that And then we want a function that's going to be for performing our action So we're going to call this perform action cuz we're going
4:42:14
to use this in a few different places We're going to call start transition which is going to be an asynchronous function And this asynchronous function
4:42:21
essentially is just going to call our action So our data is equal to await.action And then we're going to say if our data
4:42:28
has an error make sure I await this properly There we go If our data has an error then what we
4:42:33
want to do is we want to render out a toast That is an error toast that says data And if we have no message it'll
4:42:39
just say error There we go So that's what we do to perform our action Start up a transition run the code It's going
4:42:44
to give us all of our loading states and everything for us automatically which is great The next thing we need to do is first of all if we require
4:42:52
an are you sure dialogue we need to put that inside of an alert dialogue which I believe we need to import from shad cen
4:42:57
So let's go ahead and do that There we go Get that And I'm going to have to force install that I'm almost
4:43:03
certain There we go Otherwise if we don't require this we can just return a simple button So we're going to come in
4:43:08
here with our button code It's going to take in all of our different props Just like that There we go And inside of here
4:43:15
we want to make sure our disabled is equal to is loading And we want to make sure our on click is handled properly by
4:43:20
the perform action There we go Then what we can do inside of our button is we can use that nice loading swap component
4:43:27
that we already created earlier to be able to swap between our is loading state and so on So is loading is just
4:43:33
equal to is loading And then we can say that we want to have some class names of inline flex items center and gap 2 just
4:43:41
to make sure everything looks like we want it to And in here we can put our props There we go That's all we need to
4:43:46
do to render out everything in this section In the require are you sure section we just need to essentially do that same thing but put it inside of an
4:43:53
alert dialogue So we have an alert dialogue The open state of this is specifically tied to is loading So if is
4:43:59
loading is true Then we want to make sure that this is open Otherwise we're going to set this to undefined By
4:44:04
setting to undefined we essentially say hey shad CN you handle what the open state is Otherwise I'm going to say only
4:44:09
force it to be open when we're loading The reason for this is normally when you click on the submit button for an alert dialogue it automatically closes and we
4:44:15
don't get that loading feedback So that's why I'm making sure it's forced to be open Now here we have our alert dialogue trigger I'm going to set this
4:44:22
as a child and that's because it's going to render out our button and our button is just going to take in all of our different props So either our button is
4:44:29
going to render on its own down here or it's going to render up here inside of our alert dialogue trigger Just like
4:44:34
that And it looks like I maybe imported the wrong one or I just didn't import it at all There we go Now we have our alert
4:44:40
dialogue content And inside of our alert dialogue content we need a header
4:44:47
Oops Dialogue header There we go Inside of that
4:44:52
dialogue title This is just going to say "Are you sure?" And then we also need a
4:44:57
description Alert dialogue description And this is going to be where we put in that are you sure description There we
4:45:04
go Make sure I copy this over Finally after our header we're just going to jump
4:45:09
straight to the footer Alert dialogue footer because all we really want to do is put in our buttons So we're going to have alert dialogue cancel button
4:45:17
There we go This is just going to say cancel And then below that we're going to have our alert dialogue action And
4:45:23
this is the thing that allows us to actually perform whatever action we want So this is going to say yes And then
4:45:29
inside of here we can essentially put a disabled state That's going to be equal to is loading We can also come in here
4:45:35
with an on click There we go The on click is going to be equal to perform action Make sure I
4:45:43
spell everything properly And then instead of just being the text yes of course we want to put that inside of our loading swap animation
4:45:50
And is loading is equal to is loading There we go Close that off Move that
4:45:55
down And now we have our dialogue version as well We can return that right here So if we ask for a dialogue we get
4:46:00
this big dialogue Otherwise we just get the button on its own And really all this code is for is just to make it so
4:46:05
when we click a button it does something and sometimes it asks us permission before we actually do that thing So now
4:46:11
inside of the code for our job listing up here where we have our button we can use that brand new alert button that we
4:46:16
just created which is alert button Actually it's not alert I'm sorry it's action button There we go And inside of
4:46:23
here we can put whatever text we want We already know what that text is It's just this text right here That's why we created a function for this to make it
4:46:29
easier to work with And now we have our alert button or action button And we can specify what our action is going to be
4:46:34
This is going to be for toggling the status of our job listing We'll get to that in a little bit We can also specify that we want to require are you sure and
4:46:41
we only require are you sure if it's going to be publishing a job So we can say require are you sure is get next job
4:46:47
listing status Pass in our current status If that is equal to published well that means that we're going to be
4:46:53
publishing this job So we probably want to make sure that they're sure they want to publish the job Also our are you sure
4:46:58
description will just say this will immediately show this job listing to all
4:47:04
users There we go Just so they're aware of what's going to happen if they click the button Lastly I'm going to add in a
4:47:09
variant This is going to be an outline variant And then we can finally manage our action which is going to be toggle
4:47:16
job listing status And we're just going to bind null and ID So it's essentially
4:47:22
going to call this function with null And the ID is going to be the very first property Another way that we could do this is writing the code like this And
4:47:28
then we could just pass in ID Both of these are going to work just fine We just need to create this function now
4:47:33
And actually we can't do this by passing a function because we're in a server component So instead we're going to change it back to the bind version
4:47:39
because that does allow us to pass it around So now let's actually go ahead and implement this It's going to be an action So we're going to go into our job
4:47:45
listing features and we're going to go into the actions and we're going to create a brand new action for that It's
4:47:51
going to be asynchronous We're going to export it There we go Inside this function we're going to do a lot of the
4:47:57
same stuff we did up here So I'm going to kind of copy this We'll obviously change some of it but it's going to take in an ID that is a string And then we
4:48:03
need to make some checks First of all we're going to check hey do we have an organization so first of all check do we have an organization then we need to
4:48:09
make sure that we check to see if they can actually do this particular thing And to make this a little bit easier I'm going to come up here I'm going to say
4:48:14
error is equal to and I'm essentially just going to copy this object So we're going to copy this up into here and we'll just say you don't have permission
4:48:20
to update this job listing status There we go Now we have an error that we can use and
4:48:26
like here for example we can return an error whenever the organization is equal to null and we'll just get it like that
4:48:33
Next thing I'm going to check is going to be my job listing So we'll move that up just like that So we're going to check to see if we have a job listing
4:48:39
and the rest of the section we don't even need And here we'll return an error if we don't have a job listing And again
4:48:44
we'll just put it on one line for a little bit of ease of use to look at Next we're going to figure out what the new status is going to be by calling
4:48:50
that get next job listing status And of course we need to pass in our job listing status There we go So this is
4:48:58
going to get whatever the new status is from our job listing And it looks like we aren't getting a status being returned from this or something is
4:49:05
happening that's not quite right Let's look at get job listing Looks like that should be returning our status for us And the reason it's not working is cuz I
4:49:11
didn't await the get job listing And I believe I need to make sure I wait it up here Otherwise again we'll have some errors So let me make sure I wait that
4:49:17
up there So that bolt is working just fine Now what we can do is we can kind of do our big if check First of all we
4:49:22
can check to see has org user permission and we want to check did they have the ability to change the status of a job
4:49:28
listing We'll await that and then we'll negate that as well So we'll check essentially hey do you have the ability
4:49:34
to perform this particular action and we're going to come in here with an error So if you don't have the ability
4:49:39
to perform this action we're going to return an error Next we're going to be checking to see if the new status
4:49:46
is equal to published And we want to check to see have we reached the max
4:49:51
amount has reached max job listings Just like that And we're going to make sure we await that There we go So now what
4:49:58
this little bit of code essentially is saying is first of all do you have permission and then we're checking hey are we at the correct status or are we
4:50:04
have we reached the max that we can for that status so if we're not publishing a job this returns false and it doesn't
4:50:10
throw an error but it will return true if we're publishing And if we've reached the max amount of job listings that we can we run into an error Now this
4:50:15
function I believe I called the wrong thing This says has reached max featured job listings This should just say has
4:50:21
reached max published job listings So I'm going to actually rename that because that was an incorrect naming on
4:50:26
my part So we'll come down into this lib for the plan features helpers And this should be right here We'll rename it to
4:50:32
published job listings instead There we go Now what we can do is come all the way up to here We can import this
4:50:38
function and at least the function itself will import Now we just need to make sure we have the function functioning properly because right now
4:50:43
it doesn't actually do anything in the case that everything is successful So we want to call the update function for our
4:50:48
job listing in the database version We want to pass in our ID We want to pass in our status which is our new status
4:50:54
The is featured property If the new status is equal to published well then we don't want to modify this So we'll
4:51:00
just leave this as undefined That'll just not change it Otherwise we're going to change it to false because essentially if you're unpublishing a job
4:51:07
you no longer want it to be featured Also we're going to set the posted at So if the new status is equal to published
4:51:14
and we have not ever posted before So our job listing
4:51:20
status is equal to draft Then what I want to do is I want to change my new date right here by putting a new date
4:51:26
Otherwise just don't change it So essentially if it's the first time we've published this job listing then set a date Otherwise don't We can also do this
4:51:33
a different way which is probably better and we can just check the posted at So the posted at is equal to null So essentially if we don't have a posted at
4:51:39
yet and we're posting this for the first time set the posted at otherwise don't mess with it Now we should hopefully
4:51:45
have all of that done and we can work on finishing out what we need to do on this page because it looks like we have an error where ID is equal to null And
4:51:51
that's cuz I just didn't pass in the ID here There we go And then I need to make sure
4:51:58
wherever I use this I pass in our ID which is our joblisting id There we go
4:52:04
Now it looks like we have an error right here with this action And that's because we need to make sure this function always returns to us an object that has
4:52:10
an error property So we can say error false to let them know that this was successfully performed Now that should
4:52:15
be everything we need to do to actually be able to change the status of our job listing So if I click this publish button you can see are you sure this
4:52:21
will immediately show this job listing to users I'll click yes And you can see we got a small loading state And now it says we can delist the job cuz it's
4:52:27
currently an active job If I click delist you get the loading state back to delisted And now if I want to publish again are you sure you want to publish
4:52:34
yes And it'll show it as published Now the next few buttons that we add are likely going to be much simpler cuz we can kind of piggyback on all the work we
4:52:39
did to make this particular button work as well as it actually is So let's go back onto that page We want to scroll to
4:52:45
the section that we're going to be working on which is right here We have our status update button I'm going to add a brand new button And this one is
4:52:51
going to be for our feature is featured update button And we'll
4:52:57
actually call this featured toggle button I think that's a little bit of a better name And it'll take in if it is
4:53:02
featured or not So we'll come in here with an is featured And this is just going to be a boolean So first of all we
4:53:08
can kind of not worry about this action button We'll come back to that I want to focus on this particular section here So we're going to be using the same exact
4:53:14
change status because this is both for changing the status as well as changing the status of the featured flag That's going to be the same exact thing that
4:53:20
we're checking So we'll leave that the same We don't need to worry about getting the next job listing status We don't have that at all to worry about
4:53:26
But we do need to check to see if this is a featured job So we'll say is featured If it's featured we want to
4:53:31
render out just the button as is because we're essentially unfeaturing the job which doesn't require anything fancy
4:53:37
Otherwise we are featuring the job which means that we need to check to make sure they have the ability to feature a job
4:53:43
So we can make sure that in this particular section we're going to check the max featured job listings which is a
4:53:49
new function that we need to create So let's go ahead and do that It's going to be very similar to the function that we've already created So I'm essentially
4:53:55
just going to copy this paste it down This is going to be max featured job listings There we go We're going to be
4:54:01
getting the featured job listings count So let's copy this function because again very similar This one is going to
4:54:08
be featured job listings And down here instead of checking this we're going to check is
4:54:14
featured is equal to true There we go This is going to give us all the featured job listing counts So now
4:54:20
we can check all of our featured And here we can check for the onefeatured as well as the unlimited featured There we
4:54:26
go So the one featured means that they have to be less than or equal to one And for the unlimited we don't even need to
4:54:31
do any other checks because if they have the ability to post unlimited it doesn't matter what the count is We only care about the count when it's limited So now
4:54:37
here we can say can feature is might as well be what we call this And we're going to do the same exact negation to make it so that if we have reached the
4:54:43
maximum or not So now inside of here we can import this particular function This will return true if we've reached the
4:54:49
max number of feature jobs Otherwise it's going to return to us false Then what we can do is we can add our upgrade
4:54:55
popover For our upgrade popover we need our featured
4:55:00
toggle button text And that's just going to be is featured And again that's something that we can
4:55:07
create down here Very similar to what we did with our status I'm just going to copy it over because again if you look at it it's very simple code If featured
4:55:13
is true we return this star off icon that text unfeature Otherwise we return the text of feature with the star icon
4:55:19
Essentially flipping between the different icons and text based on if we want to feature this job listing or not
4:55:25
Now we have that particular section done This text should say you must upgrade your plan to feature more job listings
4:55:30
There we go So that's all good That looks like everything we wanted to do We can come all the way up here and now we
4:55:35
just need to make our action button work fine which isn't going to be too much work So inside this action button we
4:55:41
don't really need to worry about require are you sure So we can completely get rid of that And then we have here our variant for outline as well as we want
4:55:47
to for this one to toggle the job listing featured And we want to bind that just like we did before And this
4:55:53
should be our featured button text is featured There we go So essentially all we need to do is create this one single
4:56:00
function and all of the rest of the code is essentially taken care of for us So let's go ahead and we'll create this
4:56:05
function inside the action for our job listings So we'll come into our actions and we'll create one Might as well
4:56:11
actually just copy this function because it's going to be very similar to what we did up here This is going to be toggle job listing featured So first of all you
4:56:18
don't have permission to update this job listing featured status
4:56:23
There we go And I might as well make sure I put an apostrophe s in front of this one just so it looks a little better Job listings status There we go
4:56:30
And then we can first check to see do we have the organization Same as before Check to see if we have the job listing Same as before This is going to be our
4:56:37
new featured status which essentially is just negating the current status we have So
4:56:44
job listing.isfeatured We're just negating that Then what we're going to do is we're going to do all the rest of our checks down here for if we have
4:56:50
permission for doing it So do we have permission okay Then is our new featured status equal to true so is it true if
4:56:58
it's true then we want to reach have check to see if we have reached the max featured jobs So if we have permission
4:57:04
and we've not reached the max featured jobs then we want to update this down here And this one's super simple All we
4:57:10
need to do is take is featured and return the new featured status Super straightforward So since we did all that
4:57:16
extra leg work before this was actually relatively easy for us to implement And now we can actually render that on our page So let's make sure we import this
4:57:23
and we can go up and we can render this right next to where we had our status button So here's our status button We
4:57:28
can add our feature toggle button It's going to take in is featured which is joblisting.isfeatured
4:57:35
And it's going to take in an ID which is joblisting id There we go And now you can see we have a button that allows us
4:57:41
to toggle between featured and notfeatured Also I only want to render this if our job listing is published
4:57:46
because we can't feature a non-published job listing So if joblisting status is
4:57:52
equal to published then I want to render the text directly inside of here So we'll move that down And of course since
4:57:58
this job listing is published you can see the button shows up Now right now our featured button right here is showing up and our featured button here
4:58:04
is showing up So we have a little bit of a mix going on My guess is that inside of our component for our job listing badges we just have something not quite
4:58:11
like we want Yeah of course we negated it right here for testing purposes We need to make sure this only shows up when it is featured Now I can click on
4:58:18
this feature button And of course you must upgrade your plan to feature more job listings And that's because we're on the basic plan which does not have any
4:58:23
featured job listings So let's upgrade to the growth plan where we can add one actual featured job listing So now we
4:58:29
can come back over to here go to our job We'll just use the back button to get there for now And you can see I can click feature And you can now see my job
4:58:35
has been featured And now I can click unfeatured And it has been unfeatured So I have the ability to toggle between these We'll make this one featured for
4:58:41
now Now the last button I want to add is going to be the simplest one of them all And that's just going to be the button for deleting And you may think that
4:58:46
would be more complicated but honestly deleting is actually pretty simple So what we want to do is we're just going to copy this async if because this
4:58:52
button is much simpler It's just one if statement instead of multiple We check for the delete status Then we have our
4:58:57
variant on this one It's going to be destructive Whoops Destructive There we go And this
4:59:04
one is not going to have a link So it's not going to be an ash child or anything like that It's actually going to be an action button So let me make sure we get
4:59:10
our action button There we go This one is going to be the trash two icon There we go size is going to be four It'll say
4:59:17
delete And then we just need to specify what we want our action to be So our action for this one is going to be delete job listing.bind null and our job
4:59:25
listing ID And then we're going to require are you sure cuz obviously deleting a job listing is kind of a big
4:59:31
deal So let's go ahead and create an action for this job listing We'll just come in here async function delete job
4:59:38
listing and it takes in an ID which is a string Now this one is going to be pretty
4:59:44
straightforward Kind of similar to what we've done before I'll copy up this code right here So first of all our error will say you don't have permission to
4:59:50
delete this job listing There we go We first check do we have an organization then we
4:59:56
check do we have a job listing that we want to delete and then finally we're going to check if we have permission So we can say await has permission And we
5:00:04
want to check do they have the or userdee job listings permission We're going to make sure we negate that So
5:00:10
right there There we go So we're checking okay do they have the permission if they don't then we're
5:00:15
going to return the error again and then finally we can come down here await
5:00:21
delete job listing ID make sure this is the database version and then if we
5:00:26
delete something we just want to redirect them back to the employer page
5:00:32
There we go So now let's go ahead and implement this delete job listing DB and we also want to make sure we export this
5:00:38
so we can use it in our application So this is going to go inside of our database folder right here Export
5:00:46
function We want to do that an ID That's a string And deleting is going to be rather straightforward It's kind of
5:00:52
going to look like this So I'll copy this over You can see here we're going to call this is an async function We're
5:00:57
going to call delete We're going to get it where our job ID is that And we can return these things Revalidate And then
5:01:03
this is called our deleted job listing Just like that There we go That's all we
5:01:08
need to do to delete a job listing And here we can make sure we can import that properly So we'll scroll all the way to the top to manually import that Looks
5:01:15
like it's right here There we go So now we've imported that file And the last place we need to
5:01:21
import is going to be here where we actually created that action So let's make sure that we actually get the correct one imported So let me maximize
5:01:28
my screen size just so I know which one I'm importing There we go That's the actions one right there And now hopefully everything is going to work
5:01:34
And you can now see we have our delete button right here And when I click on this it will delete the job listing if I wanted to So let's click on delete And
5:01:40
you can see it has deleted that And it's redirected back to this page And we've been redirected back to our very first
5:01:45
job listing And that's because if we look at the page for our base layout you can see here it redirects us to whatever
5:01:51
the most recently created job listing is which is this one Or if there are none it's going to redirect us back to the page that essentially is for no job
5:01:58
listing which is for creating a new job listing So now let's go ahead and actually work on the sidebar portion over here for our job listings First of
Employer sidebar updates
5:02:04
all this plus button should only show up if we have permission to actually interact with it So let's go over to our layout for this Make this so quite big
5:02:10
so we can see it And here is our sidebar group action We want to wrap that inside of an async if So we'll say async if
5:02:17
just like that Wrap that entire section in it And we'll add in our condition which is has or user permission And this
5:02:24
is going to be the one for creating a job listing So we want to just make sure we check that If they have that
5:02:29
particular permission then we're fine with running the rest of our code There we go Then inside of this sidebar group
5:02:34
I want to render out all of the job listings that we have So inside this sidebar group we're going to have our sidebar group content Just like that And
5:02:42
inside this sidebar group content I want to create a job listing menu And I'm going to pass it in the org ID so we can
5:02:48
get all the job listings for a particular organization Now this content I want to be collapsed or hidden
5:02:54
whenever I collapse my screen or collapse my sidebar So we'll say group
5:02:59
whoops group data And then we have state equals collapsed
5:03:05
And I want this to be hidden whenever in the collapsed state There we go And
5:03:11
let's make sure that we close off everything that we have For example this needs to be closed off And we need to
5:03:16
create this job listing menu And this is going to take in that org ID
5:03:22
And for now let's just return null So we can at least see that everything is working properly And this entire section
5:03:27
when we collapse down to the icon size So at full screen like this when we collapse down all of that entire section right there is going to completely
5:03:33
disappear just like we want it to So now let's go ahead and make this sidebar menu First of all we need to get our job
5:03:38
listings So we'll say await get job
5:03:44
listings This is going to take in an org ID And this is actually going to
5:03:49
be a much more complicated function than it looks like So we're going to come down here and first of all wherever I
5:03:54
have my job listing menu I want to wrap that in a suspense There we go
5:04:01
Perfect Since we are doing asynchronous code inside of here I don't really care about a fallback for it but we're going to just wrap it inside of a suspense Now
5:04:07
let's create our async function for get job listings Pass it in an org ID which
5:04:13
is a string And you may think this is a simple function but not only do I want to get my job listings I also want to
5:04:18
get the number of applications for my job listing And I also want to group these by the actual organiza or by the
5:04:24
status for the different job listings So there's quite a lot of stuff going on inside this function First of all we can
5:04:30
do our caching just like we were before So we'll say get job listing and this is going to be our organization ID There we
5:04:36
go Then I want to get my data which is await db
5:04:41
select because we're going to be doing a manual select with manual joins and so on So I want to get my job listing table
5:04:48
do ID I want to get my title Whoops Table.title
5:04:53
I want to get my status which is job listing table Let me unimport menu
5:04:58
because I definitely don't need that imported Looks like it Oh of course it's not imported It's this exact file right
5:05:04
here Okay So we can get our status Then the next thing we can get is our application count And this is going to
5:05:10
be a count of our job listing Application table dot user ID because
5:05:17
essentially I want to get the unique users that have applied for this particular job And we'll make sure that we import that from Driscoll properly
5:05:23
Then we want to do this from our job listing table There we go We want to get
5:05:29
this where we have the organization ID So we can say equals
5:05:34
job listing table do.org organization ID is equal to our org ID So now we're
5:05:39
checking okay only the job listings for our organization I want to do a left join because even if there are no
5:05:45
applications I still want to make this join and just count to zero So my job listing application table where my job
5:05:52
listing table do ID is equal to my job listing application table dot joblisting
5:05:58
ID So I'm just matching on that foreign key Then I'm doing a group by
5:06:03
and I want to group by each individual job listing ID and I also want to group by the job listing ID itself just so I
5:06:11
can actually get that information So we're going to put both of those in our group by clause The reason I have both is because that way I can access like my
5:06:17
ID my title my status and so on up above Finally I have an order by and we're
5:06:22
going to do this in descending order by by when they were created So we're going to do created at So whichever one is most recently created will show up at
5:06:29
the top of our list Now down here we can return our data but before we do that you'll notice that not only do I rely on
5:06:34
my job listing data for each organization but I also rely on my job listing application table So I need to
5:06:40
make sure I cache based off of that as well The really nice thing about the way NextJS does caching with this cache tag
5:06:45
system is I can loop through each one of my job listings just like this And I can
5:06:50
specifically say I want to get a cache tag for my job listing application job
5:06:56
listing tag Super long name but essentially I just want to cache my applications by the job listing ID But I
5:07:03
don't have that function created So we're going to go ahead and create that function since now we're diving into our job listing applications So we'll come
5:07:09
over into our page Inside of our features folder we need to create a brand new folder for job listing
5:07:15
applications We need a DB folder and we need a cache folder And inside of that folder we'll just create a brand new
5:07:21
file called joblisting applications.ts And we're going to export a function
5:07:28
with that exact name Now this is going to take in our job listing
5:07:35
ID which is a string and it's going to return the get job listing
5:07:43
tag We're going to pass it in job listing
5:07:49
applications and our job listing ID And this is again a function we need to create because we don't have any setup
5:07:55
for this for our caching So in our data cache you notice we can cache by ID organization and global We need to
5:08:01
create another one for being able to cache by a job listing ID instead So our tag is our cache tag and then our job
5:08:08
listing ID is going to be a string Finally I'm just going to essentially take what I have here I'm going to
5:08:14
return the same thing So our job listing ID goes there and this just says job listing So now inside of this file we
5:08:21
can make sure we import that and that should work just fine Now I also want to get the global tag version I'll just
5:08:26
copy that over You can see now here's the global tag version And I also want to get an ID tag version But this is
5:08:32
going to be a little bit difficult compared to the other ones because we actually have a joint ID as opposed to an individual ID You can see our ID is
5:08:38
both a job listing ID and a user ID Our primary key is a joint primary key So we need to make sure we pass in both parts
5:08:44
of our primary key to use with this particular tag Finally we just need to do the exact same thing by revalidating
5:08:50
these tags Make sure I import this So you can see here again we're passing in our joint tag just like this and we're
5:08:56
making sure we're revalidating all the different caches that we possibly have Same thing that we did for everything else just slightly more complicated
5:09:01
because we have a joint primary key Now here we can make sure we get that tag and what this is doing is it's
5:09:07
essentially saying okay every single application for every job listing we're looking for is going to be cached Now with that out of the way we actually
5:09:13
have our job listings and we can use them up here So first if our job listings whoops job listings.length
5:09:20
length is equal to zero and we have the ability to create things So I'm going to say await has or user permission to
5:09:28
create a job listing Then we want to render a button to create a job listing because we don't have any job listing yet So we're going to return a sidebar
5:09:35
menu Inside of here we're going to return a sidebar menu item Inside of
5:09:40
that we're going to have a sidebar menu button And then finally we're going to have a
5:09:46
link inside of this if I can spell properly There we go A
5:09:52
link that has an href that points to employer job listings new Just like that Going to
5:10:01
put a plus icon in there And we'll also put a span
5:10:07
that says create your first job listing There we go So now if we have no job listings that would show up right here
5:10:12
And to emulate what that would look like we can just put a little not equals on there And now we can come over here And
5:10:18
of course looks like we're getting some kind of error Cannot read property length of undefined So this job listings thing is not returning our data properly
5:10:24
Most likely that's because of the way that we set up our caching It's currently probably cached when it shouldn't be Actually it looks like it worked I just need to refresh the page
5:10:30
Or maybe not My guess is it cached the value when it was empty before we actually added anything So the easiest way to fix this is just to stop your
5:10:37
server Then what we do is we go over here where we have our next folder Delete this It'll get rid of your entire cache And then restart your server This
5:10:44
should hopefully fix the problem We completely nuked our cache for literally everything And if we still have the problem then it's definitely a problem
5:10:49
with our code and not with Next.js caching But it looks like it worked fine And you can see here it says create your
5:10:54
first job listing Even the styling is a little bit messed up on it I believe the reason for that is because this should be an as child button And there we go
5:11:00
That fixed all of our stylings Now we have create your first job listing just like we wanted it to be Now the next thing that we need to return down here
5:11:06
is going to be essentially grouping our job listings because we obviously have job listings So this will be null We
5:11:12
want to group them by status and then render out all the job listings for each individual status So what we're going to do is we're going to say object.ent
5:11:18
entries That's going to give us our objects and we first want to group them So we're going to group our objects job listings And what this is going to do is
5:11:25
it's going to take our job listing and we want to group by status So we're going to group them by status and then convert them to an array And this array
5:11:31
is essentially going to have some values where the key is going to be the actual status and the value is going to be the
5:11:37
array of job listings grouped by that status And I want to sort them because I specifically want the active status for
5:11:43
example to be above the dellisted status And if we did it purely alphabetical published comes after dlisted which is
5:11:49
not ideal So we're going to create a sort function here And this is going to take a and b just like this And the
5:11:54
reason I have to wrap these in arrays is because like I said this object entries returns to us an array where the first value is my actual key while the second
5:12:01
value is the value So I want to get the keys for both of these and then I want to sort them And to sort them I'm just
5:12:07
going to call a simple function And this function is called sort job listings by
5:12:14
status I'm going to pass in a and b And this is a function we're going to create inside of our utility helpers So if we
5:12:20
go into our features for our job listings in our lib we have this utils And I want to export a function that is
5:12:26
going to sort them A is going to be a job listing status B is going to be a job listing status And inside this
5:12:32
function all I want to do is return the sort order So I'm going to create a simple little helper function right here job listing status sort order and what
5:12:39
this is going to do is return to me a number that determines the sort sort order So for example published is first
5:12:44
draft is second dlisted is third and then inside of here I can just return getting my a value from here minus
5:12:51
getting my b value from here and since the sort function expects you to return a value of either less than one or less
5:12:56
than 0 greater than zero or zero This exactly does that for us perfectly So this is kind of that sort function and
5:13:02
this is just a map to get the sort order for us So instead of sorting alphabetically we're sorting exactly in
5:13:07
this order Now we can make sure we import that into our layout here
5:13:12
There we go And we should hopefully at least have them sorted but we're trying to render out objects which is not ideal So what we need to do is we need to map
5:13:18
this and convert it to JavaScript objects So again when we map this we're going to get a key and we're going to get a value just like this And also this
5:13:25
essentially thinks it's a string because object.entries is not smart It doesn't know what the types are So it says A is
5:13:31
a string and B is a string We know that these are job listing statuses So we can tell TypeScript hey these are job
5:13:37
listing statuses Don't try to do anything funky So now we have our key and our value down here Wrap those
5:13:42
inside of parenthesis So we can use a function version of this And essentially what I want to do is I just want to
5:13:47
return a new object We're going to call job listing menu group Our key is going
5:13:53
to be our key Make sure I don't capitalize this And this key is really just our status So I might as well call
5:13:59
it status so it's a little bit more clear what's going on Then we're going to set our status and we're going to again have to cast this because
5:14:05
TypeScript's not smart enough to know And then our job listings is equal to our value And we might as well call this
5:14:12
job listings as well There we go
5:14:18
And now all we need to do is create this job listing menu group So I'm going to come over here I'm going to create a brand new file essentially directly
5:14:24
where our layout is at So in this folder right here we're going to create a brand new file I'm going to call it underscore joblisting
5:14:31
menu group.tsx Make sure I spell everything properly And again the underscore is just for me to denote that
5:14:37
this is specifically a file that is only used in this particular section And of course it's going to be a client
5:14:42
component which is why we have to break it out into its own individual file And that's just so we can have different styling for things proper So let's
5:14:48
export a function job listing menu group Just like that It's going to take in an
5:14:54
object that contains a status which is our job listing status and our job listings which is going to be an array
5:15:00
of job listing which is type that I'm going to create up here
5:15:06
There we go Now this job listing type is a type that just contains our title and our ID from our job listing table as
5:15:12
well as this application count which is a thing that we're getting specifically when we're doing our query If I just
5:15:17
import this real quick so we can get rid of all of our errors If we get on here you can see we're getting our application count our title our status
5:15:23
and our ID Those are all the different things that we're expecting inside this function here Now also I'm going to be using this right here job listing ID
5:15:31
equal to use params This allows me to determine what page we're on to highlight the page we are currently on
5:15:37
Then we can return a sidebar menu just like that And this is going to be a
5:15:44
collapsible sidebar menu And again it looks like we need to get this from shad CN So let's come all the way down here
5:15:51
and we want to get collapsible Just like that And of course we'll probably have to force install this There we go So now
5:15:57
I can actually use this collapsible component There we go Get it from shad CN And this allows us to essentially
5:16:02
collapse these different sidebars So the default open status There we go Default open That is going
5:16:09
to be set to status is not equal to delisted So essentially my D-listed ones
5:16:14
I want to by default collapse them And this status right here for some reason is saying it's not available That's
5:16:20
because up here I need to make sure that I get my properties There we go We have status and job listing Also I want to
5:16:25
default this to open if it's the currently selected job listing So if my job listingsfind
5:16:34
job listingsfind a job
5:16:39
where the job ID is equal to joblisting ID If that's not equal to null then I
5:16:44
also want to default it into the open state So essentially I leave it open if it's not delisted or if it's the
5:16:50
currently selected one that we're inside of Then we can have some class names inside of here And our class name is
5:16:56
just going to be group slash collapsible So at least we have a group that we can use for our styling later on Then I want
5:17:02
to render out our sidebar menu item So we can say sidebar menu item just like
5:17:07
that This is going to have our collapsible trigger So we can say collapsible trigger We want to use as
5:17:13
child for this because we're going to be using essentially a sidebar menu button And inside of here we want to have like
5:17:19
I said a sidebar menu button There we go And inside this sidebar menu
5:17:26
button we're going to format the job listing status Pass in our status just like that And we're going to have a
5:17:32
chevron to the right icon Make sure I import that There we go The class name
5:17:38
on this is margin left auto just so it pushes itself all the way to the right We're going to transition
5:17:45
on the transform We're going to group this So group data for when the state is
5:17:50
equal to open There we go Then we want to get the collapsible
5:17:56
And we want to rotate this 90° Let me make sure I spell that properly So essentially what this little bit of code
5:18:02
does right here let me just close this off is we're saying hey when we're in our collapsible group that's what this
5:18:07
/apsible does and the state is open I want this to be slightly rotated So it'll essentially rotate based on if
5:18:13
we're open or if we are closed Now if we open up our sidebar we should see we now have the draft status And I can toggle
5:18:18
it open and closed but we're not rendering anything inside of it So let's create some collapsible content This
5:18:24
collapsible content is going to be a sidebar menu sub Essentially we're creating a submen inside of here So this
5:18:30
is a nested menu And inside this nested menu what I want to do is I want to loop through all my job listings So job
5:18:36
listings map For each job listing I want to render a job listing menu item
5:18:43
So for each one we'll just say job listing menu item which is a component we're just going to create in a second
5:18:49
And this is going to take in a job listing ID and all of our job listing props
5:18:56
There we go That's all of our stuff So let's create that component And the main reason I'm
5:19:01
putting this in its own component is so I can use a custom hook directly inside of it
5:19:07
Item There we go And of course I spelled this incorrectly
5:19:13
up here That should hopefully be spelled correctly in both instances And down here we take in an ID a title
5:19:21
an application count and this is just our job listing type that we already created Now down here the reason I
5:19:26
brought this into its own component is so I can essentially get the current param So we can just say that we're going to be param or actually job
5:19:33
listing ID is equal to
5:19:38
use params just like that That gives us whatever the current job listing ID is We can compare it to our job listing ID
5:19:44
to figure out if we're on the same page Then we can return a sidebar
5:19:49
menu sub item because we're inside of a sublist Make sure that's an item There we go And inside of here we want a
5:19:55
sidebar menu subut And this sub button is going to be is active if our job
5:20:01
listing ID is equal to our current ID Also we want to make sure this is an as child
5:20:08
because we're going to be rendering a link inside here to navigate around So this is going to be an href to our job
5:20:13
listing page And in our case we want to make sure that this is going to be slash employer slashjobistings
5:20:20
slash ID Close that off and we'll put a span
5:20:26
inside of here with a class name of truncate so that it doesn't overflow our container if our job listing name is
5:20:32
really long And then we'll put the title for our job Now we need to make sure we import this link component So that at
5:20:37
least is going to give us our buttons on the side So you can see we can click on these different items but we need to take this a step further by also adding
5:20:43
a badge with the count next to it So we can do that relatively easily with an application count If it is greater than
5:20:49
zero then we want to render out a component that shows that So we'll create a div with a class name of
5:20:54
absolute right of two top of 1/2 so that it's in the center negative translate of 1/2 as
5:21:02
well So that's going to be y 1/2 again perfectly making it centered Our text will be small and it'll be muted
5:21:08
foreground So it's essentially a light gray text that we're going to show with our application count There we go Right
5:21:14
now there's no applications but if we were to change this to a different value So we just say like if one is greater
5:21:19
than zero we make this one You can see it shows the text one So whatever our application count is it'll show right there Now to show you how this really
5:21:25
works and how cool it is if we go ahead and we publish this job listing and we just say yes we want to publish it You can now see it's under the active
5:21:31
category If we create a brand new job listing we'll just give it a bunch of bogus data It doesn't really matter what it is And we can click create job
5:21:38
listing you can now see that that's in the draft category And if I wanted to dellist this job you can see it's now in
5:21:43
the D-listed category And when I refresh my page dlisted by default is going to be closed unless the current job I'm in
5:21:49
is inside that D-listed category Then you can see it's going to start as open Now one thing I just realized when I was
5:21:54
going through our code is that inside of our toast if we go ahead and we open up the UI component for sauner you're going
5:22:00
to notice that this uses next themes but we don't really care about next theme We're not implementing or using next theme at all So instead of doing that
5:22:06
we're going to use our own custom is dark mode hook that we've already created Use is dark mode just like that
5:22:12
And then here for our theme section we're just going to say if we're in the dark mode use dark Otherwise use light
5:22:18
Just like that So we're not going to be hooking into this library that we're not actually using because that's one thing that they kind of require you to do Now
5:22:24
the next thing I want to move on towards is going to be working on our actual job board page but I do want to test one
Main job board page
5:22:29
thing real quick to make sure everything's working If I come in here and I log out you can see okay we do still have our sign-in button here which
5:22:35
is exactly what I wanted So let's go ahead and make sure we sign in We'll just sign in with GitHub Doesn't really matter what we sign in with But now what
5:22:40
I would want to do is I want to show all these different job boards that we have So on our employer dashboard we have two job listings One is a draft one is
5:22:47
delisted Let's go ahead and publish this one So at least we have one job listing that's published So we can use that as a
5:22:52
test to be able to view Actually we might as well just publish both of them so we can see both of them when we're working There we go So now over on the
5:22:57
job board let's actually render out something besides the text of hi So what we're going to do is we're going to go over we're going to minimize all this
5:23:03
different stuff cuz that's kind of all the old stuff we worked on We're going to go into our app into the jobseker section and we're going to go into our
5:23:08
page And here all I'm going to do is I'm going to render a div with a class name
5:23:13
of M4 just to give us some spacing so at least our text is low spaced out And then we're going to render a job listing
5:23:19
items component And this is going to take in our search params because this is essentially going to be a page that we can search with search params So
5:23:26
search params There we go Make sure I spell all that properly And up here we're going to take
5:23:32
in search params So we'll say search params and search params is going to be a promise
5:23:39
And this promise is going to return to us a record of string string because we really don't know what is in the search
5:23:45
params It could be literally anything And this job listing items is something that I'm going to share between multiple pages because we're going to be showing
5:23:52
kind of things side by side The same list of things on our job listing page as well as the page to show all the
5:23:57
listings So I want to create a brand new folder called shared where we can put things like our job listing
5:24:04
items just like this And we can share these between those different pages without having to put it like in a global folder that's everywhere So now
5:24:11
let's export a function called job listing items And one thing I want to modify
5:24:18
slightly is this should actually be string or string array because technically our search params could be
5:24:24
an array as well as we pass a lot of the same thing So we have our search pram type I want to essentially get that type
5:24:29
inside of here So we could say search params And of course we want to have our normal params as well And we're going to
5:24:36
come in here with our search params as well as our normal params which is optional and it's a promise that returns
5:24:44
a job listing ID which is a string And again the reason why we have this is because like I said we are sharing this
5:24:50
component between a page that renders one job listing versus one that renders all job listings So sometimes it'll have
5:24:55
a pram sometimes it won't And then we have our search params here just like I mentioned Now we can just give this a
5:25:00
quick save We'll just return null over here We'll import this So at least our page will now render on the side It just
5:25:06
doesn't have any content Now before we get anywhere the first thing we need to do is get a list of all the job listings that we're searching for So we're going
5:25:12
to return db.query or actually sorry we should put this in a function first We'll call this get job listings Make
5:25:19
this an async function And we'll add caching in a little bit I'll just put use cache And I'll comment it out so
5:25:24
that way it doesn't accidentally get cached while we're in the middle of writing our function And then we're going to say that we want to return
5:25:30
db.query the job listing table We want to find many and we want to find many based on a
5:25:37
lot of different criteria So obviously we have all of our different search param queries that we want to run and
5:25:42
we're going to put those inside of an array which we're going to call wear conditions
5:25:47
That's going to give us an array of values and we're going to pass that down as some of our conditions down here Now
5:25:52
to make sure we type everything properly we can come into here and actually give this a specific type just like this
5:25:58
which essentially says that we're going to be either getting SQL or undefined And it's fine to pass in undefined If you do it just means don't do anything
5:26:04
with that wear clause So now we have a bunch of wear clauses and we just want to and these together So we're going to throw in a quick and just like that And
5:26:10
now we're anding together all these different wear conditions And we need to make sure we spread them And that'll just run whatever our wear conditions
5:26:16
are Now that's something we need to do So I'm just going to put a little to-do right here
5:26:23
Wear conditions So we remember to come back and actually implement these wear conditions in a little bit But we also
5:26:28
have other wear conditions that we need to worry about For example we have a job listing ID that we sometimes get passed
5:26:33
in So we can come up here and we can say we have a job listing ID that we know is going to be a string or undefined if we
5:26:40
don't have one yet And we also know for a fact that we're getting our search params And we're not going to really
5:26:46
worry about the type for that We'll come back for that in a little bit when we actually deal with our searching related information But in the case that we have
5:26:51
a job listing ID we want to make sure we include that in our list even if it's not one of our things that are returned
5:26:57
by our wear clause So we actually need to have a pretty complicated wear clause here First of all we're going to have our job listing ID If we have a job
5:27:04
listing ID then what I want to do is I want to return an and that first checks to see if we have a job listing that is
5:27:10
published So job listing table status
5:27:17
is published There we go And I want to make sure it is equal to that job listing ID
5:27:24
Job listing table ID is equal to my job listing ID So there's my first query that I want to do Otherwise I want to do
5:27:30
undefined Just like that And what I want to do is I want to wrap this entire thing inside of an ore So we're going to
5:27:36
come in here with an ore There we go From drizzle wrap that
5:27:41
entire thing inside of an ore And the second parameter of our ore is just going to be all of our wear clauses right here Let me make sure I put that
5:27:48
on the correct place Get rid of that parenthesy And there we go So essentially if we have a job listing ID I'm adding an extra wear clause that
5:27:54
just says hey check to see if we have a job listing for that particular ID and always make sure it's returned in the
5:28:00
list because even if it doesn't match this wear query if we have it selected we want it to show up in the list Then
5:28:06
we're doing this wear query for all of our different things And we also want to of course make sure we only get ones that are published So in both cases we
5:28:12
only get job listings that are published In this first wear clause right here we're checking the ones that match our job listing ID Second one is matching
5:28:19
our search params Then what we can do is we can specify we want to get organization information from them So
5:28:24
we'll say that we want to get the columns of name and we want to get the image URL which is going to be true Just
5:28:32
like that This will be true as well And I think I imported something up here Yeah I don't need that And then finally
5:28:37
after this we want to do a simple order by So we're going to order by descending the is featured So job listing table
5:28:44
isisfeatured And then we want to search by the posted at date So descending job listing table.posted at So of course
5:28:52
we're going to put the featured ones first and then the ones that are posted most recently second So now that we have this function defined we can actually
5:28:58
use that inside of our job listing items And of course since we're going to be using asynchronous code we need to put this inside of a suspended boundary So
5:29:04
we'll say suspended component just like that And then up here we can return suspended
5:29:12
or suspense and wrap Whoops Our suspended component inside of here
5:29:20
Just like that And we can of course pass along all of our props So we'll say type props is equal to and it's just going to
5:29:27
be equal to this There we go And then I can copy all of
5:29:33
this over Paste that into here And now we have the exact same props for both of these
5:29:43
And we can just call this props There we go So now we have all of our props being passed into our suspended component And
5:29:50
here is where we want to actually use our code to do something with it So we'll return null for now And then at the top we need to do a bunch of
5:29:55
different checks So the first thing I want to do is I want to determine do we have a job listing ID So my job listing ID is params and it's going to be equal
5:30:03
to await params if we have it Joblisting ID otherwise undefined There we go I
5:30:10
just need to wrap this in parenthesis There we go And that's params And this is an async function There we go So now
5:30:17
we're getting our job listing ID And one thing you could do is you could add in like a skeleton loader in this suspense
5:30:22
section but I didn't bother doing that because since we're so heavily caching things there's not a lot of time that we need to worry about that skeleton loader
5:30:28
So it's not a huge deal Next I want to get our job listings So we can say job listings
5:30:34
is equal to get job listings That takes in our job listing ID as well as our
5:30:39
search params There we go And of course we have our search params just there Now again we're
5:30:46
going to want to make sure we handle this with ZOD So I'm just going to add a simple to-do that says Zod validate So we make sure
5:30:53
we validate our search params before we throw them directly into our database Then if our job listings
5:31:00
is equal to zero and I'll make sure I await this here There we go
5:31:06
So if our job listings length is equal to zero we'll just return something that says "Hey there's no matches." So we'll return a div with a class name that says
5:31:14
text muted foreground padding of four and it'll say no job listings found
5:31:21
There we go Then otherwise we can go down and we can return what our actual list of job listings is going to look
5:31:27
like So this is going to be a div with a class of space y4
5:31:34
And then inside of here we just want to loop through all of our different job listings So for each job listing we'll
5:31:40
essentially return a link that's going to render out to that job listing Here we go Class name for this is going
5:31:47
to be block Our key is going to be our job listing id
5:31:59
Then we have an href which essentially points to that page which is slashjob listings
5:32:05
slash job listing ID
5:32:12
And we want to add our search prams onto the end of this as well So we'll put a question mark followed by a function
5:32:17
called convert search params to string
5:32:23
And we'll pass in what our search params are And we'll call this search just like that And up here we'll just say const
5:32:30
search is equal to await search params That way we can use that down here as
5:32:35
well And we just need to make sure we zod validate that particular section So now we're converting them to a string
5:32:41
that we can use And we'll create a function for that in just a second Now we can close off our link And inside of
5:32:46
our link we want to just put our job listing item
5:32:51
Listing list item There we go And inside of here we pass
5:32:59
in our job listing and we're going to pass in our
5:33:04
organization which is our organiz job listing.org
5:33:09
organization There we go So let's go ahead and create this function for converting our search params to a string
5:33:14
We can do that inside of our lib folder We're just going to do it inside of a function which we'll call convert
5:33:22
search params to string.ts I'm going to paste in what the code for this function looks like It's relatively
5:33:28
straightforward We take our search params We're getting our URL params from that and we're just doing object entries
5:33:34
on our search prams If the search params are an array we loop through each one and add them to the thing Otherwise we
5:33:39
just set it as an individual value That's only because you have to do slightly different code for arrays versus non-arrays And then we convert
5:33:45
that to a string which gives us a URL encoded string that we can use directly inside of our code here So we'll import
5:33:51
that just like that And now all we need to do is create this job listing list item So we can scroll all the way down
5:33:56
here We might as well just create it as a brand new function in here cuz it's the only place that it's used Job
5:34:01
listing list item taking in a job listing and an
5:34:08
organization just like that Now I'm going to copy over the TypeScript type for this because it's kind of
5:34:13
complicated Essentially we're just picking all the fields that we need from the job listing table Same thing for the organization table and we're making sure
5:34:19
we get just those particular values Then what I want to do is I want to render out all my code First of all I want to
5:34:24
get the name initials for my organization This is something that's just like when we did the user and organization buttons We're just getting
5:34:30
the first four letters instead of the first two letters of the organization name split on characters So the organization name is like what is the
5:34:38
name it would give us the first four letters of the first four or the first letter of the first four words In this
5:34:44
case we have more space which is why we're doing four instead of two Then what we can do is we can return a card for each one of these So we'll say that
5:34:51
we want to do a card Make sure we import that from the correct location We want to get the class name for this It's
5:34:56
going to be from CN We're going to pass in at container because we're going to be using
5:35:01
container queries for this And then if our job listing is featured we want to render out a special border and
5:35:07
background So we're going to say amperand right here Border featured And
5:35:13
we're going to say bg featured /20 just to give it a nice little background of that purpley color Now already we have
5:35:19
the card showing up And since we don't have anything that's featured I'm going to change one of these job listings to featured Now I'm not really sure why
5:35:25
we're getting an error here It might be something with caching and nex.js We're just going to refresh our page Looks like it may have just been a weird caching thing I'm going to click feature
5:35:31
So this job is going to be featured while the other one is not So now back to our job board You can see the featured one has this nice purple color
5:35:37
being assigned to it And when I click on one of these it will redirect me to that page So at least that's working But I want to finish out styling what this is
5:35:43
going to look like before we jump into the rest of it So inside of our card we're going to want to specify a card header
5:35:50
There we go And inside of our card header we're going to have a div with a class name of flex and a gap of four to space these content out from each other
5:35:57
because we're essentially going to have some icons on one side and we're going to have some other content on the other So we're going to have an avatar
5:36:04
There we go We're going to have a class name with a size of 14 cuz we want this to be rather large and a max small to
5:36:11
make it hidden So essentially on smaller screen sizes we actually hide this Next we're going to do our avatar image
5:36:18
Make sure I import that from the right location The source is going to be equal to our organization image URL or undefined And
5:36:27
then finally our alt is going to be that name So organization whoops organization.name
5:36:34
We also want to have our avatar fallback And this one is going to be where we put our name initials
5:36:40
There we go And this one's going to have quite a few classes applied to it So we're going to have an uppercase applied to that background primary And the text
5:36:49
is going to be primary foreground Just like that So now we have all of our avatars You can see that they're showing up quite large which is
5:36:55
exactly what we want Next after that this is where we need to put a div for all the rest of our content This is
5:37:00
going to be a flex in the column direction And we're going to have a gap of one on
5:37:06
these items And this is where we're going to have things like our card title which are going to show up right next to the thing that we just created So our
5:37:11
card title and inside of here we want to put our job listing.title
5:37:16
And let's have a class of extra-large text on that So now you can see we have our job title Next thing we want to do
5:37:21
is the card description just like that And this is going to be a class name
5:37:28
of text base And inside of here we're going to put the name of the organization
5:37:33
So now you can see the two organizations are both the same But if there was different organizations they would show up there differently Finally if the job
5:37:40
listing.posted posted at is not equal to null which it should be if it's showing up on the list but we still have to
5:37:46
check it just because of our TypeScript stuff Then we want to actually render out what that's going to look like So we'll say text small font medium text
5:37:54
primary whoops primary And we want to have a min of medium to make this hidden
5:37:59
So on the larger screen sizes this is going to be hidden And essentially this is just going to render out what our days is since this thing was posted So
5:38:06
we're actually going to create a special component for that days since posting
5:38:12
There we go We pass in our posted at which is our job listing.posted at and then we can close that off And we have
5:38:18
to wrap this in a suspense because this actually requires whatever the most recent day is It requires random dynamic
5:38:24
data So that's why we're doing that And for the fallback for this we can just say the fallback is going to be our job
5:38:29
listing local date string There we go So at least we have a loading fallback for
5:38:35
this Now let's create this async function days since posting This again takes in
5:38:43
posted at posted at which is a string
5:38:50
and this is specifically going to use the date FNS library So I'm going to npmi date FNS and we're going to force
5:38:56
install that just so we have a nice little helper function that we're going to use inside of here So we can say const days since posted is equal to
5:39:04
difference in days with our posted at and the date.now And this is the reason
5:39:09
why we needed to put this in a suspense because this relies on dynamic data in the case of date.now Now let's import
5:39:15
that difference in days So we'll say import difference
5:39:20
in days from date FNS Scroll all the way back
5:39:26
down So we have that working And I need to make sure I await calling the connection function This is how you note
5:39:32
in Nex.js that you're using dynamic data even though it doesn't know that So now we're saying hey we're using dynamic
5:39:37
data If the days since posted is equal to zero that means it was posted within
5:39:42
the last 24 hours So we'll turn a badge that says new just like that Otherwise
5:39:49
we're going to return essentially what the date would look like So a new intlative time format Whatever the user's local is
5:39:57
is what we're going to render it in And we're going to put the style as narrow And we're going to put it as numeric
5:40:02
always Just like that And we're going to make sure we format this to be the number of days So we're going to say
5:40:09
days since posting and days There we go So it's essentially going to tell us how many days since this job was posted or
5:40:15
new in the case of the job being posted recently I can fake this by saying it was posted for example 4 days ago And
5:40:21
now you can see if I make sure this is negative it'll say 4 days ago which is exactly what we want Now if we scroll up
5:40:26
a ways we can kind of copy this because we're going to need this in a separate section So outside of this entire flex
5:40:32
section right here we can kind of minimize that down Actually not the entire thing We can just minimize this section down because we want this to
5:40:38
show up on the far right side of our screen on the larger screen sizes So here we have our job posting existed All
5:40:44
of this stuff is going to be fine What we want to do is we want our text to be small font medium text primary Essentially all this is the same We want
5:40:50
the margin on the left to be auto to push it to the far right And we only want this to show up on the max screen size So that should have an amperand in
5:40:57
front of it And that should have an amperand in front of it here as well There we go And it looks like we're
5:41:02
getting an error with our posted ad And that's because I made this a string instead of a date There we go That fixes that particular problem And then finally
5:41:09
after our header where we can put our content card content we can come in here
5:41:14
and we can say we want to have our job listing details
5:41:19
detail badges just like that Make sure I import this I
5:41:25
think I actually just called it job listing badges There we go And we can pass in our job listing just like that
5:41:32
And then finally for our content we're going to come in here with a class name flex flex wrap and a gap of two There we
5:41:39
go So now you can see our cards are showing up down at the bottom here And if we're on a larger screen size you'll notice that this new item will move over
5:41:45
to the size You can see new moves all the way over here on a larger screen size while it's all the way down here on a smaller screen size Now you'll notice
5:41:52
over here these cards are kind of hard to see these badges sorry And that's because of the fact that we're on a featured one So I want to have a class
5:41:58
name here And this class name is only going to take effect if the job listing is featured Essentially what I want to
5:42:03
do is I want to change what my background for those is going to look like So I'm going to just slightly modify the border of those So we can
5:42:10
come in here and say the primary border of 35 is what we want to use instead And that's just going to make these borders
5:42:15
stand out a little bit more So it's easier to see on the featured job listings That already looks way better Now if we change around our screen size
5:42:20
on this you'll notice that we have nice responsiveness for everything You can see our icons disappear on really small screen sizes They come back things are
5:42:27
perfectly moving around to be as responsive as it can possibly be on all different screen sizes So that is all of the stuff for rendering our job listings
5:42:34
The next thing I want to work on is going to be making it so that this get job listing actually works properly with all of our caching and also with all of
5:42:40
our search parameters So at the very top of our page up here we can specify what our search parameters are going to look
5:42:45
like So we can come in here and we can say search params
5:42:50
schema is equal to a new zod object And this Zod object is going to contain everything we can search for So for
5:42:57
example the title we can come in here We can say that this is optional because everything is optional And also
5:43:02
importantly we're going to put a catch of undefined on here What that means is if for some reason the title fails our
5:43:08
check someone passes in a number instead of a string or something like that It fails our check it'll just return
5:43:13
undefined instead of failing completely This is really useful because for example if we type in a bad search param
5:43:18
we don't want to fail our website by crashing it We just want to return undefined and not search for that particular value I want to do the same
5:43:25
thing with a city Again it's an optional string Make sure I put my commas in place here Same exact thing for a state
5:43:31
It's an optional string Our experience is going to be our experience level So this is going to be an enum And this is
5:43:37
going to be experience levels And this is going to be optional
5:43:44
There we go And again if we have something that's not one of those experience levels we just default to undefined I'm going to do the exact same
5:43:50
thing here with location requirements
5:43:55
There we go This is location requirements Make sure I spell that properly There we
5:44:01
go Then we want to go on a little bit further and we want to work on the type which again pretty much the same thing
5:44:06
as what we've done before but this is going to be our job listing type or yeah
5:44:11
job listing type There we go Job listing types Then
5:44:17
we finally are going to have something called job ids This is specifically for when we start to integrate our AI search
5:44:22
capabilities It'll just pass a list of job IDs to this page So we're going to make sure we handle that as well And
5:44:27
this is going to be a union type right here And this is going to be a Z.string
5:44:33
or it's going to be an array of strings Zarray of Z.string Now the reason I'm
5:44:38
doing it this way is because search params are kind of dumb They don't know like if you pass it one value that's supposed to be an array it's going to
5:44:44
return it as a single value While if you pass it two values then it'll return it as array So essentially this is taking
5:44:50
into account if we pass one or many job ids No matter what I want to transform this to be an array So we can just say
5:44:56
if array is array v then we return v as is Otherwise we return it wrapped inside
5:45:03
of an array just like that So essentially we're going to be accepting either a string or an array of strings and then I'm converting it to an array
5:45:09
no matter what Also it should be optional just like everything else inside of our properties And in the case
5:45:15
of a catch we want to make sure we return an empty array So this is what our search parameter schema should look like And now we can actually use that
5:45:21
down here for our search params So we can do a really quick search here by saying that we want to actually get that data So we can come up here We can say
5:45:28
search param schemasafe parse We want to safe parse our search params right here And this is going to
5:45:34
return to us success as well as data And
5:45:39
for the most part success should pretty much always be true because we're catching on everything to make sure it works no matter what But for some reason
5:45:46
if it doesn't actually work maybe we don't get an object or something weird happens then we're just going to make sure we check for that So we can say if
5:45:52
we have success then we return our data Otherwise we return an empty array pretending that we're not searching for
5:45:58
anything at all Otherwise we're just going through and we're getting all of our different job listings checking the length and everything So now we can
5:46:03
actually use this search inside of our get job listings So we already know the type of this It's going to be Z.infer
5:46:10
type of search params schema because we know that we verified it is that type before we get to this point And now we
5:46:15
essentially just need to do a bunch of wear clauses So we can get rid of this section right here And I can say if
5:46:21
search params.title then I want to do something So if we have a title then I want to add a wear condition And this is
5:46:27
a wear condition that's going to be an I like I like essentially is going to be like a regular expression that says does
5:46:32
this match anything in the string on either side So I'll show you a little bit what I'm talking about It's a lot easier to see if I write it out So we'll
5:46:39
say job listing table.title and we're going to pass in our search
5:46:44
params.title with two percentage signs on each side These percentage signs act as like an anything or like it'd be like
5:46:51
a dot in a regular expression Essentially it's saying this can be anything at all doesn't matter what it is all the way to the end of the string
5:46:56
And this is saying anything at all all the way to the beginning of the string So what this code says is do I have a title that matches this anywhere in my
5:47:03
string at all doesn't matter if it's at the beginning end middle doesn't matter if it's uppercase lowerase doesn't matter at all Just says is this in the
5:47:10
string somewhere then we need to do the exact same thing with our location requirement I'll copy it over because it's very simple If we have a location
5:47:16
requirement add a wear clause for it Same exact thing for city and state So here we go If we have a city do the same
5:47:22
thing with that I like for our city Otherwise do an equal clause for our state Then we want to do the exact same
5:47:27
thing for our type and our experience I'll copy them over Exactly the same Equal on our experience This is equal on
5:47:33
our type And then finally our little bit more complicated one is going to be our job ids So I'll kind of go through what
5:47:38
this does First of all we're making sure that our job ids is an array which actually it already should be So we actually don't even need that line right
5:47:44
there And instead we can just use search params job ids like this because we already know that it's going to be an array And we can just push in an
5:47:50
individual wear clause for each of them So if we have like six different job IDs inside of our query we're going to put
5:47:55
an or clause for all of those So it could be any of those six job IDs Then finally we're actually going to use
5:48:01
those down here inside of our wear clause So we can actually kind of simply test this by putting a question mark up
5:48:06
here And we're going to say that we want to specifically look for when we have a job title that has front end in it So
5:48:13
we'll say front end just like that And if I search you can see only the one with front end end
5:48:19
in it was actually returned to us Well if I remove that you can see it returns all the job listings So now it's making
5:48:24
sure that we're actually caching this We'll throw in a use cache and a cache tag here is going to be get job listings
5:48:30
global tag Just like that So make sure that we get that imported
5:48:36
There we go Job listings global tag Looks like I don't have this function created yet Actually it's probably
5:48:41
because it's job listing global tag There we go And now we're at least caching this data And if we search for to-do I think yeah we already did our
5:48:47
ZOD validation So that cleaned up all the to-dos that we had in this particular file and we've listed out all of our different things Really all we
5:48:53
need to do is make sure when we click on one of these we actually have a page to render here And also that we have the filtering on our sidebar I think the
Main job board sidebar filter form
5:48:59
best place for us to start is going to be the sidebar filtering cuz this is going to set us up for the future with a lot of different things we're going to
5:49:05
be doing on the sidebar That's because this sidebar is going to render different content on different pages On
5:49:10
this page it's going to render a filter list If we're on our AI search page it probably won't have anything in it And
5:49:15
if we're on like our user settings page right here it's going to have different things for like our resume notifications
5:49:20
and so on So the content on this sidebar changes based on what page we're on And to do that inside of Nex.js we're going
5:49:26
to be using parallel routes If you're unfamiliar with them I'll link a video in the description and in the cards for you so you can kind of check out what
5:49:32
that's going to look like but we'll be going over what it does in this particular application So what we want to do inside of this job seeker section
5:49:38
is we're going to create a brand new folder called at sidebar And the naming is very important This at name in front
5:49:43
of here essentially says that we're going to be creating a new section in our application called sidebar So inside
5:49:49
of our layout we actually get a brand new component passed into here called sidebar And we'll actually make this quite a bit bigger so it's easier to
5:49:55
work with So we get our sidebar passed into here And this sidebar is going to
5:50:00
be a React node And this gets directly passed in from that sidebar section that
5:50:05
we just created So let's just get rid of some of these imports we don't need And now we have this sidebar And I essentially want to render this inside
5:50:11
my content section here So we want to just move all of this down And we want
5:50:16
to put inside of here our sidebar There we go So whatever we pass as our sidebar is going to render in this
5:50:22
particular section And the routes inside of here are directly tied to the routes associated with it So if we create just a page.tsx this is what renders when
5:50:29
we're on just our root page which is the page we're on right now So let's export a function Make sure this is default And
5:50:35
this is going to work just like any other page So this is our job board sidebar page And inside of we can just
5:50:41
return the text of hi There we go We give that a quick save
5:50:46
Hopefully if we refresh over here you can see it works And you'll now see we get the text high just being printed out inside of our sidebar So it's rendering
5:50:52
whatever is inside this content over here Now for us we're going to create a job board sidebar And I'm going to
5:50:59
render that out as a component in the shared section Job board sidebar.tsx
5:51:05
And the reason I'm doing that is because essentially we're going to share this between multiple different pages So we're going to say export function job
5:51:12
board sidebar We'll just return null for now And we'll make sure that we import that right here
5:51:18
So now at least it'll return nothing for now in our section Now the content in this page is relatively straightforward
5:51:23
We have a sidebar group and essentially I want to make sure that when we have our menu collapsed down to the icon size
5:51:29
that this entire group is hidden Then I just add a little bit of spacing on our content And finally we're going to render out a form that we're going to
5:51:35
create So we'll give this file a quick save We'll come all the way over to here where we want to create our job sideboard page So we go to features job
5:51:41
listings components We're going to create a brand new file called a job listing
5:51:46
filter form.tsx There we go And that is going to be an export function job listing filter form
5:51:55
return null And then we can import it in here to at least get rid of the error that's on our page Now this is going to
5:52:01
be a client component And we also want to get our search params So we'll say search params is equal to use search
5:52:08
params Also we're going to create a special value called the any value because often times we might have a drop
5:52:14
down that's like what state do you want to select from you can select a specific state or you can select any state So
5:52:19
this is going to be our any value to represent any state that we want or any job listing or any experience level just
5:52:24
anything in our select boxes Now the next thing we need to do is we need to create our form So we'll say use form
5:52:29
just like this We're going to pass it in a resolver and that's going to be a zod
5:52:34
resolver which is going to take in a job listing filter schema and we'll just define that up here because it's only
5:52:40
used in one place So job listing filter schema zod object
5:52:48
and we have a title which is a string from zod There we go Dot optional
5:52:56
Make sure I don't import that Don't need that anymore There we go I'm going to do the same exact thing with a city
5:53:03
There we go We also need our state abbreviation
5:53:09
Exactly the same thing It's a string And it can also have the Z.literal value of
5:53:14
our any value So any value There we go And we of course want this to be
5:53:20
optional Then the next thing that we need to do is we need to have our experience level Our experience level is
5:53:25
going to be an enum which is going to be experience levels
5:53:31
and it's also going to have the ability to have that same literal value So I'm just going to copy over this code and I'm going to paste that down because
5:53:36
again this is also optional There we go I'm going to copy this down for a few more because we have our type
5:53:43
which is going to be our job listing types
5:53:50
There we go And then finally we have our location requirement
5:53:55
which is our location requirements And again it can also be the any value So this is essentially all of our different
5:54:01
things that we can filter based on And now we just need to use a form for those And we also need to specify some default
5:54:06
values So the default values are going to be coming from our search grams So we can say title is searchprams.get
5:54:12
title or if we don't have a title it's going to be an empty string And essentially
5:54:18
that's how all of these are going to work So my city is going to be the exact same thing City or an empty string My
5:54:23
location requirement is going to be a little bit different because we're going to get our location requirement here
5:54:30
Whoops Requirement And I specifically need to cast this to
5:54:36
the type of location requirement so that TypeScript knows that this is going to be a location requirement or I'm going
5:54:42
to default it So there we go Requirement I'm going to do the exact same thing with my state abbreviation This one is
5:54:47
going to get my state Otherwise it's going to default to any value I'm going to do the exact same thing up here So
5:54:53
location requirement will default to any value if I don't have a specific value for it My experience level same exact
5:55:00
thing Going to default to that And it's going to work just the same as the one up here So I'm going to copy this over
5:55:06
Experience level I think I just called it experience There we go And this is going to be an experience level type And
5:55:12
then finally we have our type which is just the same as these ones This one is going to be called type And this is a
5:55:18
job listing type Now we can actually do our form down here And luckily this form is a rather simple form compared to some
5:55:24
of the other ones we've worked with Close that off Make sure that I import this from the correct location We want
5:55:30
to do a form Onsubmit is going to be equal to form.andsubmit
5:55:35
and it's going to take in on submit Class name here is going to be space Y6
5:55:44
And then we can render out each one of our individual form fields Let's go ahead and create our onsubmit function real quick Data which is Z.infer which
5:55:52
is our filter schema Job listing
5:55:58
filter schema What did I call it oh I have to put typo in front of it That's why it's not working There we go
5:56:04
And we can close that off and we can just console log our data for
5:56:10
now So now let's go ahead and create each one of our individual form fields I'll copy over this first one because it's going to be pretty similar to what
5:56:16
we've created before First of all this is a field of title You can see we wrapped it inside of an item
5:56:22
with a label which we just called job title followed by that form control our input and then finally the form message
5:56:29
if we have any errors even though we shouldn't have errors on this particular form So now hopefully if we open up our
5:56:34
sidebar you can see we have our job title as our very first form that we can fill in some information inside of and we can do a search but right now it's
5:56:41
not hooked up to anything So let's copy this down because we're going to do this for pretty much all of our fields We have our location
5:56:48
requirement and this one is going to be a select So I'm just going to kind of copy over what we had before because this is the same as the select that we
5:56:53
used in the previous form So it's going to be a select We're going to get our select trigger which I need to make sure
5:56:59
I import from the correct location Select value select content select item
5:57:06
and then finally here format our job location requirement which I believe we have a function for Format location
5:57:13
requirement There we go Now I believe I may have imported something incorrectly So let me do a quick double check to make sure Yes it looks like I imported
5:57:19
the wrong select element Let me make sure I import that from my components There we go That works fine So as you
5:57:24
can see for our select element we just have our select value And then down here is the important part We're looping through all our location requirements
5:57:30
and we're also adding this any option So if I give this a save and we open this up you can see that we have any or any
5:57:36
of these other options that aren't any So you can see in office or we can just say give me anything Now I'm going to copy over the next few that we have to
5:57:42
do because they're all pretty much exactly the same So st city is exactly the same as title I just changed the
5:57:47
word from title to city State abbreviation is exactly the same It's just we're looping over our states
5:57:52
instead of our locations If I go a little further experience level or job type I'm sorry is what this one is
5:57:57
exactly the same but I loop over my job types instead of my location requirements And experience level is the
5:58:02
same thing but looping over experience levels instead So that gives us all of our different fields that we need to work with We'll give this a quick
5:58:08
refresh and we'll open up our page here and you can see now we have everything inside here Job title location city
5:58:14
state job type experience level and then all of our filters down below Now we just need to be able to add a button So
5:58:19
we can come in here with a button Make sure we get it from the correct location Make sure that we disabled this in the
5:58:25
case of our form submitting So we can say form state issubmitting
5:58:30
And then we can make sure that the type is submit and the class name on this one is w full So it fills the full width
5:58:37
since it's kind of a small sidebar And then we can use our loading swap to render out our text of either filter or
5:58:43
the loading indicator And we'll get is loading which is form.state issubmitting There we go So now I
5:58:51
actually have an ability to submit this form Click filter And right now it doesn't do anything but it will actually filter our form as soon as we implement
5:58:56
the onsubmit function So we'll come all the way to the top of our page up here and we'll work on making this onsubmit
5:59:02
work because this is essentially just going to redirect us to a new route So what I want to do is I want to convert this form to search par prams So I can
5:59:09
say const new params is equal to new URL search params and then I can just say hey if my data city
5:59:16
then what I want to do is I want to take my new params and I want to set city equal to my data.c city Then I can do
5:59:25
the same thing with everything else that I have But the caveat is many of these have an any option So I want to make sure if the any option selected I don't
5:59:31
actually put it in there So for example data.state state abbreviation If we have one of those and the state abbreviation
5:59:37
is not equal to any then what I want to do is I want to be able to put it in there So new params
5:59:44
set state and that is data.state abbreviation There we go And essentially
5:59:49
I want to do that exact same thing for all of my different things So down here we can do title
5:59:55
There we go The next one I want to do is experience level
6:00:00
and this is called experience I can do the exact same thing with type
6:00:08
and make sure I spell experience correctly There we go This one is going to be type and type
6:00:16
And of course I have my location requirement as well And finally once we're done creating all
6:00:22
of our new prams I want to redirect to that route So we can use the router which is from the use router hook and I
6:00:28
can come down here and I can say router.push I can push in my path name I can get my
6:00:36
search params and I can say new params.2 string just like that And to get our
6:00:42
path name we can just come in here and we can say path name is equal to use path name There we go So
6:00:49
now we're just essentially taking our current path and we're appending down these new prams to our search So let's
6:00:54
say that I want to do a location requirement of in office and I click filter You'll notice up here location
6:01:00
requirement is set to in office and there's no results that are in office only So let's change that back to any and let's go ahead and say that we want
6:01:07
our job type to be full-time We'll click filter You can see we have our full-time jobs showing up Let's go ahead and
6:01:12
actually try to make one of these filters a little bit better So we'll change the title to front That should show us just those front-end jobs which
6:01:17
you can see it does which is perfect So you can see that this is working pretty much just like we expected to If I try to set a state for example to Arizona
6:01:24
we'll notice that nothing actually shows up over on the side here Now one problem is you'll notice that this stays open when we do our filter I probably want to
6:01:30
close this when we do that So we can say const set open mobile or whatever it is from use sidebar
6:01:37
Let's see It's called set open mobile Inside of here when we submit I just want to set open mobile to false There
6:01:43
we go So now when we click filter you can see it closes that out which is exactly what we want And if we change this back to any click filter you can
6:01:49
see we have our job right there So now that we finished up with this full sidebar working exactly as we wanted it to we can go ahead and work on what the
Job listing page
6:01:55
page looks like when we actually click on a specific job listing And the nice thing is you can see our filter prams are still saved in here which is really
6:02:01
good for making sure we have consistency between these different pages So let's go ahead We're going to minimize down a
6:02:06
lot of stuff We're going to close out of all of these And I want to open up the source folder I specifically want to go into the components or not the
6:02:12
components the app section In our job seeker section we're going to create a brand new folder which is going to be called job listings And we want to
6:02:20
specifically get the job listing ID ID Just like that we're going to create
6:02:27
a brand new page And inside of here we're essentially going to create this function that takes
6:02:32
in our params as well as our search params We also need to make sure that we have an export for our sidebar as well
6:02:39
So here we'll just return null And you'll notice that things aren't quite going to work as we expect because it's giving us a 404 because our sidebar
6:02:45
doesn't have a page for that as well So I will go ahead and I will copy this in So let me just delete this cuz I
6:02:51
accidentally copied it There we go I'll copy this Paste it into here And inside of our page we want it to look identical
6:02:57
to the page that we have here So there we go Let's just make sure our import comes from the correct location And now
6:03:02
we have the correct sidebar If I refresh we should see it actually shows up Looks like I need to restart my dev server
6:03:08
We'll just do that real quick Might as well do a quick restart Most likely because of the way my imports changed
6:03:13
around different things And now if we refresh looks like it says it still can't find this module for app sidebar
6:03:19
Most likely this is just caching some weird stuff So we're going to come in here delete our next.js folder rerun our
6:03:24
application That often will happen if you have weird caching related issues Just try to delete your folder But it
6:03:29
looks like that's still not quite fixing our problem Looks like it says it can't find our module for ingest which is kind of weird So we can go ahead and we can
6:03:36
check to see there are errors inside of here which is very weird Did I accidentally delete the wrong folder
6:03:41
possibly Ingest functions Yeah that all looks like it's correct Okay I figured
6:03:46
out what the issue was Sorry that was a little bit of a pause and a little disjointedness For some reason I accidentally deleted my tsconfig.json
6:03:52
and then it automatically created one that didn't have this path section set inside of it So now we have that fixed All of our imports are working properly
6:03:59
We're still getting this 404 error though so we need to figure out exactly what's going on in there If I look at everything you can see we have job
6:04:05
listings job listing ID Here it's job listing ID So I'm missing the job listing folder So we can say job
6:04:11
listings Just like that Put this inside of there And now we have everything set at the right level I most likely
6:04:17
probably need to reimpport some things Give it a quick save And there we go You can now see we still have our sidebar showing up And we're rendering currently
6:04:24
this page which is just rendering null But if we give it some text you can see the text show up Now for this particular section we're going to be rendering out
6:04:29
resizable panels So I'm going to be getting those from Shad CN It's called resizable
6:04:36
Just like that Of course we're probably going to have to force install this There we go That's going to work fine So now we can use those resizable panels So
6:04:43
I'm going to put this inside of a fragment And then we'll say resizable panel And in this case we want to get a
6:04:48
resize group So we'll say resizable panel group That's going to be a group that contains our panels And then we
6:04:55
want to have an autosave ID So we can say autosave ID is going to be equal job board panel What this does is it'll save
6:05:02
what our size of our panels are inside of our local storage So that way when we come back to our page it saves the same
6:05:08
panel size Also our direction is going to be horizontal And now we can close this off and we can put our resizable
6:05:14
panels directly inside of here inside of here So we have a resizable panel The ID on this one is going to be left That way
6:05:20
we make sure we keep our panels in the correct orientation and order And same thing here we're going to put an order of one So this one always shows up first
6:05:27
Next we're going to have a default size of 60 And we're going to have a min size of 30 And this is percentages So the
6:05:33
minimum this can be is 30% of the screen And the large the default of this is 60% of the screen And this is the lefth hand
6:05:40
side This is like the job list side And inside of here we're going to have a div class name P4 H is going to be screen
6:05:47
And we're going to have an overflow of Y that's going to be auto Just like that So that this will scroll if we need it
6:05:52
to And inside of here is where we're going to put those job listing items That's a component that we already created So we can just do that And we
6:05:59
can pass in all of our different search prams that we want And we can also pass in the pram as well So we'll say prams
6:06:04
just like that Now our next panel is going to be a little bit interesting because sometimes it's going to be a panel And sometimes we're going to have
6:06:09
a sheet like this where our sidebar pops in and pops out because on a small screen size it doesn't make sense to have two panels side by side It's better
6:06:15
to make one pop in over the top of the other So we're going to create a component called is breakpoint And this
6:06:20
is breakpoint component is going to take in a breakpoint For example min width 1024 pixels That's the breakpoint we're
6:06:27
going to use And it's going to render out the code inside of it if we meet that breakpoint Otherwise we can render
6:06:32
out code inside of an otherwise section Very similar to how we did for our asynchronous if So let's go ahead and create that is breakpoint component real
6:06:39
quick We'll go into our components folder We'll create that file Isbreakpoint.tsx
6:06:44
Export a function called is breakpoint And we're going to come up here and
6:06:49
we're going to make sure that this is a client component because we're going to be using a few hooks inside of here So we can say const is breakpoint is equal
6:06:56
to use is breakpoint which is a hook that we'll create in just a second Breakpoint and we'll return is
6:07:03
breakpoint otherwise we'll return here our children or we'll return otherwise So now let's make sure we get all those
6:07:09
different components We have breakpoint Let's actually just do it here Breakpoint is going to be a string
6:07:16
We have children which is a react node and we have otherwise which is going to
6:07:21
be optional and that is also a react node There we go So now we can make sure that we render all that different
6:07:27
content out So here we have our breakpoint our children and our otherwise Now down here we can do a
6:07:33
function use is breakpoint take in a breakpoint that's a string
6:07:39
And this is pretty much code that we've kind of already seen So I'm just going to copy it over and explain what it does So you can see here we have our use
6:07:45
state and our use effect The use effect is for setting up our actual media query to determine are we at that breakpoint
6:07:51
or not by just wrapping it inside of parenthesis and putting in the breakpoint Same thing we did with prefers media query Same thing the use
6:07:57
is mobile hook is doing They're all hooked up to this use is breakpoint So that's all we're going to do If we are
6:08:02
at the breakpoint it returns true otherwise false So we can render whichever one of these components we want Now we can come in here with use is
6:08:08
breakpoint and we can render out what our children are going to look like So in the first case when we are at that
6:08:13
larger screen size I want to render out a resizable handle handle just like that
6:08:19
I'm going to say with handle which is going to add like a little grabber on it so that way it's easy for people to know they can actually change the size of it
6:08:25
And then we'll come in here with a class name and we're going to add a little bit of margin of two on the left and right
6:08:30
We can also make this so it self-closes And then we can go ahead with a resizable panel And this one's going to
6:08:36
have an ID of right cuz it's our right side panel Order is two cuz it's the second one that we want to render Default size on this one is going to be
6:08:43
40 Essentially 60 or 100 minus 60 And the minimum size on this one is also going to be 30 So it can't get too small
6:08:51
Finally we want to render what's inside of here which is a class with a padding of four h of screen and the overflow y
6:08:57
of auto again to make sure everything scrolls properly There we go And inside of this I want to render out essentially
6:09:04
my job listing details So we're going to render out job listing details just like
6:09:09
this It's going to take in my params and my search
6:09:15
params There we go Close that off This is a component we'll create down below in
6:09:20
just a second But I do want to wrap this in a suspense And the suspense is going to have a nice
6:09:26
fallback inside of it which is going to be our loading spinner And we're going to create a custom component for this
6:09:31
loading spinner just because this is something we're going to most likely use in quite a few places So we're going to
6:09:37
come over to here inside of our components folder create that loading spinner export a function called loading
6:09:44
spinner and I might as well just copy this over because it's really just a few classes applied to a loading icon So
6:09:49
what we're doing with this is we're essentially saying it should take up the full width and the full height of whatever container it's inside of It
6:09:55
should center everything so itself and it should make sure it animates in a spin direction and has a size of 16 by
6:10:00
default which is a decently sized spinner So really we're just taking a spinner and centering it inside of whatever container it's inside of So
6:10:06
that's what this loading spinner right here does And then job listing details We'll create that function real quick
6:10:11
Job listing details return null Just so at least we have something to render on our page And if
6:10:17
we refresh we should hopefully see things work And of course it's not working cuz we need to specify this other property So in our case we're
6:10:22
going to specify that we want to render out a client sheet This is going to be a component that we create inside of here
6:10:28
because we need to have a client component for this So I'm going to make sure we come in here with an underscoreclient sheet because I need to
6:10:34
do a few special things inside of there Now inside this client sheet I want it to work just like a sheet inside of Chad
6:10:40
CN So we want to have a sheet content And this sheet content is going to hide
6:10:46
the close button which is something that we need to actually create ourselves So we'll say class name P4
6:10:53
P4 just like that Then we can put our sheet content inside of here which is going to be our sheet header We'll make
6:10:58
sure that this is a screen reader only version of our header And this will have a sheet title and
6:11:05
this is just going to say that it's going to be our job listing details And this is just to help people that are
6:11:11
using a screen reader know that when this opens up this is opening up to job listing details Finally we need a
6:11:17
suspense which is going to fall back to that loading spinner
6:11:23
And this suspense is going to render out our job listing details So I might as well just copy that and paste it
6:11:28
directly down into there because that's what it's going to render inside of our container Now we need to render out the ability to hide our close button as well
6:11:34
as this client sheet So let's work on this client sheet first Our client sheet only has one property which is going to
6:11:40
be children which is coming from our React node And we want to return a sheet The open property is going to be
6:11:46
determined by us So we're going to have an isop property So we can come up here Const is open Set is open is equal to
6:11:54
use state There we go And by default we'll just set that to true because on the page if we're here we want it to be
6:12:00
open And then we also want to come into our sheet on open change
6:12:06
There we go Make sure I close all this off properly This should say sheet Make
6:12:12
sure it's importing from the correct location There we go And I believe the reason
6:12:17
this is not working is because I need this to be a tsx file There we go So now we can import our sheet from the correct location On open change will return to
6:12:25
us whether or not it is open So we would get an open property from here And if open is true then I just want to return
6:12:32
because I don't really care Otherwise I will set is open to false
6:12:37
And I want my router whoops router.push push to push essentially the route that
6:12:44
closes us by bringing us back to where we were before So essentially what I'm going to do is I'm going to take here my
6:12:50
search params and I'm going to convert them to a string So we need to get our router and our search prams
6:12:57
So here's our router and then we can say search params is
6:13:04
equal to use search params just like that So now we essentially are navigating back to the page we were on before if we are closing out of this So
6:13:12
for example if we hit escape or the close button or so on And I also want this to be a modal So I'll specify a modal And then we'll specify the
6:13:18
children inside of there And that's everything really I just want to be able to control that open state and route us to the correct location That's the only
6:13:24
reason why this has to be a client component Also I mentioned it needed to be client Put use client at the top Now
6:13:30
we can come into here and we can import that client sheet And now all we need to do is add the hide close button to our sheet content So here we want to have
6:13:37
hide close button There we go By default this is going to
6:13:43
be equal to false And we want to make sure in here hide close button is an optional boolean
6:13:50
There we go And then just wherever our close button is at which is way down here we can say if we want to hide our close button don't show it So we say if
6:13:58
we don't hide our close button then we're going to show this particular content which is our close button itself Because we already have our own custom
6:14:04
close button we're going to implement So now you can see we have this showing up Now our job listing items this should be
6:14:09
job listing details instead of job listing items So I want to make sure here job listing details right there Now
6:14:14
if I give that a quick save you can see it renders null because right now job listing details is null So let's copy over all this parameter related stuff
6:14:20
because this is all the parameters we're going to be passing into our job listing details so that we can use them inside here For example I want to get my job
6:14:28
listing ID which is equal to awaiting params I also want to get my job listing
6:14:34
which is a wait get job listing with my job listing ID
6:14:39
and I need to make sure that this is an asynchronous function and this get job listing function I'm going to paste in and explain exactly what's going on
6:14:46
because it's pretty similar to stuff that we've already seen before Let me just make sure we get all of our different imports in place and our last
6:14:53
import right here There we go And there we are So essentially what I'm doing is I'm getting my job listing So I'm
6:14:58
getting my job listing based on an ID You can see here my wear clause to make sure it's a published job listing and it's based on ID And I'm also getting my
6:15:05
organization information And if my listing is not equal to null then I'm essentially just making sure that I cach
6:15:10
based on my organization ID as well And I believe that's something I should have done on my page for my organization list
6:15:16
So I think that's in my shared component my job listing items If we scroll all the way down here to the very bottom
6:15:21
when I get my job listings you can see that I'm getting my organization information but I'm not actually caching
6:15:27
based on that information So let's do that real quick We'll say const data is equal to awaiting this and then we can
6:15:33
return our data down here But we can add in some additional caches So we can say data dot
6:15:39
for each listing And what we want to do is we want to run some specific code to cache the listing
6:15:46
So we can just do this code right here Organization ID
6:15:54
Make sure I get the ID column from here There we go So now I'm just making sure I'm caching on that organization ID as
6:15:59
well inside of the section since I am relying upon that organization data So now with that done all of this code is
6:16:05
pretty much like we would expect it to be So now we have our job listing Now this entire top section of our job listing details is identical to what we
6:16:12
had over here These two are essentially identical So what I want to do is I want to render out all the same stuff that I
6:16:18
had before So you can see this is all that same stuff I'm just going to close off my divs just like this And this is
6:16:23
all the same content that I had in the other section So let's make sure that I import all of these things Just like
6:16:28
this we have our job listing organization First I should probably check if our job listing
6:16:34
is equal to null Then we want to return not found There
6:16:40
we go Super straightforward We get our avatar fallback Also we should get our name initials Again exactly the same as
6:16:46
what we had in the other section So there we go We got those And then all the rest of our job listing information is right there And then finally we have
6:16:53
our close button showing up here So let's get our button import Make sure I get the right one Import link And we're
6:16:59
going to import for converting our search params Just like that And then finally our X icon There we go So that
6:17:05
hopefully should be everything You can see it essentially looks identical And we're on a much larger screen size You can see even larger We now have the
6:17:12
ability to resize this And you can see things move around exactly where they need to be based on whatever screen size we're currently on and how wide our
6:17:19
different containers are Now the next section directly after all of our stuff that we have here so we can kind of minimize all of this down is going to be
6:17:25
the buttons that we're going to be rendering out So they're actually going to be directly inside inside of this section right here We're going to have
6:17:31
our job listing badges So we can come in here job listing badges just like that
6:17:36
Again exactly the same as the previous section You can see we're listing out all of our different badges Then after that we're going to add in a button for
6:17:41
applying So I'm just going to put the text applied there so we can come back to do this later And then also we need to render out our markdown So we have
6:17:48
our markdown renderer and we know that the source for this is going to be our job listing
6:17:54
And we can close that off So now it's going to put whatever the description for our job listing is right here Right now we have a rather short one but if we
6:18:00
were to clear out our search query just filter for anything I think this one maybe had a longer job listing Nope it
6:18:05
had the same size one But essentially that's where our job listing would go So now let's get our apply button in here
Applying for job listings
6:18:10
We can do a suspense real quick with a fallback that is just going to say
6:18:16
button and we're going to have that be disabled and it'll say apply just like that And
6:18:22
then inside of here we want to render out our apply button which is a component that we're going to create We're going to pass in our job listing
6:18:28
ID Joblisting do ID There we go So let's create a component
6:18:34
apply button This takes in our job listing ID And then what we want to do is essentially do our popover kind of
6:18:40
like we did before for permissions So I'm going to kind of copy this over because it's something that we've already done before Let's make this
6:18:46
asynchronous We're going to create our pop over just like that Our popover trigger our popover content our sign up
6:18:54
button which we want to make sure we import our own And there we go So essentially if we don't have an account
6:18:59
we cannot apply for the job As you can see here we're looking If we don't have an account then we want to render our
6:19:04
popover that says "Hey you don't have an account yet you need to create an account before you actually apply for a job We can test this by really quickly
6:19:11
coming over here I can do a quick log out and then we can come over and we can click on a particular job And of course
6:19:17
I'm getting a thing that says I need to redirect And that's because all the way down inside of our middleware if we open
6:19:23
that up we need to make sure that we specify our job listing page as public So we can say slash job
6:19:30
listings star or sorry dotstar There we go Now that should be a public
6:19:36
page So now we can go to this page We can click on a job listing And of course maybe I need to refresh my page Oh of
6:19:41
course I should probably spell job correctly That should fix it Now you can see I can click on this apply button And you can see I'm getting an error You
6:19:47
pass multiple children to the sign up button So let's go ahead and fix that particular problem We're going to go back into our app into the job listing
6:19:53
page We want to get on the page itself And it looks like our sign up button had
6:19:59
a problem inside of it I believe the problem is this space right here that is what's causing the problem to have multiple children being rendered Now you
6:20:05
can see when I click apply you need to create an account before applying for a job Sign up and it's going to bring me over to that page to sign up if I want
6:20:10
or I can just go ahead link with my GitHub account like I had before Going to take a little while to redirect me and now boom it's back to here where
6:20:17
hopefully I can now render out a button to actually apply So before I can render the button I first need to figure out if I've already applied for the job or not
6:20:23
So we're going to create an async function called get job listing application This is going to take in a
6:20:29
job listing ID and a user ID So we have our job listing ID
6:20:37
and our user ID just like that And now what I want to do is I just want
6:20:43
to run a function to be able to get that information So return db.query on our job listing application table I
6:20:50
want to find the first one that meets both of that criteria So I'll just copy over the and clause that we have for our
6:20:55
wearer here There we go So where my job listing ID is equal to the ID and my user ID is equal to the user ID Rather
6:21:02
straightforward We can also make sure that we cache this information and we can add in here a cache tag which is get
6:21:08
job listing application ID tag There we go And we can pass in the job listing ID
6:21:14
and the user ID just like that And now we have this information cached and we can use it in our application So let's
6:21:21
scroll back up to our apply button If we don't have if we do have a user then what I want to do is I want to get the application
6:21:27
So we can call await by getting my application passing it in my job listing ID and my user ID and then we can say if
6:21:34
our application is not equal to null then we've already applied So we should just let the user know hey you've already applied So I can
6:21:40
say const formatter equals new intl.relative
6:21:46
whoops inl.relative time format undefined We want this to be
6:21:51
a style which is going to be short
6:21:56
and we want it to have a numeric of always
6:22:02
There we go And then what I want to do is I want to get my difference in days So we'll say the difference is the difference in days
6:22:09
application.created at so that's the day I applied for the job and new date So
6:22:15
again we need to make sure that we await connection before this Whoops connection
6:22:21
There we go Because we're doing something that's dynamic that Nex.js needs to know about And then finally we can return here essentially our code
6:22:28
that is going to render this out So a class name that says text muted foreground text small
6:22:34
you applied for this job And then we can put whatever our difference is going to be So difference is equal to zero We'll
6:22:41
just say today otherwise we'll put whatever that difference is formatted So we'll say formatter
6:22:49
whoops formatter.format our difference and we want to format
6:22:54
that as days There we go So now it's going to say you applied however many days ago if we already applied But in
6:23:00
our case we've not applied for this job So this does not apply to us So we can move on to the next section where we can actually add the button But first we
6:23:06
need to check to make sure we have a resume because we can't apply for a job without a resume So we want to get our
6:23:11
user resume and that's going to be calling get user resume which is a function we'll pass a
6:23:18
user ID into So let's just copy one of these functions because it's going to be pretty much identical Get user resume
6:23:23
This is going to take in a user ID as the only property
6:23:28
There we go It's going to be caching this on get user resume
6:23:34
ID tag And that ID is just the user ID because that is the primary key for the ré table User ré table And we don't even
6:23:42
need an and query here It's just going to be a simple check on the ID field for
6:23:48
our user ré table There we go So if that ID is equal to our user ID we are good
6:23:53
to go And I believe this is just user ID There we go Now we do need to add caching for this section So I'm going to go down into my features folder in the
6:23:59
user section inside a database inside a cache I'm going to paste in our file for this which is user rums Very
6:24:05
straightforward Same as everything we've done before We have a global tag we have an ID tag and we revalidate both of them down here So let's make sure that we
6:24:11
import this function And now we actually have the ability to get the user resume to make sure they have a resume So the
6:24:17
next check is going to look very similar to the one up here We're going to check to see if they have a user resume So if their user resume is equal to null then
6:24:23
what we want to do is we want to essentially tell them you need a resume You need to upload your resume before
6:24:31
applying for a job Then what we want to do is we want to render out a button as child because
6:24:37
this is going to be a link and this link is going to go to the page for rendering or for uploading a resume which is user
6:24:43
settings/resume upload resume There we go So now we should actually
6:24:49
see the apply button and we can see that we don't have a resume and this will redirect us to the page even though it doesn't exist yet Now before we jump
6:24:56
over to work on that page I still want to actually finish out what the application section is going to look like just so we have this page entirely
6:25:02
done before we move on So now we know that we can essentially create an application So here I want to render a
6:25:08
dialogue component that allows us to finish off what our application looks like So we're going to have our dialogue trigger This is going to be a button
6:25:18
And this button is just going to say apply just like all the other buttons we've been working with Our dialogue content We want to make sure that this
6:25:24
is a large scale dialogue So we're going to add some class names Medium max width is 3XL We want to have our max H be a
6:25:33
calculation of 100% minus 2mm
6:25:38
And then we want our overflow to be hidden And finally flex with a flex column There we go Now we can go ahead
6:25:45
and we can add in our dialogue header The dialogue header is going to have a dialogue title
6:25:51
That's just going to say application Then we're going to have a description
6:25:58
There we go This is going to say applying for a job cannot be undone and is
6:26:05
something you can only do once per job listing just so they know not to try to
6:26:12
do this multiple times and once they do it they are done It's kind of a warning for them Then we're going to have our div that fills the full screen size Flex
6:26:19
one overflow of Y of auto so it scrolls properly And this is where we're going to put essentially our form for doing
6:26:25
this New job listing application form We're going to pass in our job listing
6:26:31
ID which is just job listing ID Now let's go ahead and work on creating this form So we're going to come over here
6:26:36
into our component section for our job listing component We're going to create a brand new file and we're making that
6:26:42
form So export function with that name just like that And it's going to be taking in our job listing ID
6:26:51
job listing ID which is a string There we go And we essentially want to do the same thing we've done in all of our
6:26:57
different forms So we're going to get a form which is use form There we go We want to make sure we pass
6:27:03
in our resolver which is a ZOD resolver which is going to be our new job listing
6:27:12
application form Just like that And make sure that this is actually a schema application schema There we go
6:27:19
And our default values for this is just going to be cover letter of an empty string because that's the only thing
6:27:24
that we can actually define for this schema So let's go ahead and create this schema directly inside of here We can kind of minimize these down Move all the
6:27:31
way down here Export consting application
6:27:36
schema that is equal to Z.Object
6:27:42
Cover letter is the only property in here which is a string that is nullable
6:27:47
And we want to transform our string Essentially converting all of our values
6:27:52
trimming it just like that If it's equal to an empty string we return null
6:27:59
There we go Otherwise we return our value And I
6:28:05
believe if I put nullable after here that'll make sure that this is not nullable there And there we go Now essentially that's exactly what we want
6:28:11
Make sure I spell application properly And now we can hopefully import this
6:28:17
directly in here Looks like I spelled it incorrectly New job listing application
6:28:22
schema And over here there we go Hopefully those are spelled correctly Now now the next thing we can do is we
6:28:29
can return our form I'm going to copy this in because it's very similar to all the forms that we've already worked on before So we can come in here with our
6:28:36
form field Going to make sure we import everything first and then I'll explain exactly what's going on inside of all
6:28:41
the code get our description our message and then finally our button down here
6:28:46
with that loading swap text So all we're doing inside this form is we just have this form item which is going to be a
6:28:52
cover letter And this is rendering out our markdown editor The exact same thing we used for our job listing description
6:28:58
We're now using it in this dialogue for this specific form Now we need our onsubmit function This function is going
6:29:04
to be taking in all of our different data which is going to be inferred from ZOD Just like that That's our new listing schema We want to get our
6:29:11
results which is calling await create job listing application It's a function
6:29:16
we're going to create where we pass in our job listing ID as well as the data for this application we want to create
6:29:23
Let's make sure this is an asynchronous function And then what we can do is if our result
6:29:29
error there we go
6:29:34
And then what we're going to do is just render out a simple toast message So we'll just say toast
6:29:39
And this will just be our results dossage Just like that And otherwise we're going to render out toast.uccess
6:29:47
And that's our results message There we go And we'll make sure that we return after this So we only render one of
6:29:52
these two different toast messages So now let's create this job listing application function So what we can do
6:29:58
is we can go into our actions specifically for our job listing applications So we can come into our job
6:30:04
listing applications and this form should also be inside of here So let's create a folder inside of here called components Just like that Move this form
6:30:11
into here because that's really where this form should be living And make sure that's right there And then inside of our DB we're going to create a brand new
6:30:17
file called joblisting applications.ts
6:30:23
And this is where we're going to create this function And this is going to be an action So
6:30:29
it's going to be a use server at the top And this needs to be asynchronous So this action is going to take in our
6:30:35
schema as well as our job listing ID So let's make sure that we import those particular properties Then what I want
6:30:40
to do is I want to check to see if I have a user and everything like that So we can come in here with our permissions Say you don't have permission to submit
6:30:46
an application So if we don't have a user account obviously we have a permission error Next I want to get my
6:30:52
user resume as well as my job listing because I'm going to use both of those to check to make sure we have permission
6:30:58
promise.all all and I'm going to return get user resume
6:31:04
just like that which is going to take our user ID and then we're going to get a public job listing which is going to
6:31:10
take in our job listing ID There we go And these are functions that we're going to create but essentially they're the same as functions we've already created
6:31:16
So to save you the time of me typing out this code that we've already done a million times I'm going to paste in the particular code And again you can see
6:31:22
we're just querying the database specifically for public job listings that match our ID as well as when we go
6:31:28
down below to the next level for our résumés we're specifically querying our table for résumés that match this
6:31:34
particular ID And we're only returning the IDs of the actual column So the user ID and the ID here because that's all we
6:31:40
care about We just want to see if these things exist or not So then we can check to see if either of these are null So if the user resume is equal to null
6:31:47
or the job listing is equal to null that means you're trying to apply to a job you don't have access to or you're just
6:31:52
essentially applying without a resume So we return that same exact error So then we can move down to the next check we
6:31:58
want to make and this is going to be to make sure our application data is successful So we have our success and our data which comes from new job
6:32:04
listing application schemas safe parse and we want to parse that unsafe data
6:32:10
There we go Then we can say if we are not successful then we're going to return essentially an error I'm going to
6:32:15
copy over the error message Essentially just says there is an error submitting your application Finally if everything
6:32:20
is successful we can finally actually work on inserting this So we can say insert job listing application and we
6:32:27
can pass along our job listing ID our user ID and then all of our different data which in our case is just the cover
6:32:33
letter So now let's go ahead and actually make this database function And it looks like I put this in the wrong folder So let me come in here We'll
6:32:38
create our actions There we go And action should be a folder not a file There we go So inside of here actions I
6:32:46
should move this up into my actions And then here joblisting applications.ts ts
6:32:53
And there we go Also I have my schema in the wrong location This should be in a file all the way up here Schemas.ts
6:33:03
There we go And I'll rename this to actions There we go So now we hopefully have everything working fine Let me just
6:33:08
make sure I get my imports proper That works fine there And this one it looks like we just have some errors because my
6:33:14
imports aren't lining up properly That's imported from the wrong location cuz I just moved it There we go That should
6:33:19
clean up all this Now all we need to do is create this particular function in our database folder right here Export
6:33:25
async function and we want to insert that user Now doing this particular insert is actually not too tricky I'll
6:33:32
import this code and again explain exactly what's going on in it So if we take a look at the code here we're taking in our application information
6:33:38
We're inserting it into the table passing along all the values And if for some reason we have a conflict I just want to do nothing at all not throw an
6:33:44
error If we happen to have a conflict it just means we're trying to apply for a job multiple times Not sure why that
6:33:50
would happen but essentially we're just going to ignore that And actually we can remove that We can just throw an error if we're trying to apply for the same job multiple times because that's
6:33:56
definitely not something that we want to do So now we hopefully have everything set up like we wanted to inside of here We can import this action And now we
6:34:03
successfully created a job here or an application I mean So now what we're going to do is we're going to return that message So we can return error
6:34:10
false and message your application was successfully
6:34:21
man I cannot type today submitted There we go And before we do that though I'm going to mark a little to-do here What
6:34:27
we want to do is we actually want to be able to AI generate a rating for the user So we'll say AI generation And to
6:34:33
do that we're going to be using ingest So we're going to say await ingest.end I'm going to be sending along an event
6:34:39
to ingest So let me make sure I import this There we go And I want to send along an event with a specific name
6:34:44
We'll call this app slash joblisting application.created
6:34:51
So that's the event name And we'll give it all the data that we need which is just our job listing ID and our user ID
6:34:57
Now in order to make this work we need to go into ingest and specify this new event So here we can say that's our
6:35:04
event name and we have data and that data is a job listing ID which is a string and a user ID which is a string
6:35:12
Now if we give that a quick save and we go back over to our action you can see that this is working We just need to obviously implement the ingest function
6:35:17
for that which we'll do a bit later For now though I want to test to see if applying for job actually works So I'm
6:35:23
going to do two really quick things The first thing I'm going to do is I'm going to disable the need for a resume So I'm just going to essentially remove this
6:35:29
line of code because now we don't need a resume to apply I'm going to go back into my page in particular where I'm
6:35:35
using this First of all let's get our form imported there That works fine And I'm going to come up here and I'm just going to comment out this particular
6:35:41
code as well So now let's see if we just save everything Looks like this needs to be imported And that should hopefully be
6:35:47
everything we need Looks like I still have an error inside of this file My control is not working properly for my
6:35:52
form Let's see if I called that cover Oh I just called it cover potentially No it
6:35:57
should be cover letter that's for sure I think I just have something being imported from the wrong location There we go Need to make sure that I update
6:36:03
the import right here Now that should hopefully fix all the different errors we had Give that a refresh and my page
6:36:08
should render Looks like my page is not working cuz this should be a client component There we go Now if we give that a save
6:36:15
you can see everything's rendering And when I click apply it's got a little bit of a problem going on Now the reason for this is as you can see we imported our
6:36:21
button from the wrong location So let's come down here and make sure that we import the button from the correct location Now hopefully that'll remove
6:36:27
all of our errors We click apply You can see apply for a job cannot be undone Blah blah blah blah blah Import anything
6:36:33
I want from my cover letter We can click apply and hopefully that works Your application was submitted successfully
6:36:38
And let's actually see if that worked We'll come over to our actual database and we'll check to see if we have an application So we can go to our job
6:36:43
listing applications and it does look like we have an application with that cover letter information passed inside of it So at least we know that this job
6:36:50
application is working and successfully submitting all of its information I do want to go through and un essentially
6:36:56
remove that stuff that we removed So inside of our actions I want to make sure that we're checking for our user resume here And on the actual page
6:37:03
itself let's go back to that page I want to make sure here again I'm checking for the user resume So now if I were to try
6:37:08
to apply for a job we can come into here You can see if I try to click apply I need to upload my resume And for this particular job you can see you applied
6:37:14
for this job today So it knows that I applied Now the next logical step is going to be moving to make it so that we can upload an actual resume And the
User resume upload
6:37:20
really nice thing about this is it's going to allow us to do a lot of our AI stuff as well So we're going to go into our jobseker folder here and I want to
6:37:27
add a new folder for user settings And inside that I want to add a folder for ré because we're going to have two
6:37:32
different settings We're going to have notification settings and ré settings So in here we're going to create a folder for ré and then we're going to create
6:37:38
our page.tsx that we're going to render inside of here So let's export that function
6:37:44
This is going to be our user resumeé page There we go And this is going to be a
6:37:50
relatively simple page all things considered because we don't really have much going on in here other than a resume that you upload And then we're
6:37:56
going to do all the AI stuff in the background behind the scenes So we can do a quick return here I want to render out a div This div is going to be kind
6:38:03
of small I don't want it to be super wide So we'll do a max width of 3xl We're going to center it with mx auto
6:38:08
add some space some spacing on the top and bottom as well as spacing out the different content inside of here because
6:38:14
essentially we're going to have different sections inside of this div We're essentially going to have a section for uploading our resume a
6:38:20
section for actually viewing our resume and a section for other things as well So let's come in here with a little title We'll just say the title is going
6:38:26
to be upload your resume There we go And then we'll add some classes to make the text on that a
6:38:33
little bit larger So we'll say text 2XL
6:38:38
and font bold Now before we get too much further I want to make sure that our page is rendering So we can go over to
6:38:44
here click on settings and we should hopefully be brought to that settings page And it looks like we're brought to the notification section which is fine
6:38:49
That's kind of the default place you want to go We'll come over here and just change this to resume for now So at least we have something popping up But
6:38:55
you'll notice we get a 404 error The main reason for that is because in my sidebar section I don't have anything for user settings So I'm going to create
6:39:01
a user settings /resume folder And inside of this I'm just going to create a page.tsx
6:39:08
export a function Make sure it's the default function This will just say user
6:39:13
ré sidebar Doesn't really matter what we call this And in here I'm going to
6:39:18
return a shared component which I'm going to call user settings sidebar And that's because I'm going to
6:39:24
share this sidebar between all my user setting pages So let me make sure I render that as a component There we go
6:39:29
And then I just need to create that component which we'll do in that shared folder we've already created up here.tsx
6:39:35
export that function just like that And inside here I essentially just wanted to return a sidebar nav menu group that
6:39:41
custom component that we've created And we'll pass in the items for all the things that we can render which is really just two things We're going to
6:39:47
have an href for our actual page So let me make sure we get that in there Href This is going to be for/ user settings
6:39:54
slash notifications So this is our notification settings And let me get this so it formats properly There we go
6:40:00
Next section I need is an icon for this We're going to use a bell icon which is pretty normal for notifications And
6:40:06
finally we're going to put in a label which will be the text that will just say notifications There we go Now I'm
6:40:12
going to copy that down to have our resume section as well So we're going to have a file user icon as well as resume
6:40:18
here and resume here So now if I make sure I import that properly we should see that in our sidebar we at least have
6:40:24
those sections in it So let me just give this a quick refresh real quick There we go You can see we have our H1 showing up
6:40:30
And over here you can see over in my sidebar we have notifications and resume So at least those are both showing up
6:40:35
And while I'm at it I'm going to come over here copy this resume folder and change it to notifications
6:40:42
There we go Just so we have our page for notifications already set up So that way when we swap to that page it'll work just fine Now going back to the page
6:40:48
that we were actually working on by just minimizing this down and closing out of this as well you can see here we are I
6:40:53
want to add a little bit of spacing on the left and right So we're going to come in here with a simple px of four just to give us some spacing on our page
6:40:59
That looks really good And if we're on larger screen sizes you can see it's just going to center itself even when our sidebar is closed So that looks
6:41:05
really good Now what we can do is we can actually work on putting the content inside of here And we're going to be using a card for styling everything with
6:41:11
a card content And inside this card content is where we're going to put our drop zone Essentially we'll just put the
6:41:16
text for now of drop zone Just like that And that's essentially going to be where we drag and drop our file to upload it
6:41:21
Also I'm going to create some suspense sections And one of these is going to be for rendering out our resume details
6:41:27
This is going to be essentially the button to view more about our resume And that is going to be inside of our card
6:41:32
as well So let me make sure I get that up into there There we go And then the next thing that I want to do is I want to render out below our card suspense
6:41:40
container And this one's going to be for the AI summary
6:41:45
card Just like that And this is essentially going to be where we render out whatever the AI generates for our particular resume So let's come in here
6:41:51
Here we'll create an async function Resume details
6:41:56
return null And I want to do the exact same thing for our AI summary just so we at least have placeholders for those for now So if we give that a quick save
6:42:03
really nothing changed because these don't actually render out anything Now in order to manage file uploads in this system we're going to be using upload
6:42:08
thing which actually works really well with Nex.js It's the first time I've tried it and I I quite liked it So in order to get through the steps here we
6:42:13
can just copy over our install script Paste that down It's going to be rather straightforward And then we need to get our upload thing token So we can just
6:42:19
make sure we put that inside of our environment variables So we can scroll all the way down to our environment variables Create a section for upload
6:42:26
thing There we go And we can say that our upload thing token is whatever we're
6:42:32
going to get from our dashboard So we'll get that in just a little bit And then we can work on setting up essentially our file router And the router is
6:42:37
essentially the thing that allows you to actually hook up all the different routes that you have for uploading files Essentially you can think about it as
6:42:43
like an express background that manages everything for you Also we should make sure we force install these dependencies so they actually come through So I'm
6:42:49
just going to copy this router over and we'll make the changes we need because a lot of it is kind of what we already want So we'll say that we have an upload
6:42:55
thing folder And inside of here we're going to create our simple router And our router is rather simple So we're just going to put it in a single file
6:43:01
like this So let's scroll all the way to top and kind of go through this line by line The very first thing we're doing up here is we're just creating the function
6:43:06
that we use Now they have a fake authentication We'll remove that cuz we don't actually need that We'll use our own authentication I'm going to call
6:43:12
this a custom file router just because I like the name custom better Now here we're going to be using a ré uploader So
6:43:18
we'll call this a ré uploader And the nice thing is you just essentially define keys for all the different things that you want to do So our first key ré
6:43:24
uploader is for uploading a PDF file So we'll put in PDF here And then we can specify that we want the maximum size to
6:43:30
be 8 megabytes And I'm also going to put in here a keyword which is a weight server data Essentially what this does
6:43:36
is on the client we have the ability to listen to like a success event And this is just saying hey I want to make sure
6:43:41
that you wait until the server has said that we are successfully done before we go ahead and we submit the actual
6:43:47
success status from our page Let me get a comma here So really what happens down
6:43:52
here we have this on upload complete Normally without this it'll just send down to the client that things were
6:43:57
successful before this actually finishes We want to make sure this finishes because this is where we upload our actual file to the server And then that
6:44:04
way after we get sent back down to the client we can refresh the page so they can view all their resume information
6:44:09
Now we can get rid of a lot of these comments because we don't really need them And now we can move on to middleware which is all about handling permissions So we can just get our user
6:44:15
ID from that get current user function So we can say get current user just like
6:44:21
that Make sure that we await this There we go We don't even need this request because it's kind of already handled for
6:44:27
us inside this function This gives us our user ID And if user ID is equal to null we can just throw a specific error
6:44:33
So we'll say throw new upload thing error And we can just say unauthorized
6:44:39
There we go That's essentially what they're doing right down here We just did it up here for our particular code Then what we can do is we can turn the
6:44:45
user ID information so we can use it in other places For example when we upload our file So here now essentially we just
6:44:50
got the user ID made sure it's there and then used it or returned it So we can use it down here inside this metadata section Now inside this upload complete
6:44:56
the first thing I want to do is I want to get my user ID from that metadata just like this And the next thing is we
6:45:02
have type safety You can see all of this is type safe which is really nice And then the next thing we can do is we can actually do whatever we want with our
6:45:08
particular code So in my case I want to actually get the résé file key for the existing résé We'll just put a little
6:45:13
to-do to delete old ré cuz we'll do that in a little bit But the next step is to actually upload the new ré So we'll say
6:45:20
upsert user ré And we're going to pass in the user ID for what we want to
6:45:25
upload to as well as we want to pass in the ré file URL which is the file dot
6:45:31
And then we have this URL option right here And then finally we have the résé file key which we can get from here as
6:45:37
well as the key Now this key you can think about as like a unique identifier So an upload thing this is like the ID
6:45:43
of the resume in upload thing and the URL is just the public URL we can access the file from So people can view this
6:45:48
particular file So this gives us an ID and it gives us a URL and it's going to tie it to a particular user And the
6:45:54
reason we're using upsert here is because essentially I want to either insert a résé if they don't have one or I want to update their resume to be this
6:46:01
new ré if they already have one uploaded on our page Now the next thing that we can do is we can make sure that we
6:46:06
delete that old resume So I'll just kind of put the to-do below here because we're going to have to get the data and delete it So we'll put that down there And then the final thing that we want to
6:46:12
do is we want to be able to send off a request to our backend to do all the AI processing as well So we're just going
6:46:18
to say await ingest.end send and make sure that we
6:46:23
import this properly There we go And we want to send across an event that's going to say appres.uploaded
6:46:30
So whenever we upload a resume we're going to send across this event and then we can listen to that to do things such as AI processing or other things if we
6:46:36
want behind the scenes Also I'm going to pass along all of our user information for this ré as well Finally we can pass
6:46:42
down some type of message if we want to So we can say message and this is going to say ré uploaded successfully And this
6:46:50
is actually used by the front-end client Like this message gets returned down to our client Now here we're going to call
6:46:56
this our custom file router Oops Custom file router There we go And this is going to be custom
6:47:02
file router which is we're going to use for type safety later on in our application Now let's go ahead and actually create this ingest event and
6:47:09
then this function right here And then all we need to do is implement this on the front end and we're pretty much done So I'm going to copy the name of this
6:47:14
event over And what we can do is we can go all the way over to where we have our ingest client and we're going to add a brand new event for that So we'll come
6:47:21
in here give it that particular name I'm going to say that I specifically want this to return a user object
6:47:27
instead of a data object And it's going to have an ID which is a string That's the only thing we're going to be passing to this object And now if we go back
6:47:34
into our router we should see that this error has been removed because now we have that event Final thing we need to do is add this upsert user resume
6:47:40
function And if we go into our features section for users and database you'll notice we need to create a brand new
6:47:46
file for user rums So we'll say user rumés.ts we're going to export a function with
6:47:53
that specific name And we know it's going to take in a user ID
6:47:59
There we go And then it's going to take in all of our data Now this data is coming from the type of our user resume
6:48:07
table There we go and we want to infer the select property from that But specifically we want to make sure that we don't include the user ID because
6:48:14
it's already included here So we're going to say omit just like that And we're going to make sure we omit the
6:48:19
user ID just because we already have that included right here Now what we can do is we can call DB.insert
6:48:26
And we want to insert into the user ré table We want to insert the values And these values are our user ID followed by
6:48:33
all of our data that we passed in for our resume And in this one since we want this to be an upsert when we have a
6:48:38
conflict we just want to update the particular resume So we're going to take the target which is the user ré table
6:48:45
dot user ID And whenever there's a conflict on that key we just want to set the data to the rest of our data Just
6:48:51
like that Now the last thing we need to do is revalidate this So we're going to say revalidate user resumeé cache just
6:48:56
like that And we can pass it in our user ID And then finally make this an async function so that we get rid of all of
6:49:02
our errors There we go And it looks like now everything is working as we expect it to If we go back over here we should
6:49:07
be able to import this And we should see everything works fine with no errors Now we are getting some errors So I most likely messed something up in my typing
6:49:12
And you can see here I used infer select This should be infer insert instead And that does clean up our different errors
6:49:18
that we have Now I'm going to go ahead and work on the functionality for deleting the old résé as well while we're here before we actually go ahead
6:49:24
and implement the uploading of a résé because if someone uploads a new ré and we call this upsert that's going to overwrite the key in the URL for the rs
6:49:31
But on upload thing where we actually have that data stored the old resume is still going to be there and it's just going to kind of be orphaned on its own
6:49:37
with no way to delete or reference it which means we're going to be racking up more storage bills and we don't really want that So here we're going to first
6:49:43
check to see if they have a resume We can do that real quick by just saying ré file key is equal to a wait get user ré
6:49:50
file key We can pass it in our user ID And then we can just create this function down here
6:49:56
Get user ré file key This is going to take in a user ID which is a string and
6:50:01
then we just want to return the data that we're going to be getting back from that So we're going to say db.query user ré table We want to find the first
6:50:09
one where and in our case we want it to be equal to user ré table
6:50:15
Whoops Table dot user ID There we go So we're making sure that that's equal We
6:50:20
only really care about one column So I'm just going to manually get that exact column which is our resume file key
6:50:25
There we go So we'll say const data is equal to awaiting that And then we can just come down here and
6:50:32
we can return data.res file key Now we could add caching to this function if we want But in our
6:50:37
particular case it doesn't really make sense to cache this particular information because it's only going to be accessed when we're uploading a new
6:50:43
resume which happens very rarely and most often they're not going to have an actual cached piece of data for that So I'm not going to bother with caching
6:50:49
that information So now what we can do here is we can essentially say hey if there is a résé file key then we want to
6:50:55
delete the old ré because that means they had one before and it's stored on upload things still but we now added a
6:51:01
new ré that we replaced it with So we want to delete the data for the old one while keeping our new database record
6:51:06
This is actually incredibly easy to do So we'll just say whenever it's not equal to null we're going to come in here and we're going to await upload
6:51:12
thing delete files and we're going to pass in our ré file key Now this upload thing
6:51:18
variable is something that we're going to need to create a new client for kind of like how we do with almost all of our services We are going to create a client
6:51:23
file where we export a constant variable with that name and it's going to be called UT API There we go And this is
6:51:30
going to take in our token And we know that our token is our upload thing token just like that And we of
6:51:38
course want to put this into our environment variable So let's import our env
6:51:44
And we're going to say hey this is going to be a string with a minimum value of one Also this
6:51:50
should have a minimum value of one I don't know why it got changed to 10 There we go Come back over to this location We can import upload thing Just
6:51:56
like that And in here everything is working fine So it looks like all of that is working fine We have the deletion set up We have the insertion
6:52:02
set up properly We have this event that we're going to get to in a little bit So I'm just going to mark this as to-do since we actually haven't processed that
6:52:08
event yet There we go And now we can work on the next steps from the documentation because essentially now we have the ability to upload things but we
6:52:13
don't have the actual ability to interact on our client with any of these different things So we scroll down a ways here you can see that we first of
6:52:19
all need to create some router routes for all of this inside of our application So we're going to go into this API folder So app we're going to go
6:52:25
into API We're going to create a brand new folder This is going to be for upload thing And we're going to create a
6:52:31
brand new file called route.ts And we're just essentially going to copy this exact code paste it in and then
6:52:36
change around any of the typing information that we need So for example we called this custom file router just
6:52:41
like that And otherwise it looks like everything else is exactly the same So we'll just keep that all as is Next if we scroll down some further we can
6:52:47
essentially see how we actually use our buttons inside of this So I'm going to copy this over and I'm going to put it inside of a components folder So just
6:52:53
minimize this down in our services for upload thing We'll create a new folder called components There we go And inside
6:52:59
of here we'll create a component that's called upload thing.tsx This is going to be for our upload
6:53:05
components Then we can just paste in what those components are Now we're going to modify these quite a bit but what we can do is make sure we use the
6:53:11
correct file router which is custom file router Just like that Paste that into both of them And instead of uploading
6:53:17
these or exporting these directly I'm actually going to change this to be called component
6:53:23
And I'm going to add component to the end of this one And what I want to do is I want to create my own component that wraps these that has all my own
6:53:28
customization to it So for example we'll export a constant called upload drop
6:53:34
zone Just like that And actually I'm going to make this a function So we'll say function upload drop zone There we
6:53:39
go And inside of here we can return that upload drop zone component and we can
6:53:45
pass it in all the different information that we want So inside of here I'm going to take in some props So we're going to take in a class name One of my favorite
6:53:51
props to take in on client upload complete Make sure I spell that properly
6:53:57
We're going to get an on upload error And then just all the remaining props And we're going to set this equal to
6:54:03
component props and it's going to be the component props of this upload drop zone component So we'll say upload drop zone
6:54:11
component just like that Make sure this is type of Give that a quick save And
6:54:16
now you can see we can pass all that information into here So for example we can pass along all of our props plus these three things as well because we're
6:54:23
going to specify our own class names and other things So we'll come in here with class name just like that We're going to
6:54:28
use the CN function to be able to combine our class names with the existing class names I'm just going to give it some boilerplate class names For
6:54:34
example we're going to make it have a dashed border Size of two Make it have a muted color Rounded is going to be large
6:54:41
Flex And then we're just going to center everything just like this And then I'm going to add on any additional class
6:54:47
names that we want using this class name prop here Next we're going to have on client upload complete That's going to
6:54:53
take in a response And then what we want to do is if we hover over this response you'll see it's an array of messages
6:54:58
What we can do is we can just say res each So for each one of our messages it's going to give us some server data
6:55:05
Whoops Server data Just like that And all I want to do is I want to render out a toast Success for that server data
6:55:12
message So we'll say server data dossage There we go And that's going to be whatever we return down from our server
6:55:18
So inside of that route that we created there we go This message right here is exactly what that's going to be So
6:55:23
that's what this is going to return And then we can call on client upload complete just like that with our
6:55:29
response variable Finally I want to do essentially the exact same thing but for upload error So on upload error this is
6:55:36
going to take in an error just like that And this is going to be an upload thing error with some JSON
6:55:43
data in it There we go And then what we can do is we can use that error to make a toast So we can say toast error error
6:55:50
dossage There we go And then we can say on error
6:55:56
we can pass along that error message So essentially all I'm doing is I'm making it so I have some custom classes some
6:56:02
default behavior for success and some default behavior from error But I can add in my own custom behavior if I want
6:56:07
for each one of these Now I could do the exact same thing for the upload button but in our case we're only using the drop zone So I'm not even going to
6:56:13
bother with the button I'm just going to have the drop zone component Now we can go further to see what we're going to do with Tailwind We are using Tailwind V4
6:56:19
So we can see to use that it's as simple as just creating these two different import statements So I'm going to copy these different import statements I'm
6:56:25
going to move over into my application We have our global CSS right here Scroll to the very top of our page And we're
6:56:31
just going to paste those in like that Now you'll see that we need to make sure that our actual path for this node
6:56:36
modules is correct And in our case since we are inside of an additional folder we need to add dot dot slash do And that's
6:56:42
going to bring us directly to node modules If I just come up here again and I type in you'll see n OD modules this
6:56:49
is the correct folder that we're inside of because essentially we're going backward one to app backward one to source and then into the node modules So
6:56:55
we just need to make sure that's lined up with our particular path Now we can go ahead and we can actually finish off what the rest of the document is And
6:57:00
essentially this is the putting a button on your page and making it do something section So that's all we have left to do
6:57:06
is just essentially add in a button to our page and then deal with some SSR stuff which is what we're going to be doing as well So we're going to go all
6:57:11
the way back over here We're going to make sure inside of upload thing here that we actually specify this as a client component So we'll say use client
6:57:18
just like that because obviously we're using functions and so on Then what we're going to do is all the way up here inside of our user settings for ré I'm
6:57:25
going to create a brand new file called drop zoneclient.tsx and again I'm putting that underscore to
6:57:31
kind of denote that this is a file that is specifically only made because I need a client component And that's going to
6:57:36
be what this section right here is where it says drop zone I'm going to be using this drop zone client So we're going to
6:57:42
export a function called drop zone client This is going to be a use client And all
6:57:48
this is going to do is essentially return that drop zone component that I created So it's upload thing drop zone
6:57:54
And I believe I just called it upload drop zone There we go Get that from the right location And then I just need to
6:57:59
make sure I return the specific things I need So the main thing is endpoint This is going to be pointing to the endpoint I created which was ré uploader This the
6:58:06
only one we have And then on client upload complete I want to refresh my page So we can come in here we can get
6:58:11
our router is equal to use router just like that and then I can say
6:58:17
router.refresh router.refresh
6:58:23
Now the reason that I'm refreshing my page on a successful upload is because when we upload a file that means that the file is now on the server So we want
6:58:29
to refresh our page so we can show the user the button that says hey here is your file you can actually download and
6:58:34
use it And then we're going to do this final step of improving SSR This is just something that we need to do to make
6:58:39
sure it works properly with Nex.js And we specifically have a section down here on how to do it with dynamic IO which is
6:58:45
the feature that we're using because we're using the experimental version of Next.js Now to make this easier I'm actually going to be creating a custom
6:58:50
component for this So in our component section we're going to call this upload thing SSR.tsx
6:58:56
And inside of here we essentially need to create this little component right here So we're going to export this function And this one actually is not
6:59:02
one that we export but we do want this to essentially wrap all of our code to say hey this is dynamic code So let's
6:59:08
make sure that we import this next SSR plugin This is coming from
6:59:15
upload thing slash reacts SSR plugin There we go We
6:59:21
also need to be able to extract the router config from our custom file router
6:59:27
There we go So now that should be everything we need to do to get this particular component All we need to do next is wrap it inside of a suspense As
6:59:33
you can see right here that's what this code is doing So we'll say export function
6:59:40
upload thing SSR And this is just where we essentially wrap what we created here in suspense
6:59:48
So we'll say suspense and we will say UT SSR There we go And
6:59:55
if we import suspense we should see that everything is now working And all we need to do is just add this essentially to our page If we look here we
7:00:00
essentially just add it to our page anywhere that we want So we can come all the way back over into our layout and we can make sure we add that particularly
7:00:06
in There we go And that's everything inside
7:00:12
of the documentation done All we need to do is hook up to make sure that we have our actual API key and to make sure that
7:00:17
we have everything imported properly So here we're going to render out our drop zone client There we go And now let's go
7:00:23
ahead and make sure we get our API key So we can just create an account go onto our dashboard sign in do whatever you want And once you're here you should be
7:00:28
able to essentially create an app You can see I have this job board test I'll create a brand new app We'll just go on the free T tier here We'll say job board
7:00:36
final And then what I want to do is I just want to create this app And I'll zoom in a little bit so it's a little easier for you to see There we go Scroll
7:00:42
all the way down Create that app And then we can actually access our API keys by clicking this key button up here And
7:00:48
we just want to get our key just like this So we'll say secret key And then if we scroll all the way to the side you
7:00:53
can see right here we can copy this particular key And now we can move into our environment variable and paste that key down So now we have our secret key
7:00:59
for this particular application We can now hopefully be able to upload files to this So now what we can do is we can
7:01:05
just give this a quick refresh Hopefully it'll be able to import everything properly Looks like it's trying to import from the wrong location So let me just try to fix that up This is a
7:01:11
capital D and this is a lowercase L That should hopefully fix that import There we go Give that a quick refresh And it
7:01:17
looks like we have some errors possibly with our TypeScript First thing I'm going to do is I'm just going to restart my server So we're going to come in here
7:01:22
We're going to restart our server just because it might fix some of these import errors that we're having between these files not showing up and thinking
7:01:28
that they're there versus not there And then we're going to look inside of our CSS to make sure that we actually have everything correctly imported for our
7:01:33
files And already I can see a problem I forgot to put a semicolon right here There we go That should clean up our Tailwind specific problems And now if we
7:01:40
give this a refresh Hopefully everything is going to work on our page It'll take a few seconds for it to render But now we'll see that we have the ability to
7:01:45
choose and upload a file So to test this file upload I just have this old ré file that's just like a template file that
7:01:51
I'll just upload to actually use We'll click upload one file That should hopefully upload that file And of course
7:01:56
we're getting an invalid token error I believe the reason we're getting that error is because we actually copied over the wrong secret key We should be
7:02:01
copying this V7 right here If we paste that down you can see that that's our actual upload thing token The other one's like a secret key that we use for
7:02:07
API request which is not what we're doing We actually don't want to use that at all because that shouldn't be exposed to the client So we can come over here
7:02:14
with our upload thing token just like that So now we have the correct token being used And hopefully if we give this
7:02:19
a little bit of an upload button click it should work And there you go You can see ré successfully uploaded And if we
7:02:25
come over here and we access our files you can see that file right there has been uploaded And if we go to our user
7:02:30
ré section here you can see we have that file being uploaded and the résé file key Now the important thing that I want
7:02:36
to show you is that when we upload a new file it'll actually overwrite this old file that we have right here So I'm
7:02:41
going to come in here and I'm just going to upload a brand new file We're going to click upload It's the same exact file but we can see that it should work
7:02:47
properly If we didn't do the deletions we would have two files here but when I refresh you'll see we now only have the
7:02:52
one file And over here we have just still one user file resume and it has that exact file uploaded inside of it So
7:02:59
now that we have the ability to upload a specific resume to a specific user we can dive into the fun AI stuff of
7:03:04
creating like AI summaries this ranking applicants and all that other really cool stuff So let's go ahead and actually work on that next And actually
7:03:11
before we dive into that I want to make sure I add a button here that shows the user's resume as well as the section for
7:03:16
the AI summary below it So let's do that real quick because that will not take us very long So resume details This is
7:03:22
going to be a rather simple function that first of all is going to get our user ID which is await current user Make
7:03:28
sure I spell user not organization There we go And then what I want to do is I want to get the user resume which
7:03:34
is await user resume And we're going to pass in our user ID
7:03:41
There we go And then of course if our user resume is equal to null we return
7:03:47
null And we essentially do the exact same thing up here for if our user ID is
7:03:54
equal to null Also we'll just return not found here because obviously we don't have a user So we shouldn't be able to
7:04:00
access this particular page Now the next thing that we can do is we can actually use that user resume to render out our
7:04:05
card footer which is going to be where our button shows up So we can say button Make sure we get the correct one as
7:04:10
child and we want to render out a link component with an href that points to that user resumeé
7:04:18
file URL There we go And for this actually button we can just say view resume And also since we want this to
7:04:24
redirect to a brand new page without changing our current page we'll set the target equal to underscore blank And
7:04:30
we'll also set the re equal to no opener
7:04:35
no refer There we go That'll just open our page in a brand new tab instead of opening it in the current tab Now we can
7:04:41
come down here and we can create a function async function Get user resume
7:04:49
This is going to take in a user ID And since you've seen me create functions like this a million times we'll just end
7:04:54
up pasting that function in real quick And essentially all we're doing is we're just creating that table specifically where the user ID is equal to the ID
7:05:01
that we pass in Now if we give that a last import you can now see we have that function And you can see the view resume
7:05:07
button shows up Now the next section we have to work on is our AI summary card which is actually pretty similar to what we have here We first want to get the
7:05:13
information for our user ID as well as our user resume And we also want to check to see if our user resume
7:05:20
summary is equal to null and return as well in that particular scenario Essentially we want to make sure that we have a summary to render out to the user
7:05:26
before we try to render it And we're going to put this inside of a card So we'll come in here with a card header
7:05:32
And this is going to have a class name of border bottom just so we have a little bit of distinction between the header and the rest of our content
7:05:39
Card title This is going to say III summary Then we're going to come down here with a card description
7:05:46
This card description is going to say this is an AI generated summary of your resume This is
7:05:55
used by employers to quickly understand your qualifications
7:06:01
and experience There we go
7:06:07
Let me make sure I spell everything properly
7:06:13
And there we go Now we have that And all we need to do is render out the content Card content And this card countdown is
7:06:19
going to use markdown So we're going to use a markdown render because we're going to tell the AI to essentially return to us a markdown summary So we'll
7:06:25
say source here is user resume.AI summary There we go So right now it doesn't
7:06:32
matter how many times we refresh the page nothing's going to show up there because we don't have the AI summary yet So that's the section that we can kind of work on next is making that AI
AI resume summary
7:06:38
summary for our application And that is going to be done using ingest because that allows us to do long running background jobs and they have lots of
7:06:44
tools specifically built for AI which is really handy So inside the services folder for ingest in our functions
7:06:49
section we're going to create a new section for doing resume related functions And we're going to export a constant variable called create AI
7:06:58
summary of uploaded resume and that's going to be a new ingest.create
7:07:04
function Make sure we import ingest
7:07:11
There we go And this create function right here This is going to take in the ID of the function which we're going to
7:07:17
call create AI summary of uploaded resume Pretty much
7:07:23
the same thing that we did above And for the name we're just going to give a human readable version of this
7:07:28
create AI summary of uploaded resume And
7:07:33
then finally we can say what event we want this to trigger on And this is going to be based on those event names And in our case the job application
7:07:40
created is not the event that we want but we do want résé uploaded Whenever we upload a resume we want to run the code inside of this particular function Then
7:07:47
we can get an asynchronous function that's going to return to us the step as well as all of our event data which is
7:07:52
really all that we care about Now inside of here we can get our ID which is our user ID and that's coming
7:07:59
from event do user So we're just renaming ID to user ID so we have a good
7:08:04
idea of what that ID is specifically for And now I want to use a bunch of different steps to be able to get our resume and then to do AI related stuff
7:08:11
to it and then to save that information back into our database And this is going to be one of the more simple implementations of how we actually use
7:08:16
AI in our application because it's like a one-step process So we'll say our user resume is awaiting step.run This is
7:08:23
going to be called get user resumeé And inside this particular function we
7:08:30
just want to await db.query dot user ré table We want to find the
7:08:35
first one And we specifically want to get it where the user ré table User ID
7:08:42
is equal to our user ID And we only really care about one column and that is the column a column for our ré file URL
7:08:50
So we'll just get that as our only column because we really only want to use the resume itself Then once we have
7:08:55
that if the user resume is equal to null well we'll just return because for some reason we have no data in our database
7:09:01
It got deleted or something bad happened Essentially we can't continue with this Then what we want to do is we want to
7:09:06
get our AI result So we'll just call that result And we can await step.AI which allows us to integrate with a lot
7:09:12
of different AI tools relatively easily And we'll call this infer function And we can give it a name create AI summary
7:09:19
And then what we want to do is we want to specify all the details for what we're going to be interacting with Now in our case we're going to be using a
7:09:24
model and we specifically are going to be using Claude's model So we'll say step.ai.mmodels.anthropic
7:09:29
That's how we're going to use Claude And for the model itself we're going to be using Claude 3.5 And we're just going to
7:09:35
get the latest version of it Now for our default parameters we're going to say that max tokens is going to be 2048 You
7:09:42
can set this to whatever value makes the most sense for your particular application And then we can come in here with an API key Envir
7:09:49
get that from our server version And what I want to do is I want to get anthropic API key So we need to get an API key for
7:09:57
anthropic to use in this particular section Before we get to that though I just want to come in here with our body cuz that's going to be where the bulk of
7:10:02
our application goes and that's where we're going to pass in all of our different messages and stuff like that So now let's go ahead and make sure
7:10:08
anthropic API key is a Z.string with a min of one value And then we can come
7:10:13
down into here for our environment variables and we can set a section for AI and we can say that that is going to
7:10:19
be our anthropic API key Now to work with cloud we need to create an API key So we're going to go to anthropic If you
7:10:24
just search for the anthropic API console or something along those lines you get to this section click on API keys and we can create a brand new API
7:10:30
key We're just going to call this job board final There we go And that gives us our API key which we can copy and
7:10:37
paste into here Now if you are using Anthropic you will get about $5 of free usage You can see I've used about 20
7:10:42
cents in the testing of this particular application So if you want to create a brand new free account you can hopefully at least get a few dollars to be able to
7:10:48
test things out but otherwise you know you can create an account And doing this will you know cost you only a few cents to run it a couple times So it's not a
7:10:54
huge deal if you have to actually pay for it So now with that API keyboarded into our application we can come back over into here into our resume section
7:11:00
and we can implement what this body is going to be And this is just pretty much matching the API for anthropic So we're going to pass in some messages And
7:11:07
inside of this messages we're going to have a role And this is going to be our user specific message And then we're going to put some content inside of here
7:11:14
And the content inside of this message is really just going to be a type here of document Essentially we're uploading a file This is going to be where our
7:11:20
resume goes And we can specify where this file comes from In our case it is a URL And we can specify the URL which is
7:11:27
our user ré file URL So we can say user ré.res file URL So now we at least have
7:11:33
our first message being passed along which is our file that we're passing along Next I'm going to be passing along another message This is going to be a
7:11:40
text message right here And this message should go in the content section So let me make sure I get that in the correct location There we go Because this is
7:11:46
content we're passing along And then we need to pass along what the text for this should be Now this is rather lengthy text So I'll paste it in place
7:11:51
and then I'll read it to you to explain exactly what we're doing But you want to be as specific as possible with the AI when you're doing things like this So I
7:11:57
told it to summarize the following resume and extract all the key skills experience and qualifications And since I know I'm going to be using this resume
7:12:03
to help rank applicants I told this that hey the summary should include all the information a hiring manager would need to know about a candidate in order to
7:12:09
determine if they're a good fit for a job because I'm going to be using this AI summary to rank an applicant at a later point And then I should say it
7:12:15
should be formatted as markdown since I want markdown I tell it not to return any other text That way I don't get a bunch of placeholder stuff that's like
7:12:21
hey here's your response for you I just wanted to return just the markdown And then I said if the file doesn't look like a resume like if someone uploads a
7:12:27
bogus file just return na So at least I know there's no actual value being returned So then what we can do is we can kind of minimize this down because
7:12:33
we have that step completed we have that step completed The next thing we want to do is to create another step for saving this data So we can say step.run
7:12:41
and we can say save AI summary that's going to be an asynchronous
7:12:46
function and we can get our message which comes from the API So we can say result.content of zero because we want
7:12:53
to get the very first message responded And if the message type is not equal to text well that means for some reason
7:12:59
it's not returning the data we want So we can just return and do nothing at all Otherwise I want to upsert or update our
7:13:05
user resume pass in our user ID and we're going to get our AI summary and pass in that
7:13:12
message.ext Just like that Also what I could do inside of here is I could say or if the message.ext
7:13:19
is equal to NA that means I know that it's not a valid file So I can also just ignore it in this particular case as
7:13:24
well Actually I probably don't want to do that I think I'll leave that off And the reason why is I want to save the AI summary as NA because if I upload a file
7:13:31
that's invalid I want to overwrite the existing summary that's there for the previous file I always want to make sure I overwrite this summary pretty much no
7:13:36
matter what So now we are going to be able to update the user resume So let's create a particular function for that It's not going to be too hard because we
7:13:42
kind of have already created a function for this So in users db user rumés I essentially want to take this upsert
7:13:48
function and we're going to replace it with an update user ré function There we
7:13:53
go This is going to take a partial of this data So we'll just wrap this in a partial
7:13:59
There we go We're going to make sure that this says update This says set And we can remove all that information We
7:14:04
don't need to pass along the user ID We just need the actual data that we're updating And then we just need a wear
7:14:10
clause so we don't update our entire database by accident That would be pretty terrible So we'll say where the user ID is equal
7:14:17
to our user ID we pass in and then reset my cache on all of that So this should hopefully update the AI portion of our
7:14:23
user resume as soon as we actually run this particular function So let's go back over here and we're going to import that function And those are the three
7:14:29
steps that we essentially need to run this particular code And that's all we need to do to create this actual event So now let's test to see if this is
7:14:36
something that actually works I'm going to go through I'm going to take that exact same file and I'm going to re-upload it So essentially we can re-trigger this event I'll click upload
7:14:42
one file and we should hopefully see in our ingest server that something is going to happen as long as this is successful You can see it successfully
7:14:48
uploaded inside of ingest You can see actually right here we have an event that is running currently You can see that it looks like it failed when it
7:14:55
tried to run stuff So let's take a look at that We'll just make this full screen There we go And you can see that we're posting to localhost 3001
7:15:02
API ingest Some stuff failed Create AI summary could not be made The match with target machine actively refused If we
7:15:08
look down here we have some errors going on was trying to sync to multiple different job boards I think the reason for this was specifically because I was
7:15:14
doing some testing on my machine machine in between some recording So I loaded up a different one by accident So we're going to delete that extra one that
7:15:20
shouldn't be there cuz this is the actual one we want But you will notice that there is going to be a particular problem because we need to make sure we
7:15:26
add our functions cuz right now we only have these functions So let's make sure that in our code we implement all of our
7:15:31
different functions So let's come all the way over here inside of app and we go to API ingest route We want to make
7:15:37
sure we add that as one of our particular routes Also we have our update organization and delete
7:15:42
organization We need to also make sure those are inside of ingest as well So we'll come in here with update
7:15:49
and we'll say clerk delete organization There we go So now that
7:15:54
should have all of our different functions in place So at least that code should work properly And now let's try re-uploading that file again So I'll
7:16:00
just drag it over We'll upload that one more file Hopefully this time it'll actually trigger properly If we go over into ingest and we look at our runs you
7:16:07
can see that this one is running This is the one that was bad So we can cancel that one And this one looks like it actually is successfully running We have
7:16:13
a queued up step that is for some reason taking a really long time Let's look at what that step is Actually it just finished That was the AI summary
7:16:18
Obviously it makes sense that that takes a little while but you can see here this is what we sent to it And if we look at the output you can see this is the text
7:16:24
that is essentially a big summary of all that information And then it's going to finalize that that was imported and saved into our application So we should
7:16:31
see here if we actually give this a quick refresh we do have a full AI summary down here of what's going on This looks like it's not quite formatted
7:16:38
like I want it to be My guess is I imported like the wrong markdown render or something like that So let's go to
7:16:43
where I have that rendering out which is inside of my jobseker folder user
7:16:48
settings page right here I believe I probably just have the wrong markdown renderer So let's go ahead and we're
7:16:54
going to make sure wherever we imported that we remove it Actually that does look like it's the correct one Interesting Let's take a look at it to
7:17:01
see the class names should be applied to it but it looks like they're not being applied cuz obviously these are not the
7:17:06
correct CSS styles It could be an issue of where we're actually exporting these from cuz this is a client component So
7:17:12
what I'm going to do is I'm actually going to take these out of here I'm going to move them into this which is a server component because maybe that was
7:17:17
causing some issues And then I'm going to make sure here I import those class names properly So now we're going to
7:17:23
give that a little bit of a refresh See if that makes a difference Looks like it's doing some things but again clearly
7:17:28
not the styling that I'm looking for So after lots of digging I finally figured out what the problem was and it's from the very beginning of the video I put
7:17:34
schema instead of scheme That literally is the only reason that I was having all these issues with the dark mode for all
7:17:41
my stuff So actually we can look for pros invert because there's another section where we are implementing this
7:17:47
but we don't actually need this because this section we don't need to put anymore because it should just work because I actually spelled scheme
7:17:53
correctly instead of schema So now if we make this a little bit larger we can kind of see this is what that summary looks like It looks like my border on
7:17:58
the bottom is not showing up like it should but otherwise you can see that it's rendering Obviously my border is showing up down here So I have a little
7:18:05
bit of a placement issue on where my code is going That's purely just a me issue though So inside of my page here
7:18:10
we have my AI summary card And if we scroll down to the AI summary card you can see this is inside the card content
7:18:16
which is also inside the header Clearly that's not correct So now you can see our line shows up And then we have our actual summary for the entire resume
7:18:22
here which looks really good overall So now that we actually have the ability to upload a resume the next step is to actually rank an applicant when they
7:18:29
apply for a job Because now we can apply for a job with a real resume with a real resume summary to use for that
AI applicant ranking
7:18:35
particular application So for example if I go back to the job board and I were to click on one of these jobs to try to
7:18:40
apply for it for example let's say that I clicked on like this job or this job And then when I went to apply for it we should be able to use that resume to
7:18:46
actually rank the user cuz I've already applied for this one but I didn't have a resume So when I click apply here we should actually use the AI portion in
7:18:52
the background So let's go ahead and implement that First of all in our application let me just search for to-do because I believe this AI generation one
7:18:58
has already been solved Actually this is the one that we've already solved for uploading the resume This is the next one that we have to work on which is the
7:19:05
app job listing application created So let's go ahead and we're going to create a section for that inside of our ingest
7:19:10
services So we'll go down into ingest here We're going to go down into functions and we'll create a brand new file inside of here for the job listing
7:19:17
application And inside of this file we'll just say export const rank applicant And that's
7:19:25
going to be an ingest create function It's going to take in all of our different parameters But we already have
7:19:30
our event copied into our clipboard so we might as well use that because that is the event that we're going to be processing Now we're going to give it an
7:19:36
ID and a name So we'll say rank applicant And the name is rank applicant There we
7:19:44
go And now we can actually use this asynchronous event with our step and our
7:19:49
event data There we go And we can get our user ID
7:19:55
and our job listing ID from our event.data because we know that that is the type that we passed along to our
7:20:01
information Then we can use that to get all the data that we're going to need because we're going to need to be able to get their cover letter if they pass
7:20:07
one in We need to get their resume summary We need to be able to get the job listing data And then we want to pass all that along to our AI and
7:20:13
essentially tell the AI hey given all this information give us a rating of one to five And we're going to use some more sophisticated and advanced AI tools to
7:20:20
understand this particular system system So let's come in here We're going to get our cover letter That's going to be
7:20:26
step.run We're going to say get cover letter We're going to make this an asynchronous
7:20:32
function And this essentially is just going to return to us a rather simple little bit of code So I'm going to copy
7:20:38
over our database query because we've run these database queries a million times So let me just import this
7:20:43
particular code Get an and query here and import that
7:20:50
There we go So essentially let me just say const resume is equal to that There we go Or
7:20:56
actually not resume This is application There we go And this application is just going to get from our database table
7:21:02
where the user ID and the job listing ID match essentially what is the application this user just submitted We're specifically only getting the
7:21:08
cover letter from it And then down here I want to return application.co letter if it exists So now we have a
7:21:15
function that gets our cover letter And you'll notice I'm not actually awaiting this because I want to run these in parallel which is a nice thing about
7:21:20
ingest We can run our steps in parallel if we want because we have lots of steps that are going to be all run at the same time because we just need this data next
7:21:26
So for example get resume This is going to get us our resume And
7:21:32
we can return our resume And we want to get the AI summary Just like that And this is going to be coming from our user
7:21:38
resumeé table So let me just paste that down a couple times There we go We don't care about the job listing section So we
7:21:44
don't need an and here or there And we want to get the AI summary There we go So we're essentially just querying our
7:21:50
user ré table to get whatever the current rés is And we'll call that step get résumé And
7:21:56
again I'm not awaiting this step I'm just getting it right here so I can run it in parallel And then the kind of final big step we need is the step for
7:22:01
getting our job listing And I'll just kind of copy paste this in again because all we're doing is querying our job listing table where our ID is our job
7:22:07
listing ID And I'm just getting all the columns that the AI needs So the AI needs to know what the ID is so it can save the information in our database It
7:22:14
needs to know what the city is the description the experience level location requirement state abbreviation title and the wage information There's
7:22:20
other information I could get such as like posted at and status and so on but it doesn't need that Actually type should be in there as well So let's make
7:22:25
sure we get type in there So that way we know if someone's only looking for like a part-time job and this is a full-time job It obviously would tell them "Hey
7:22:31
not a good match." So now that we have all the information we need we can just stream this all into our AI and
7:22:36
essentially tell the AI "Hey do all this information for us rank the database user and then store it in our database." So the next little bit of code is rather
7:22:43
simple Essentially all we're doing right here is we're getting our cover letter our resume summary and our job listing by waiting for these different steps So
7:22:49
we ran all these steps at once Now we're waiting for all of them to finish so we can run them in parallel to save a little bit of computation and time Then
7:22:55
we're checking to make sure we have a resume summary and a job listing because if for some reason there's no job listing or no resume There's no point in
7:23:02
ranking the applicant because we don't know what to rank them against and we don't know what their skills are If there's no cover letter that doesn't
7:23:07
matter That's an optional thing So we don't really need that We just need the resume and the job listing Then we can actually create an agent to be able to
7:23:13
run this And this is kind of where the real power of a tool like Inest comes in because their agent kit system is really really powerful for running AI with a
7:23:20
lot of different tools and networks and everything like that We're only going to be scratching the surface with what you can do but it's quite powerful So we're
7:23:26
going to create an applicant ranking agent So we'll call this applicant ranking agent and we'll just call run on this
7:23:35
and we'll pass it in the information we want and we're going to be passing it in as JSON So we're going to say JSON.stringify our cover letter our
7:23:42
resume summary we're going to get our job listing
7:23:48
and then finally our user ID So that's all the information we're going to be passing into this applicant ranking agent And to handle all of our AI stuff
7:23:54
I'm going to create a separate folder called AI And I'm going to create that applicant raking agent directly inside
7:23:59
this folder So we're going to say export content raking agent Now to create an agent is actually quite simple We can
7:24:05
just come in here and say create agent And of course we need to make sure we install the library for this So the library for this is the agent kit
7:24:12
library So we can come down here and we can install ingest/ aentkit We're going to force
7:24:20
that since we're using the essentially canary version of Nex.js that's going to install this library for us with all the
7:24:25
different stuff that we need And then what we can do is we can actually create an agent using that particular library And this kind of just wraps all the AI
7:24:31
tools to make them easier to work with in general It adds a lot of tools for example like doing networks of agents
7:24:36
that communicate with each other doing different things with tools like accessing databases and so on It's quite powerful and we're again only going to
7:24:42
scratch the surface So let's import create agent I might have to manually import that
7:24:49
Just like that And this is from that ingest/ aentkit Now for creating this
7:24:54
particular agent it's actually relatively simple how you create an agent It's kind of like an AI prompt First of all we'll give it a name This
7:25:01
is an applicant ranking agent And this name could be useful for other AIs If we have them in
7:25:07
like a network and they can communicate with each other they might use this name and description to understand what these different tools do So speaking of
7:25:13
description we need to define a description for this AI I'm going to copy over the description because it's kind of a long text Essentially I'm just
7:25:18
saying "Hey this is an agent for ranking job applications for specific job listings based on the resume and cover
7:25:24
letter And then inside the system text is essentially the meat and potatoes of how we make this AI work." It is our
7:25:29
instructions to the AI on exactly what to do and how things are formatted So our system text is going to be quite long Almost always you'll have a really
7:25:35
long text In our case we're saying that you are an expert at ranking job applications for specific jobs based on the resume and cover letter because
7:25:41
that's kind of the information we're passing in I then specify how our information comes in You'll be provided a user prompt that includes a user's ID
7:25:48
resume and a cover letter as well as the job listing they're applying for And it's all in JSON format That's this
7:25:53
section right here We applied a user prompt That's what run does And we put it in a JSON format So we essentially
7:25:59
are telling the AI what to expect as our input We're then telling the AI what to do Your task is to compare the job listing with the applicant's resume and
7:26:05
cover letter and provide a ranking for the applicant on how well they fit that specific job listing So we're essentially telling it hey look at the
7:26:11
job listing Look at their resume figure out if they're a good fit for this job Then we specify what the rating scale
7:26:16
should look like I say that the rating is a number between one and five where five is like a perfect score on someone Three is someone that barely meets the
7:26:22
requirements and one is for someone that does not meet the requirements at all And then I specify that you should save this user rating in the database and not
7:26:29
return any output because all I care about is them saving the information in the database and nothing else Now in order to save the information in the
7:26:35
database we need to use a tool we can pass along tools which are essentially just pieces of code that we create that
7:26:40
the AI can run and all of it's going to be type- safe and really useful So let's come up here and create a brand new tool We'll call this save applicant
7:26:49
whoops rating tool and we'll call create tool which is a function again from this
7:26:54
exact same system And we have the ability to define a name for this We'll say save applicant ranking
7:27:01
and then the description is what the AI uses to figure out hey is this something that I need to do so we'll say saves the
7:27:06
applicants ranking for a specific job listing in
7:27:12
the database So now the AI knows hey if I want to save this rating I should use this particular tool because this is
7:27:17
what it does Parameters is a type safe version of what our parameters are So we're going to be using zod for that So
7:27:22
we can say zod object is going to be rating and it's going to be a number
7:27:28
There we go And it's going to be an integer The maximum value is five the minimum value
7:27:34
is one So it's going to make sure it's rated based on these parameters So we have our parameter for our rating We're
7:27:40
also going to be passing in the job listing ID That's going to be a string And then finally we have a user ID and
7:27:47
that is going to be a string as well There we go So now we at least know we're passing in the information for
7:27:52
these particular things Now we can specify a handler And this handler is going to be this function that is actually typed based on our parameters
7:27:59
So you can see inside this async function If I just define it real quick inside the parameters we have our job
7:28:04
listing ID we have our rating and we have our user ID that match these parameters up here So what I can do is I
7:28:10
can call update job listing application I can pass it in my job listing ID my
7:28:16
user ID that's like my ID key and then I can pass in the data I want to update which is my rating and that'll do that
7:28:22
for me And then I can return some text so the AI knows what happened because the AI calls this tool and then waits for a response And we can just say
7:28:29
successfully saved applicant ranking score There we
7:28:34
go So now the AI knows that this was a successful tool call And down here we can pass that along as one of our tools
7:28:39
So let's go ahead and create this function to update this So we can come over into our features for our job listing applications inside the database
7:28:45
We can just create a brand new function There we go This is going to take in
7:28:51
some information for our application And it's going to take in our ID information as well So instead of making you watch me type that out I'll just copy over the
7:28:57
types themselves cuz they're relatively straightforward You can see here we have our ID information And then we have the partial information on the insertion
7:29:04
that we're going to be doing Then inside of our function all we're doing is we're calling that we want to update this database Make sure this is an
7:29:09
asynchronous function And for our checks here we're just doing a simple wear check where we're just checking to make sure our ID columns are correct So
7:29:16
essentially we're just updating the user with this ID based on this particular data that we're passing in Now we can give that a quick save and we can head
7:29:21
back into our application for our ranking section We can import this code and then all we need to do is tell our model what AI model we're using So we
7:29:28
can come in here with a model I'm going to actually be using Gemini for this because they have a free tier that's actually rather good So we can come in
7:29:34
here we can say model and the model we're going to be using is the Gemini 2.0 flash just like that And then we can
7:29:40
specify our API key and that is going to be envi
7:29:47
API key And this is just kind of nice because it doesn't matter what model we use You could swap this out for an anthropic model and everything else in
7:29:53
our code stays exactly the same So whatever model you want you can swap it around change it however you want This is really nice cuz it kind of gives you
7:29:58
one way to interact with many different models The only reason we're using Gemini in this particular case is because it has a free tier that we can
7:30:04
use unlike Claude which only has that small little free sample So we'll come in here with a minimum of one just like
7:30:10
that And then we're going to define this particular API key So we'll come down here Gemini API key So to use Gemini all
7:30:16
we need to do is just go to the AI studio for Google We can just type in Gemini API key You'll probably get brought to this particular page And then
7:30:22
we can just click create API key We can select an existing project For example this Gemini API is one I was using for
7:30:27
testing So we'll just create an API in that project for it Sometimes it'll even let you create an API key for a brand new project I'll click copy right here
7:30:33
And we'll just paste that in as our API key Again you can use whatever model you want I'm just using Gemini because they have a free tier that is generous enough
7:30:40
for the testing purposes that we're doing So now we can close out of that We don't need that anymore We don't even need this anymore So we can come back
7:30:45
over to here We have that Gemini API key Let's make sure everything is imported properly such as this And now hopefully
7:30:51
with all of that done we should have everything we need done to actually use this to rank applicants based on data that we pass in Now in order to test
7:30:57
this properly we need to have a good description for our actual job So what I'm going to do is I'm going to come over here go back to my employer
7:31:02
dashboard I'm going to modify this job right here to give it a much better description So we'll come in here We're
7:31:08
going to edit this job And what I want to do is I just want to paste down a description that I got directly from Indeed for a random job on Google And
7:31:13
this is a job that is going to be very front-end focused So hopefully our application which is a front-end focused
7:31:18
application should be relative relatively qualified for this particular job We're also going to just say that
7:31:24
it's a remote job for sure and we'll just say full stack developer because that's kind of what the job title is
7:31:29
Actually I believe I can just copy it over This is the exact title that is from Indeed So at least have an implementation with a decently long
7:31:35
description that can detail exactly what this job is looking for Now we can go back to our job board and we can try
7:31:41
applying for that specific job with the lengthy job description Also I noticed the problem is I can't scroll this list
7:31:46
So we'll come back and fix that in a little bit But I'm going to click apply I'm not going to upload a cover letter We're just going to click apply And actually before I do that I want to make
7:31:52
sure I set up the actual system to rank this So let's come over here We have this function that we created but we
7:31:58
didn't actually add that function to our API So inest route just like this Add in
7:32:03
that function So now at least it'll run that function for us And now we can come back over here and we can apply for that
7:32:08
job So we're going to click apply We're going to click apply And hopefully it's going to rank this applicant for us So if we look at the ingest system which we
7:32:15
have right here we can look at the runs that are going on and it looks like job listing application created ranking the
7:32:21
applicant and actually ran very quickly and you can see that it ranked our applicant A little hard to see make that a little bit bigger but you can see we
7:32:27
have the output for this particular ranking and you can see it gave them a fivestar rating which makes sense because this is a front-end focused job
7:32:33
and we have a very strong front-end focused resume for this So you can see that that properly worked and it hopefully saved it in our database So if
7:32:39
we look at our database we look at our job listing application You can see we have a fivestar rating for that user we just applied with with no resume Now I
7:32:45
do want to fix this overflow issue where we can't actually scroll That's clearly a problem So I'm going to go into my application We're going to find that
7:32:51
section which is inside the app It's in the jobseker section This is the job listing And this is the client sheet
7:32:56
section This is probably where I need to add my class names And of course I can't do it on the sheet itself I need to do
7:33:01
it in here where we use that sheet So I believe scroll all the way to the top cuz I think that's where we used it Here
7:33:08
we go We have our sheet content We probably just want this to be overflow y auto That should allow us to scroll
7:33:14
There we go And now we can scroll through all the different content inside of here which is exactly what we want to be able to do Now that we have all that
AI search capabilities
7:33:19
done I think the next step that we kind of want to work on is going to be our AI search functionality Because right now we don't have anything for our AI search
7:33:25
And I think since we're on the trend of doing AI related stuff this is a great place for us to jump into So let's kind of close out of everything that we're
7:33:31
working on currently I want to create a brand new page for this AI search So we'll just come in here with a brand new folder AI search and we'll create a
7:33:38
page.tsx inside of there And also in our sidebar we're going to need to create an AI search folder and we're going to need to
7:33:45
put a page in here as well Now the sidebar portion of this is going to be very easy because we don't have a custom
7:33:50
sidebar So I'm just going to return null as a sidebar for this because we don't have a custom sidebar Otherwise for our actual AI page we can export a function
7:33:58
Make sure this is a default function AI search page
7:34:04
There we go And we can just return null And hopefully we should at least see something on our screen if we refresh
7:34:09
our page There we go You can see we have nothing on our sidebar And we're on that AI search page Now for this particular page we're just going to render this
7:34:15
inside of a div So we'll give it a class name padding four flex the items in the center Whoops Yeah center There we go
7:34:22
Justify in the center And we'll set the minimum height to be screen
7:34:28
There we go That's just going to center everything in the center for us And we can just put some random text inside of here And you can see we're just dead
7:34:34
center inside of our screen Now we do have a problem with scrolling because of this nav bar at the top So I think if I change this to full we should have it be
7:34:39
centered without any scrolling And I believe even on larger screen sizes if I just zoom this out you can see it's still centered for us So it does look
7:34:44
like it's working across all screen sizes which is great Next thing that I want to do is I want to render out a card that's going to contain all that
7:34:50
information So this card we're just going to say it's going to have a class name Max width is going to be 4XL So we
7:34:56
have that card showing up And then we need to put some content obviously inside the card as you can see here So what we're going to do is first of all
7:35:02
make it so it's an async load because we only want people to do an AI search if they have an account on our page because
7:35:08
this is consuming resources and costing us money So we want to make sure the user at least has an account so they're more likely to actually apply for jobs
7:35:14
So we're going to come in here with an async if And for this async if the condition is going to be a rather simple
7:35:20
condition of do we have a user so we'll come in here await current user Whoops
7:35:25
Get current user There we go And we want to just make sure that this is not equal to null So
7:35:31
we're going to get the user ID from that And I might as well just put this on a new line to make it a little bit easier
7:35:39
So we'll say whoops there we go Const user ID is equal to that Move that down
7:35:47
And we'll just say return user ID is not equal to null So we only want them to do
7:35:53
this particular condition if the user ID is not equal to null We'll close that off So at least we have some formatting going on Next thing I want to do is add
7:35:59
in a loading fallback So we'll just say loading fallback like this And we'll use our loading swap And this is so that we
7:36:06
have our container be the exact same size as it is before So what we're going to do is we're going to create a simple
7:36:11
function right here Function Make sure I close this off And this is just going to
7:36:16
be AI card Doesn't matter what it is for now It'll just return null But essentially I want to render this AI
7:36:23
card in here And then for my loading swap I want to render the AI card as like the background element I'll show
7:36:29
you what I'm talking about We'll close off this loading swap Render my AI card But for my loading
7:36:36
swap I'm going to say that it's always in the loading state So we're going to say is loading true Just like that So now if I give that a quick save this AI
7:36:42
card we can just put some text inside of here So at least it renders something out And you can see the exact size of my
7:36:47
card Now if we were in the failure state it's going to render this loading section right here for the loading fallback Now I want to just show you
7:36:54
what that loading fallback would look like So instead I'm going to make the loading fallback the only thing that loads And we'll put the AI card up here
7:36:59
as the fallback So now you can see when I'm loading that my loading spinner is the exact same size of whatever is in my
7:37:05
AI card If I add more text inside of here you can see that my loading section grows in size So I know that my loading
7:37:11
will always be the exact same size as my content This is really nice because often when you're doing skeleton loaders
7:37:16
the skeleton loader is one size and then when your content loads it changes size This allows us to make sure our content
7:37:21
is the same size when it's loading and when it's not loading because the difference between whether or not we have a current user or not does not
7:37:27
change what our content looks like Our content will look the same no matter what So we can actually pre-render that content kind of behind the scenes So
7:37:33
we'll go back to what we had before where we have the correct locations for both of these different things And now we can specify what we want to render
7:37:39
inside of our AI card So this is going to be a card header
7:37:44
with a card title Card title will say AI search We're then going to have a card
7:37:50
description And inside of here this can take a few minutes to process So please
7:37:57
be patient And essentially we just want to let them know hey you know what this takes a while This is AI It's not going to be instantaneous Below our header we
7:38:04
then want to have our content for our card Just like that We should probably wrap
7:38:09
this inside of some fragments There we go Make sure I import card
7:38:14
content And then inside here we want to have a job listing AI search form which is a component that we're going to
7:38:20
create for doing all of our different AI search related stuff Finally I'm going to be creating a simple component called no permission And this is just going to
7:38:25
render if they don't have permission And essentially all this says is hey permission denied You need to create an account before using the AI search So we
7:38:32
can just kind of come all the way up here in the otherwise section and we can render out that no permission component
7:38:39
So if they don't have permission it'll render that out instead And we can actually see what that looks like by just coming into here real quick We'll
7:38:44
make this equal to null and we'll just comment out this line Yeah maybe we don't even need to comment out You can just see it says permission denied You
7:38:50
need to create an account before using this And we click sign up and it'll bring us to that login page But obviously we're already signed in So
7:38:56
it's just going to bring us back to this page So let's change this back to not equal to null And now what we can do is
7:39:01
we can work on this job listing AI search form Now this search form is going to be relatively simple because we really only have one input on our entire
7:39:07
page So here we go to our features inside of job listings components I'm going to create a brand new component
7:39:12
with that name export this function
7:39:18
There we go This is going to be a client component There we go And we just want to get
7:39:23
started by saying form is equal to use form Pretty much what we do in all of our forms We're going to have a resolver
7:39:29
And that's going to be a zod resolver And then we're going to pass in our job listing AI search schema which we're
7:39:36
going to create in just a second So let's go ahead and create that in our actions in our schemas all the way down
7:39:41
at the bottom export a constant variable with that name and that's going to be a ZOD object So we'll say Z.object and
7:39:49
this is going to be a relatively simple object because we only have one form field So it's a query which is going to be a string with a minimum value of one
7:39:56
and it'll just say required There we go That's all we're going to do for that AI search form So we can come back into here and we can make sure we import that
7:40:03
and then we can specify our default values And our default value for this is just going to be query which is an empty string Now we might as well put that on
7:40:09
one line There we go Then we can create a function for onsubmit which is going to be an async function
7:40:17
We're going to make sure it takes in some data So we're going to say z.infer type of joblisting ai search schema
7:40:25
There we go And we'll just console.log our data for now
7:40:31
There we go And now we can move on to actually rendering out what our form is going to look like So let's get that form component
7:40:38
pass it in all of our form data and then we can render our actual form with an onsubmit
7:40:44
This is form.andsubmit where we pass in our onsubmit and we'll give it those class names that we always do of space
7:40:51
y6 just to space things out That's going to space out our button from our actual form element Now the next thing we need
7:40:57
to do is to create a form field for our text area So I'm going to copy this form field over because it's relatively straightforward So we can come into here
7:41:03
make sure I spell onsubmit properly and then let's import all these different components we're going to use and then I'll explain exactly what each one of
7:41:10
these different pieces of code does I believe we're going to need to create our text area component So we're going
7:41:15
to need to import that from shad CN So let's just go up to where we have that text area There we go
7:41:23
And of course we'll probably need to force install that Actually maybe not It's looking like
7:41:28
it's potentially running There we go That actually installed without needing to force install So now we can move on We can import that And essentially all
7:41:34
this is doing is everything we've done with normal forms before We have a label We have our control which is this text area We give it a minimum height so that
7:41:39
at least it gives us a little bit of spy size And then we give a description of what we want the user to do Telling them hey give us a long description of your
7:41:46
skills experience and all that other stuff Then what we can do down here is we can provide a button Make sure we get
7:41:51
the correct button And this button is actually the same as every form submit button we've done We give it a type submit class name of full Make sure it's
7:41:58
disabled when the form is submitting and we loading swap in our text based on if it's loading or not So now we give that
7:42:03
a quick save Of course we need to import the form here and that should be everything to actually show our form on the page You can see we have our query
7:42:09
It is resizable but it has a minimum size which is perfect And we can type in whatever we want for an AI based search
7:42:14
query Now what we're going to do is we're going to scroll all the way back up to our onsubmit section for that form So let's go into the form go to our
7:42:20
onsubmit and what I want to do inside of here is I want to essentially call a server action that's going to do that AI search for us So we're going to say
7:42:26
results is equal to await get AI job listing search results I'm going to pass
7:42:32
in our data for that That's a function we're going to create If resultserror so if we have an error then we want to just
7:42:38
render out a toast letting the user know toast Is going to be results message We can
7:42:45
return Otherwise what we're going to do is this is going to return to us our job listing IDs which we can use down here
7:42:50
So we'll just say to-do to handle that specific section next because we need to create this function first before we can do anything So let's go into our
7:42:57
features This is going to be our job listings in our actions Scroll all the way down to the very bottom so we can create a brand new one We're going to
7:43:04
say export async function Just like that This
7:43:09
function is specifically going to take in our unsafe data That's going to be from our schema Pretty much what we've done with all of our different forms
7:43:15
Then what we want to do is we want to parse that schema data So what we're going to do is we're going to parse that schema by passing in our unsafe data And
7:43:22
we're going to begin parsing it against that schema If success is not true well we have some type of error So we're just
7:43:27
going to return error true message There was an error processing your search
7:43:36
query There we go Next up we need to do is to be able to get our user So we can come in here We can call get current
7:43:41
user Just like that And you can see if we don't have a user we're essentially saying hey you need an account to be
7:43:46
able to access this particular AI Then we're going to be getting all the job listings Now this is something depending
7:43:52
on your use cases for your AI you could limit the amount of job listings you put in here only put the recent ones whatever you want to try to limit the
7:43:58
amount of tokens you're sending because this could send a ton of information if you have lots and lots of job listings So we're going to try to pair down this
7:44:04
information as much as possible So we're going to call this get public job listings Just like that This is going to
7:44:10
give us all of our public job listings And we're going to create a function called get public job listings And again
7:44:16
you can try to pair this down as much as you want to make it as small as possible Now for our case I'm not going to really modify or bother pairing that down We're
7:44:23
just going to get all the different job listing information and we'll use it just like this So this just gets me all the public job listings available So
7:44:30
this right here we might as well call all listings There we go And then I'm going to create a function that's going
7:44:35
to give us our matched listings and that's going to be called get matching
7:44:41
job listings We're going to be passing it in the query that the user passed in That's our AI query that we want to
7:44:46
prompt the AI with We're going to be passing in all the different listings as well as we're going to pass in a maximum
7:44:52
number of jobs of 10 just so it doesn't return to us like a million jobs It's
7:44:58
going to return to us the 10 jobs that they are most equipped to handle with their particular AI search and qualifications Now this get matching job
7:45:04
listings function is going to be an AI based function So we're going to just minimize this down go into our section for our source for services ingest AI
7:45:12
and we're going to create a function for this And this is going to kind of show you other use cases for the AI where it's like a one-off transactional thing
7:45:18
but you want to have some dynamic prompts and so on So what we can do inside of here is export an async
7:45:23
function with that particular name We're going to give it our prompt which is a
7:45:28
string We're also going to give it the job listings that we're matching against And that is going to come from a specific type we're going to create So
7:45:34
we'll say type of listing schema And that's a type that we're going to
7:45:39
create up here Listing schema And that's going to be a Z.Object
7:45:45
Make sure we import zod Just like that And we'll pass in some information into that to make it work like we want it to
7:45:50
And then lastly we're going to have some options for the max number of jobs And by default that's going to be an
7:45:56
optional parameter So we'll say max number of jobs is going to be an optional number because we could return
7:46:03
all the jobs possible or we could just return some of the jobs that are possible And let me make sure I spell that properly There we go Now for our
7:46:09
schema up here I'm essentially defining only the keys that we actually want to pass along to again limit the amount of
7:46:14
tokens that we're using So I'm going to paste in what this looks like We'll just do a quick import on these enums because
7:46:19
this is kind of something we've already seen before I'll go through really quickly any major differences but we're essentially saying we have the ID we
7:46:24
have the title we have the description we have the wage the wage interval the state the city the experience level the
7:46:30
type and the location requirement essentially the minimum requirements that someone would need to determine if a job is a good fit for them or not Then
7:46:36
we're going to even take this a step further by essentially removing all of the null values so we don't pass along null values to our API for for our AI
7:46:44
sorry because it doesn't make sense to pass along those null values So to do that we're going to come in here and we're going to create our agent and
7:46:49
that'll be where we actually do all of our different parsing So we're going to say create agent that's coming from agent kit We're going to give our agent
7:46:55
a name This is going to be our job matching agent And again we're going to
7:47:01
give it a description because that is what's used by other AIS if you match them together inside of a larger network
7:47:06
So we'll say it's an agent for matching users with job listings
7:47:12
Then we're going to create our system prompt So we'll come in here with our system And this system prompt is going to be dynamic It's going to take in some
7:47:17
of the information we have passed up here So for our system prompt I'm actually going to copy over the entire thing and then I will explain exactly
7:47:24
what it's doing So I'll paste this in It's a rather large prompt So you can see it says you are an expert at
7:47:29
matching people with jobs based on their specific experience and requirements Most of the time I like to give a prefix of what the AI is supposed to be good at
7:47:35
And then I say what it's going to expect The provided user prompt will be a description that can include information about themselves as well as what they
7:47:41
are looking for in a job Then if we have a maximum number of jobs I specify you are only to return the maximum number of
7:47:47
jobs So up to 10 jobs or return all jobs that match the requirements So we change this prompt based on what the max number
7:47:53
of jobs is Then I'm telling the AI what to I'm saying specifically return the jobs as a commaepparated list of job ids
7:47:59
That way I can use that information to send along queries and search pars and so on If you cannot find any jobs that
7:48:05
match the user prompt return the text no jobs And we're just going to create that text up here No jobs And that'll just
7:48:10
say no jobs or something like that There we go Doesn't matter what the text really says Here is the JSON array of
7:48:16
available job listings And this is where I'm pairing down my job listings So you can see here I'm getting my listing and transforming it by taking all my normal
7:48:22
listing properties and anything that could be null I'm making sure I pass along as undefined instead And that
7:48:28
removes it from my listing So if a value is undefined it will not get passed along when we stringify it as JSON So
7:48:33
this just allows me to remove things that are not needed to help pair down the amount of tokens I send across to my AI So really all this prompt is doing is
7:48:40
saying hey you're going to be expecting some information from a user Give them this number of jobs and here's all the
7:48:46
jobs that you can give them of So here's a list of all the jobs to look through and then give them only the max number of jobs that we want Finally we need to
7:48:52
specify what model we're using In our case we're going to be using Gemini as our model So we'll go inside of here and
7:48:58
we'll just import that like that And now what we can do is we can use this model because we still haven't given it a user prompt We've just given it the model
7:49:04
itself and said "Hey here's your agent Here's your system prompt Now we want to go ahead and run this particular model."
7:49:09
So we can say agent.run And we can pass it along the prompt that user passed in So it's going to take our system prompt
7:49:15
as well as the prompt the user passed in combine these together and give us the list of jobs that match them the best So
7:49:20
let's go ahead and we're going to say const result is equal to calling a wait on that Now the way this result returns
7:49:26
to us is an agent result And we really only care about getting the last output message So we're going to create a helper function for doing that for us
7:49:32
called get last output message.ts because we're going to use this
7:49:37
potentially in multiple places So we're going to export that function It's going to take in an agent result That's essentially what our AI returns to us
7:49:44
Every single agent inside of agent kit is going to return this particular thing And I want to get the last message from
7:49:49
it That's just going to be result.output and we want to get the last one So it's
7:49:54
at the negative one index Then if our last message is equal to null for example it didn't return anything Or our
7:50:00
last message.ype is not equal to text then I don't care about it So we're just going to return null Essentially I don't
7:50:07
care about a message unless it's a type message because we could have like tool calls and tool results Those aren't important to me I only want the text the
7:50:13
AI actually outputs back to us Then we're going to get the type of our last message content And we want to make sure
7:50:19
that's equal to a string because it could be multiple things As you can see it could be a string or it could be a text content So if it's a string I just
7:50:25
want to return my last message.content and I want to trim it So we get rid of any new lines and so on Otherwise I want
7:50:31
to take my last message.content If it's an array I want to join it on the new line character and then I want
7:50:37
to trim it after that So essentially all that I'm doing here is I'm converting my last message into a single string that I
7:50:43
can use anywhere inside my application This is just a nice little handy helper method that we can use Now what we can
7:50:48
do is we can do that by saying last message is equal to calling that function with a result passed in and
7:50:54
it's going to convert our result from this agent result to a single string or undefined Now what we can do down here is if our last message is equal to null
7:51:02
maybe something went wrong Or if our last message equals no jobs well that means that it returned no results at all
7:51:08
So we can just return an empty array Otherwise we're going to take our last message we're going to split it on a
7:51:14
comma because we know that it's giving us a commaepparated list We want to get rid of any white space so we're going to
7:51:20
take our job ID and we're just going to trim it There we go And then I want to filter
7:51:27
out anything that's not there So we're going to say filter boolean Essentially this is going to remove any empty strings So if we had like text that was
7:51:33
an empty string somewhere in there like after a comma before a comma this will remove that So essentially it just gives us an array of job ids that this AI
7:51:39
found for us So now we can specifically go back to this search form or actually not to the search form to the action
7:51:44
itself and we can import this to get all of our matching job ids And what we can do with this information is we can first
7:51:49
check to see if our matched listings length is equal to zero If it is then we didn't get any jobs So we can just let
7:51:55
them know hey no jobs match your criteria Otherwise we return that there was no error and we return the matching job IDs Now if we look at this
7:52:01
particular function you can see the return type is going to be an error a message and then optionally some job ids
7:52:07
And down here the message is optional So it's kind of a weird type We want to manually type this because we only want to return one of two different things We
7:52:14
want to return a promise that is going to be an error of true and a message of
7:52:19
string If I can spell properly There we go
7:52:24
or we want to return a promise where error
7:52:29
is false and our job ids is going to be an array of strings There
7:52:36
we go Make sure I put that parenthesy inside of there or this bracket inside of there
7:52:41
And the reason that I'm breaking this up like that is that way when we use this API we know exactly what's going to be
7:52:47
returned because otherwise we had like an optional message and optional job ids Now I know if I have an error then I
7:52:52
have a message and if I have no error I have job ids Now I do actually want to change this by instead putting this inside of here cuz I'm always returning
7:52:58
a promise I essentially just want to say I return a promise that is either going to be an error true message string or
7:53:04
it's going to be an error false job ids It just makes my code a little cleaner They both do the same thing but this I find a little easier to read Now let's
7:53:10
put in this bracket that we accidentally deleted And there we go Now we have this returned to us as a good type So we look
7:53:16
over results If I make sure I import this properly There we So now if we hover over results you can see it's either error true with a message or
7:53:21
error false with job IDs Now let's import toast since it looks like we didn't import that And down here we can
7:53:26
actually use that job ID information So what we want to do is we want to be able to reroute us back to the job listing page by pushing in the job listing IDs
7:53:33
So I'm going to say const router equals use routouter Make sure it's use not user There we go
7:53:41
And now what I can do down here is I can say router.push And I specifically want to push us to the homepage with a
7:53:47
question mark because I want to get some search params So we'll say prams.ring
7:53:52
That's going to be our search params So let's say params is equal to new URL search params And we're going to say for
7:53:58
each one of our job ids Whoops Job ids We want to push that into the thing So
7:54:04
for each one we want to take our params We want to append along a job ids with
7:54:09
that ID Just like that So essentially if I have three job ids returned I have three parameters with job ids inside of
7:54:16
my URL search params And since earlier we already implemented the ability to do filtering based on job IDs we should
7:54:22
have this all already working for us And now we can just type in a query and it should return to us jobs that fit that specific query So now before we get too
7:54:28
far into that I want to go back to my employer dashboard to make sure we at least have two job listings that have different information inside them Not
7:54:34
sure why that error showed up there Just some weird caching stuff probably But here we have a software engineering full stack job For this one I want to just
7:54:41
make it super simple and basic We're just going to come in here We're going to say it's going to be in mobile
7:54:47
developer role There we go And we're going to make this one for senior developers And we
7:54:53
can just leave this description mostly blank We'll say for only experienced
7:54:59
mobile devs just so we have two job listings that are very different from each other This one is specified as a
7:55:06
junior level full stack job and this one is specified as a senior level mobile developer role So at least we have two
7:55:12
very different jobs that we can look through So now inside of my AI search I want to say I am looking for an
7:55:18
entrylevel web developer job There we go Super basic Obviously you would want to
7:55:24
put more in there if you're doing a real AI search But we can come in here and we can click search It's going to take us a little bit of time But you can see it
7:55:30
has now told us we have one job with this job ID that matches our requirements And here is that job ID
7:55:35
which again is that software developer full stack webdev job If I were to go back to my AI search and I say I am
7:55:41
looking or I am an experienced mobile developer we should hopefully see
7:55:48
that it's going to return to us that mobile developer job And there we do mobile developer role Now obviously if you have more jobs and you have more
7:55:54
information you pass into your AI you can get more sophisticated results But this is a good example showcasing how we can actually filter our results based on
7:56:00
just human readable text Now the next thing that I want to work on which is tying directly into the AI stuff that we've already been working on is going
User settings page
7:56:06
to be inside of our user settings on the notification setting itself Obviously we don't have a page for this yet So I'm going to go ahead and implement the page
7:56:12
for this so we have everything working So we can come over here We can go to where we have our app jobseker user
7:56:19
settings And we specifically want to have a file called notifications/page.tsx
7:56:26
And we're going to export a default function notifications page
7:56:33
We'll just return null There we go And hopefully you can see over here now we have a null page for
7:56:39
that and we at least have our notifications tab and we can swap between resume and notifications Now as per usual we're going to wrap pretty
7:56:45
much everything in a suspense because we're going to have a suspended component So I'm just going to come in here I'm going to get that wrapped in a suspense and then we'll just work on our
7:56:51
suspended component next In our suspended component we want to get our user ID So we'll just say await get
7:56:58
current user And if we don't have a user we're going to return null So if user ID equals null we'll actually just
7:57:05
return not found cuz that makes more sense There we go And then down here we can actually return the information we want So we're going to do a div with a
7:57:12
max width of 3XL MX auto py8 and we'll
7:57:18
also do some px4 just to get this mostly centered in our screen Then inside of here we can create an H1
7:57:24
Class name is going to be text 2XL We're going to make it a bold font And we'll put some margin on the bottom And this
7:57:31
is just going to say notification settings There we go So now we should have that text pop up Now below that
7:57:37
we're going to create a card And inside this card we're going to have some card content
7:57:43
There we go And inside of here we're again going to have suspense because we're going to be putting a form inside of here So we'll just call this form And
7:57:50
we'll just say it's going to be suspended form There we go And for this one we're going to have a fallback
7:57:56
Whoops Fall back Actually the fallback is going to go up here There we go Fall back And this is
7:58:02
going to be a loading spinner Perfect So now we have that being
7:58:07
rendered We have our suspended form which is actually just self-closing because now down here we can have a function suspended form
7:58:15
Make this an async function And in here we're going to be getting our notification settings
7:58:21
So we can call await get notification settings I don't want to get the global
7:58:26
tags or anything So we're just going to say get notification settings There we go Because we're going to create this as
7:58:32
our own function There we go We're going to pass in the
7:58:38
user ID So we can make sure we get that in here User ID
7:58:45
user ID which is a string and user ID There we go So at least we
7:58:52
have all that information we passed in For now I'll just return null to get rid of any errors And down here user ID
7:58:58
which is a string We can use that to get our information And I'll just copy over what this is cuz we've done this a
7:59:03
million times before We're essentially just going to query the database specifically for one ID And we also want
7:59:09
to make sure that we're caching this properly So we'll get our cache tag information And there we go That's getting our notification setting And now
7:59:15
what we can do is we can actually pass that into our form So we can say notification form This is going to be notification
7:59:23
settings which is going to be equal to our notification settings There we go So now we have our form that we can use And
7:59:29
we just need to create that particular component because the rest of this card does everything that we need it to do So let's scroll all the way down to our
7:59:34
featured section for our users Inside of our components let's create a brand new component with that name
7:59:40
Export a function with that name This is going to take in our notification setting And specifically the only things
7:59:46
that we care about are the new job email notification and the AI prompt categories So actually back here I can
7:59:52
even make my query a little bit better by only querying those columns So I want to get the AI prompt and I want to get
7:59:58
the new email job notifications Those are the only two columns that I care about for this form Now we can import
8:00:03
this form and we can go back into the form And if I just return null that should at least clean up the errors
8:00:08
in this file And it looks like it did So now all we have to do is make this actual form work And just like all of our forms we're going to make this a
8:00:14
client component and we're going to come in here use form So we're gonna have a form use form
8:00:22
We're going to pass it in our resolver which is a ZOD resolver and we're going to pass it in our user notification
8:00:29
settings schema Just like that We're going to create this So let's open up
8:00:34
our actions section for this We actually don't even have one so we'll create a new file Actions slash schemas.ts
8:00:42
Paste this in there as a constant variable And it's going to be a Zod object And this object only really has
8:00:48
two things Our new job email notifications
8:00:54
That's going to be a boolean And then we have our AI prompt
8:00:59
And this is just going to be a string because essentially we can do an AI prompt be notified of these new settings
8:01:05
So we want to transform this as well to make sure that we have a null value It gets rid of it So val.trim
8:01:11
If that's equal to an empty string then we're going to return null Otherwise we're going to return our value And
8:01:16
we're going to make sure that this value is nullable There we go Make that a function And perfect So now we've
8:01:22
essentially said that we have an AI prompt that's optional And we have this new job email notifications So now we
8:01:28
can come back into here import that We can get our default values And our AI prompt is going to be a
8:01:34
string And our new email notifications is going to be false by default Also we want to use our notification settings by
8:01:40
default if we have those So if we have notification settings use those Otherwise fall back to these default settings Now what we can do is we can
8:01:46
create our onsubmit function This is going to take in our data which
8:01:53
is Z.infer Make sure I import Z There we go It's going to infer this particular schema
8:01:59
Just like that Oops Let me make sure I get the schema There we go
8:02:04
And we can console.log the data And this has to be a type of There we go Now for this particular form we're going to show
8:02:10
and hide things dynamically based on if we check that checkbox So I'm just going to come in here and say our new job email notifications We're going to make
8:02:16
sure we watch that property So we can toggle things based on if this is true or false Now we can render out our
8:02:21
actual form with all of our content inside of it Pretty much just like we've done for the rest of our application
8:02:27
We're going to add an onsubmit here That's going to be form.andsubmit pass in our onsubmit function and the
8:02:33
same exact class name which is going to be space y of six
8:02:39
Let's make sure that we close all this off properly
8:02:45
There we go Now we're going to wrap everything inside of a div This is going to be kind of emulating a card So we're going to add a border
8:02:52
rounded large padding four shadow small and space Y six just to space the
8:02:59
elements out Then we're going to have a form field The name on this form field if we import this properly Whoops Form
8:03:07
field There we go Name on this is going to be our new job
8:03:13
email notifications If we close this off we should hopefully be able to get some autocomplete on this
8:03:19
There we go Next thing that we need to do is our control which is our form And then finally our render function to
8:03:25
render this out So we can come in like this with our field And we essentially want to render out a
8:03:30
toggle switch So we'll get a form item For our form item we're going to come in here with a div class name of flex and
8:03:38
items center and justify between So we want to have text on the left and our toggle on the right hand side Then what
8:03:44
we can do is we can create another div for our left-hand side text content We'll make it so it's relatively close
8:03:49
together with only a 0.5 space between our text And then this is where our form label and description come in So we'll
8:03:56
say daily email notifications and on the lefth hand side it'll say formed or not on the left hand side
8:04:02
below it it'll say receive emails about new job listings
8:04:10
that match your interests There we go Now we have that section that's going to
8:04:16
show up on the left as you can see here We then want to have a form control that shows up on the right and this is going
8:04:21
to be our toggle switch So we're going to use the switch component which it looks like we need to install
8:04:27
There we go We're most likely going to have to force install this There we go So now we can use the switch component
8:04:32
directly inside of here So let's make sure that it gets installed We want to specify that checked
8:04:39
is going to be equal to our value from our field And then the unchecked changed is going
8:04:46
to be equal to field.onchange And that's going to be everything for rendering out our switch So now you can
8:04:51
see we have this toggle on the right hand side and the left side hand side we have the text explaining what this toggle does Now the next thing that we
8:04:58
can move on to is going to be the section for actually rendering out our form field for our AI input So we can
8:05:03
minimize down this form field And what we can do directly below it is if our new job email notifications is checked
8:05:09
then we can render out this check or this field down here because we don't want to show this unless they specifically ask for daily email
8:05:15
notifications Now this one is going to be a form field And I'm going to copy
8:05:20
over some of this stuff So we'll come in here Whoops Just like that So we have our AI prompt And then we have our form
8:05:26
item that we're rendering inside of this There we go And it looks like I'm missing a couple brackets here These
8:05:33
ones actually go on the outside There we go So that fixed up all of our brackets Now we have our form item Again we're going to do kind of similar stuff We're
8:05:39
going to have some spacing between these elements to make them so they're relatively close together 0.5
8:05:45
So we're going to have our form label Our form label is going to say filter prompt just like that And then we're
8:05:51
going to have a description I'll just copy over what the description says because essentially it's just saying our AI will use this prompt to filter your
8:05:56
job listings and only send you notifications for jobs that meet your actual criteria Then we can message what
8:06:02
our form control is which is where our text area is going to go So we have a text area just like that And this text
8:06:08
area is going to be very similar to our previous text area So I'll kind of copy down what the props are for it Make it
8:06:13
self-closing just like that So as you can see we're getting our field value or the default Our class name gives it a
8:06:18
minimum height and we're giving it a nice placeholder telling people what they should put inside of here Then lastly we need our form description and
8:06:25
message And the message is just the error And our description just tells them to leave it blank if they want notifications for all new job listings
8:06:32
So now if we toggle this to be true you can see we get our filter prompt down here with all the information And on larger screen sizes it looks much better
8:06:38
as you can see right here So we can easily toggle between these different states And if they type something into here it'll actually essentially use that
8:06:44
as the AI prompt for our tool Lastly for our specific coding section all the way down here at the end of our form we just
8:06:50
need to add in our default button And this is the exact same button we've been using on all of our forms So I'll just copy it in just like that Now if we give
8:06:56
this quick refresh that's just something to do with the hot module reloading Actually I imported the wrong button is what the problem is So let's go all the
8:07:03
way up here get rid of that and import the correct button There we go Now that should actually fix the particular
8:07:08
problem And there we go Now we can toggle between these And let's just say that I want to get daily email notifications and I'll save my
8:07:14
notification settings And of course actually that button doesn't work yet because we aren't doing anything inside of our onsubmit So inside of our
8:07:19
onsubmit all we're going to do is call a function That's an action And if we have an error we're going to render out that error as a toast message Otherwise we're
8:07:25
going to render out our success as a toast message as well So let's create this update user notification settings
8:07:30
just like we've been doing with all the rest of our actions So let's go ahead into our actions section We of course
8:07:35
look like we don't have any actions inside of our users So let's go ahead and we'll create a brand new file This one is going to be for our user
8:07:42
notification settings.ts And we'll call this user notification setting actions There we go We'll paste
8:07:49
down that function Export async function We'll make sure that this is use server
8:07:56
so we know that this can actually be used We're going to get the data we're going to use inside of here which is going to be of this type of that schema
8:08:02
that we've already used Infer that from zod And now we can go ahead and actually just parse that data And this is something we've done a million times
8:08:08
First of all we're going to be getting the current user And if we're not signed in obviously you can't update your notification settings Then we're going
8:08:13
to be parsing this schema to make sure it's correct And if there's an error we'll let them know that there was an error trying to parse their data This is
8:08:19
kind of the security checks we put essentially in front of almost every single action Finally we're going to
8:08:24
call update user notification settings and we're going to pass in our user ID and our data And all we need to do is
8:08:30
create this function and we're going to make sure we prefix this or postix that with the name DB so we know it comes from our database So now we can go into
8:08:37
our database section So database user notification settings and we need to create that function I'll just kind of
8:08:42
copy what we have up here because it's going to be very similar So we're going to update user notification settings User ID is going to be a string Our
8:08:50
settings are going to be a partial version of this Just like that And then
8:08:56
we just want to call update So we're going to say update passing in our settings So we're going to set that to our settings There's no on conflict we
8:09:02
need to worry about And we have our user ID coming in just like that So that's all we need to do to do our update for this Now we can come back to here and we
8:09:08
can actually import that So we can say import and we want to convert the name of that and that's going to be coming from at
8:09:15
slash and this is going to be our features slash users slashdb
8:09:22
slash and that's our user notification settings There we go Now this update function is actually going to be slightly different than I originally
8:09:28
wrote it And the reason for that is because we could get to the point where our user doesn't have any notification settings yet So we want to do either an
8:09:34
update or an insert Essentially we just want to call this insert function but with our user ID specifically passed in
8:09:40
and only the table values that we want to update What we're going to do here is we're actually going to take this and we're going to emit the user ID from
8:09:46
this section There we go Just so we don't accidentally have that passed in as something we're updating And then here
8:09:52
we're actually going to do an insert unlike I had mentioned before So we're going to insert into the values and we are going to do an on conflict but this
8:09:58
time it's going to be an onconlict do update So you can see we're inserting these setting values on conflict we're
8:10:03
doing an update for when our user ID is the conflicting value Now in order to make this work we need to make sure that we pass along our user ID as one of our
8:10:10
setting values here That way we have all the values that we need to be able to pass along So this is just going to make sure that if we don't have any user
8:10:16
values we actually update them properly because for some reason when we created a user we didn't actually create settings for them That could happen This
8:10:23
will make sure that solves any of those problems So now we should be able to import this particular function Make
8:10:28
sure we get it from the actions folder Just like that And it should be returning us a result So we want to make sure down here we return a success
8:10:35
result So we'll say error false and give it a success response And that solved all of our different errors Looks like
8:10:40
we have no errors anywhere So let's actually test to see if this works We'll just enable this Click save notifications Successfully updated your
8:10:46
notifications And now we know at least we should be receiving daily email notifications Now all we need to do is
8:10:51
implement a system to send out these daily email notifications So in order to set up these daily email notifications
Send user email notifications
8:10:56
this is again something that's really well suited to ingest because they have great cron services So we can go into ingest into functions and we'll create a
8:11:03
brand new one called email.ts And this will be for sending out all of our different emails So we're going to export a constant variable called
8:11:09
prepare daily user job listing notifications
8:11:16
This is going to use that ingest function We're going to call create function and we just need to pass it in
8:11:22
our information and specifically what is the event we want to deal with Well in our case we don't have an event We're going to be using a cron schedule
8:11:27
instead Now for this cron schedule we can set up whatever we want In my case I want it to essentially be at 7 a.m every
8:11:33
single day So we can say 07 that represents the 7th hour And then we can say that we want it to happen on every
8:11:39
single day by putting stars for the day month and the year So this is just saying at 7:00 a.m every single day
8:11:44
perform this crown job We can also specify the time zone by saying that we want it to be America Chicago that's
8:11:50
going to be central time zone We can use whatever time zone we want but since this is like a US-based job board central time zone makes a lot of sense
8:11:56
Now we also need to specify an ID and a name And these are just going to be essentially the same as our function name so it's not super important what
8:12:02
that information is Now the next thing we need here is our async property for our function So let's come in here with
8:12:08
our step and our event Let's create that function Now the first thing we need to do is we need to get all of the users
8:12:14
notifications So we can say const get users and this is going to be a step that we run and this is going to be
8:12:20
called get users and this is going to get all of our users that have notifications So we're
8:12:27
going to return calling await db.query Make sure we import that
8:12:33
We want to query the user notification settings table We want to find all of them
8:12:39
and we specifically want to find the ones where they have their notifications enabled So we'll say user notification
8:12:45
settings table dot new email notifications is true So for anyone that
8:12:50
has their notification set to true we want to access that We want to get specific columns We're going to get the
8:12:56
user ID Set that to true
8:13:01
We're going to get that new job prompt We're going to set that to true And the AI prompt we'll set that to true as well
8:13:06
Also we're going to get information about the user itself We can send that along in the email So we'll say that for the user we want to get their email so
8:13:13
we know where to send it to and we'll get their name so we can put that inside the email message we send to them So
8:13:18
that's going to be all the information for getting the user The next thing we need to do is get all the job listings that are posted recently So we'll call
8:13:24
this get job listings which equals step.run get recent job listings
8:13:35
Now for this function we're going to do a very similar thing by querying our database So we're going to query that
8:13:40
table the job listing table specifically and we want to specifically find many of
8:13:46
them And we want to get essentially all the job listings that have been posted in the last day So we can put in an and
8:13:52
query here And we want to say greater than or equal to because we want to get things that are greater than equal to the most recent day So we can say job
8:13:58
listing table.posted at And what we need to do is we need to figure out what was essentially one day
8:14:05
ago Well the really nice thing is that our event has this TS property which is the time stamp And if we have a cron job
8:14:11
that is essentially the exact time their cron job actually executed So this would be 7:00 a.m every single day So all we
8:14:16
need to do is get one day before this particular time So what we can do is we can say sub days That's going to be a
8:14:22
function that we pull in from date FNS and we can say we want to take that and subtract one day from it Now this we
8:14:28
need to convert to a date So we'll say new date to convert this to a date But you will notice that this actually could be null it has the null value for it So
8:14:36
what we want to do is we want to otherwise default to the current time If for some reason we don't have a time stamp it shouldn't occur But if we do
8:14:42
run into a weird scenario where we don't have a time stamp it'll just default to the current time to get us close enough
8:14:47
Then we want to make sure we're only getting job listings that are published So we'll say the status
8:14:53
is going to be published There we go So this is going to get us all of the job listings that are published Make sure I put that in the correct location
8:15:00
There we go This is going to get us all the job listings posted in the last 24 hours that were currently published Then what we can do is we can get specific
8:15:07
columns from that We want the created at field and actually specifically we don't want the created at field We're going to
8:15:12
be using essentially a negative constraint So we're going to get all the fields except for the ones that I specify here So we'll say updated at
8:15:19
that's also going to be false Status is going to be false And organization ID is going to be false Then what we can do is
8:15:25
we can get information about the organization because we're going to want to put that inside of our email So we'll say organization
8:15:31
and we want to get columns Specifically we just want the name column So at least we can say what organization this job
8:15:36
listing is for Once we get all that information we can essentially run those queries in parallel and make sure that we have data being returned because if
8:15:42
not obviously we have some type of problem Now the next thing that we're going to do is instead of doing all of our email sending in this job we're
8:15:49
actually going to spin off jobs for each individual email And that's so that all these jobs can run in parallel They can have retry logic built in All that fun
8:15:55
stuff that is part of the job Q and ingest It's essentially the fan out pattern where we're creating multiple events from one event so that they can
8:16:01
all run in parallel and have fall tolerance So what we want to do is we want to essentially call steps sendevent
8:16:08
and this is going to call an event called send emails which we'll create in a little bit and then we can pass in all
8:16:13
the events that we want to pass along So we're going to send all of these different events along with this events property So we need to create our events
8:16:21
which is equal to just looping through our notifications and converting them into this event format
8:16:27
Now inside this format we're essentially going to return an object And this object is going to have a name and then it's going to have some data And then
8:16:34
it's also going to have some user information that we're going to pass along And you may notice that's actually very similar to what we do in our ingest
8:16:40
client When we define something you can see we can pass along data or user So what I want to do is I want to create an event We're going to call this
8:16:45
app/.duser job listings So this is for emailing out all the daily job listings We're going
8:16:51
to specify that it's going to have some data properties as well as some properties for the user information So our user is relatively straightforward
8:16:57
We want an email which is a string and we're going to have a name which is a string And then for our data this is going to be a little bit more
8:17:03
complicated We're going to have our AI prompt This is going to be an optional string Essentially what is the thing
8:17:08
that we want to prompt if they pass in some data right here in our filter otherwise if they don't have that it's just going to be undefined And then
8:17:14
we're going to have our job listings And this is essentially going to be a type that is our job listing I'm going to actually copy over the type for this
8:17:21
because it's it's relatively straightforward Essentially what we're doing is we're taking our job listing table and we're omitting the created at
8:17:27
posted at updated at status and organization ID Essentially the exact same thing we did inside of here We're omitting the properties we don't need
8:17:33
And we're also adding in the organization name and we're saying that this is an array of all the job listings So similar to what we did here where we
8:17:39
got the organization name and omitted these properties That's exactly what the type for this is going to be Now we can
8:17:45
actually use that inside of here where we pass along our data in our user Now we already know that the user part is really easy So we can say email that's
8:17:52
notification email Make sure I spell this correctly There
8:17:57
we go And this is actually notification do user.mmail And we can do the exact same thing for name Just like that And
8:18:05
for the name of this event here we want to make sure we match the name over to this name right here So we're going to copy that over and we'll paste that into
8:18:11
here Now to make sure we get nice autocomplete on all of this to make sure we have type safety we'll make this a constant variable And we're also going
8:18:17
to say that it satisfies the get events property which we get from ingest And we're going to type in the type of event
8:18:23
that we want which is going to be ingest right here So that's our client So this is all of our different events And we
8:18:28
want to get just one particular event which is the app email daily user job listings So now you can see we're
8:18:33
getting errors on the jobs that don't have this particular data being returned to us So for example we need to pass in our AI prompt which is notification.ai
8:18:41
prompt And our job listings is just going to be our job listings And we need to map through these to just change them
8:18:47
slightly So what we're going to do is we're going to return all of our listing data And we want to get the organization
8:18:53
name which is just going to be listing.organization.name There we go Now we're getting an error
8:18:58
because our AI prompt is a string or null And we just need to convert null to undefined And that'll get rid of all those errors And now we've essentially
8:19:05
created a bunch of different events with this specific name that we're going to send off And we call this event send emails That's just like the name of the
8:19:11
step So this is the step name And this step is creating a bunch of events for all the different notifications we have set up So if we had 10 users with
8:19:17
notifications set up it would send out 10 different events And each of those events would run our email related code So what we can do is we can create a
8:19:23
brand new event down here to send those emails So we're going to call this send daily user job listing email just like
8:19:29
that And we again need to pass it in all the information that we want to use as well as the function that we're going to
8:19:35
run with all of the code inside of it Let me make sure I get this set up correctly There we go So the very first
8:19:40
thing we need to specify is our ID and our name That's going to be relatively straightforward I'll copy that in because it's just some text that doesn't
8:19:46
really matter Next we're actually going to set up some throttling So this is just making sure that if we send out a
8:19:51
thousand events to all occur at once we can throttle them over a period of time The reason we're doing this is because we're using AI to do this filtering for
8:19:58
some of our job listing postings So we want to make sure that we don't overload our AI with sending too many requests at
8:20:03
once and hitting our rate limit So we're going to put a small throttle here We're going to limit to 10 requests and we're going to say the period is going to be 1
8:20:10
minute So over a 1 minute period we can only send 10 requests at a time This will just make sure we don't overload our AI accidentally but it sh should
8:20:16
respond with these messages relatively quickly to all of our users Now what we're going to do is we're going to put
8:20:21
our email event that we want to listen to which is app/ daily user job listings Same exact thing that we used up here
8:20:28
It's the exact same event that we used there So we just want to make sure we listen for that specific event Then we're going to take in all of our event
8:20:34
and our step data and I want to use it inside of here So we're going to parse out our data So we have our job listing
8:20:42
and our AI prompt just like that And that's coming from our data property and we need to get the job listings Then
8:20:47
next I can get my user information So we can say our user is equal to event do user And now we can actually use this
8:20:53
information First of all if my job listings.length is equal to zero this shouldn't happen but if it did happen I
8:21:00
want to return null Just a fail safe to have in place So we're just going to return out of here in case that's a case
8:21:05
Then what we're going to do is we're going to try to get all the matching job listings So we'll create a variable called matching
8:21:11
job listings We're going to set that to a type of job listings There we go So
8:21:17
essentially it just matches the type of this variable that we had up here And then what we want to do is do a simple if check If our AI prompt is equal to
8:21:24
null or our AI prompt.trim is equal to an empty string well that
8:21:30
means that we don't have a prompt So we want to match all job listings So we'll say matching job listings is equal to
8:21:36
all of our job listings Otherwise we have some type of AI prompt and we want to run that AI prompt And luckily we've
8:21:42
already created a function to do that This is the get matching job listings prompt We can pass it in our AI prompt
8:21:47
and all the job listings we want to search for And in this case we want to return all the job listings not just 10
8:21:52
or five or whatever So we're just going to say that we want to get the matching IDs which is equal to that right there
8:21:58
We want to await this function as well There we go Now I'm getting an error if I go into this function And that's
8:22:03
because by default this parameter should be optional So I'll set it to a default empty object by there Now we can see
8:22:09
that got rid of the error And then what I want to do is I want to get my matching job listings I'm just going to set that to filtering my job listing
8:22:15
array So we can say listing where the matching oops matching IDs includes our
8:22:23
listing ID There we go So now essentially we're just saying only get the jobs that have ids that are returned
8:22:28
to us specifically from here Now we do have an error That's because I spelled job listings incorrectly But that cleaned up the rest of our errors here
8:22:34
Now we can move on and we can check to see if our matching job listings length is equal to zero Well then there's
8:22:40
either no jobs posted or there's no jobs that matches this user's requirements So obviously we don't need to send them an
8:22:46
email or do anything Now we can go through the actual process of sending the email and we're going to use a step for that again for some fault tolerance
8:22:52
So we'll say send email Make this an async function just like that We will await this and we're going
8:22:59
to be using resend for sending all of our emails So it would be something like resend and then we would do our code inside of here So for emails send and
8:23:07
then we'll need to pass along some information So we'll just mark this as to-do and we'll come back to this because we first need to set up resend
8:23:13
Now to work with resend all we need to go is create an account on resend And we can access their API keys by just going to the menu clicking on API keys and
8:23:20
we'll just create a brand new API key Jobboard final Doesn't matter what it is Generally you're going to want to have
8:23:25
sending access only because we don't need full access to the API And now you can see we have a brand new API key which I'll just click copy on And we can
8:23:31
add that into our environment variables We'll come down here for email We'll say
8:23:36
resend API key And we'll just paste in whatever that API key is And we'll make sure we include that in our environment
8:23:43
variable as well So this is going to be Z.string minimum value of one There we go So now
8:23:49
we have resend capabilities And now we need to import the library for resend as well Luckily this is relatively easy to do We can just npmi resend Make sure we
8:23:57
force install that That'll install the resend library for us to use And we can put it inside of our services folder So
8:24:02
here we have our services Let's add resend And we want to create client.ts
8:24:08
So we're going to export a function called resend or actually a constant variable called resend And we're going
8:24:14
to call new resend Just like that Make sure it's capital We're going to pass in
8:24:20
our environment variable which is our resend API key Now we need to import resend Looks like I'll have to
8:24:26
do that manually resend from resend There we go Now that
8:24:32
creates a brand new client for us hooked up to our actual API Now we can go ahead into our email section here and where we
8:24:37
have resend we can import that from our client that we just created and we can call this send function which is going to take in where the email is coming
8:24:43
from where it's going to and so on So for the from email on this one we're just going to be doing testing So I'm going to say it's coming from jobboard
8:24:49
and then we can specify the email which we're going to put as onboardingresend.dev just so we can have this for testing
8:24:55
purposes Also we're going to pass in the user email that we want to send to And then we're going to pass in the subject
8:25:01
as well which is just going to be daily job listings And then finally we need to
8:25:07
pass in a React component that's going to render out whatever our specific code is Now in our case we don't have any
8:25:12
React component yet So I want to create inside of our resend folder I want to create a section for all of our components So we'll say components and
8:25:18
then we'll create a brand new file in here called daily job listing email.tsx
8:25:24
Now the annoying thing about writing out email is that email doesn't have access to a lot of modern CSS features So we
8:25:29
need to make sure that we take into account that a lot of the modern CSS features are not going to be available So we're going to export a function
8:25:35
called daily job listing email It's going to take in some props For now we'll just return null and we're going
8:25:41
to come into our actual email function and we'll pass that in as our daily email listing and we'll call that as a
8:25:46
function just like that That's essentially calling our React component Now like I said a lot of features inside of email aren't available that you
8:25:52
normally get inside the browser So what we're going to do is we're going to use something called React email which is actually built by the people at Resend
8:25:58
to make writing emails in React much easier So to set up React email it's actually relatively straightforward You
8:26:03
can see we just need to run a few install commands We need to install React email as a development dependency and then we can install React email
8:26:09
components So let's go ahead and do that npmi react email And this is going to be a dev dependency for running our React
8:26:16
email locally so we can easily see what's going on Again we need to make sure that we force this There we go And
8:26:22
then we're going to install React email components which is what we're going to use as components to create our email structure And this is what we use in
8:26:27
actually production So this React email component here is purely just for actually rendering out our emails
8:26:32
locally to see what they look like as well as giving us some other features that are really handy So we're going to install that React email components and
8:26:39
we're going to force that as well That'll get us the components that we need And then we want to set up inside of our package JSON Once this is
8:26:45
finished running there we go Looks like it finished up We can run in a section here called email And this is going to
8:26:52
run that React email which is really just called email Just like that We can call dev on this And then we can specify
8:26:58
the directory where all of our components or emails are So in our case it's the source/services/resend/components
8:27:06
And by default it runs on port 3000 which is what our app runs on So let's change the port to 3001 So now if we run
8:27:13
npm run email what that's going to do is it's going to open up on port 3001 essentially a hosting of all of our
8:27:19
different emails Now right now our email just renders out null But if we open this up real quick we can actually see
8:27:24
what our emails would look like Now the important thing to note about this is you must make sure you export them as default exports So that's why we have a
8:27:31
default export here But you can see that I can click on daily job listing email and it renders out my email as well as
8:27:36
anything for like LinkedIn with issues compatibility spam you know all these different things to make sure our email looks good Right now we're not rendering
8:27:42
anything but we'll go ahead and make this email Now for this email we're essentially going to take in a few props I'm going to create a type up here to
8:27:48
help with this a little bit by just creating a type that contains all of our job listing related information And then we can take what we want to be able to
8:27:54
pass in So we're going to pass in a username So the name of the user that's the string We're going to take in our
8:28:00
job listings That is going to be an array of this job listing type which just picks out the types that we need
8:28:05
And then finally we're going to pass in a server URL And this is just the URL where our server is That way we can
8:28:11
redirect people with a link to our particular server So we're just having that in there so we can actually get that information Then what we want to do
8:28:17
is we want to render out all of our components And you may be tempted to use components from your app and like our components folder and so on but like I
8:28:24
said email is so much different than the rest of the web that you really can't get away with doing that you're going to have lots and lots of errors So instead
8:28:29
we're going to use all the components built into React email And the main one we're actually going to use is going to be a Tailwind component So we can
8:28:35
actually style everything using Tailwind So we can come in here make sure we install that Tailwind component Looks like I may have to manually install that
8:28:41
real quick We'll import Tailwind from and that's at react email/component
8:28:48
There we go And this Tailwind component expects you to pass in some children but also optionally allows you to pass in a
8:28:53
config file And we're actually going to pass in our own config file because this uses Tailwind version 3 and we're on
8:28:58
Tailwind version 4 Also certain things like units don't work in all browsers
8:29:03
and by defa or all email clients and by default Tailwind uses So we want to pass in our own Tailwind config So we'll just
8:29:10
call this Tailwind config And actually if you go to the React email site they actually have a recommendation on where
8:29:15
you can actually use a Tailwind config with a lot of this stuff for you So we're going to pretty much be using their default config So I'm going to
8:29:21
come into data here I'm going to type in tailwind config.ts or actuallyJSON No
8:29:27
we'll keep it at TS actually And what I want to do is I want to paste in what that Tailwind config is So you'll notice if we look at the top here all of our
8:29:33
different sizes are using pixels instead of and this is something that the folks at React Email actually do They give you
8:29:39
this exact format for the default Tailwind for font size and spacing So that I just copied over directly And
8:29:45
then these are the styles directly from our application So if we look at our global CSS file we come into here I
8:29:51
essentially took all these styles converted them from OKLCH because that's not supported in email I converted all
8:29:56
of them to RGB and just pasted them in here using the Tailwind V3 formatting for all of them So this just gives us
8:30:02
all of our different styles so we can make sure we can use them inside of our application Now what we can do once we import that Tailwind config is we can
8:30:08
start writing out what our code looks like And we first need to have an HTML element So we'll get that Next inside
8:30:14
that we need the head of our container So we'll put our head element We don't have anything to put in there but we need that to make sure that Tailwind
8:30:19
works properly And then finally let's create a container where all of our content is going to go And we'll give this a class name of font sands So it
8:30:26
uses the same font we use throughout the rest of our application Next up we're going to have a heading
8:30:31
just like this And our heading is going to be an H1 And it's going to say new job listings
8:30:38
There we go And then below that heading we can have some text And you'll notice here I'm essentially using all components from this React email library
8:30:45
because these are going to convert into formats that work well with the actual email templating across pretty much all
8:30:50
email providers So here we're going to say "Hi username
8:30:56
Here are all the new job listings that meet
8:31:02
your criteria." There we go And then below that we want to essentially render out all these different things So first
8:31:07
of all I need to get my props So we can say job listing server username There we go And then below our text we can render
8:31:14
out a section And this section is going to contain all of our job listings So we'll loop through our job listings
8:31:19
We're going to map through each one of them just like this And we essentially want to render out a
8:31:25
component that contains everything So we'll come in here with a div We'll put that as a job listing ID We'll also add
8:31:32
some class names to this And we essentially want this to be a card So we'll say background card text card foreground rounded large We'll put a
8:31:39
border on it We'll get a padding of four The border will be the primary color
8:31:45
It'll be a solid border And we'll put margin on the bottom of six So that just gives us a nice little card shape for
8:31:50
every single one of these job listings that we have And you notice we're getting errors because our props are not being passed in If we want to pass in
8:31:57
default props what we need to do at the very bottom here is we can specify daily joblisting email.review preview props
8:32:03
and we can specify all the props we want to use For example we can pass in an array of job listings
8:32:09
like this And then that's going to give us all of our job listings So now if we save this it should actually work properly I might need to refresh my page
8:32:15
to get it to work Still not working That's because I spelled job listings wrong Now if I get that save you can see it's working I can also come in here
8:32:21
with a username For example John Doe Now you can see that that name is filling in this section right there And then we can
8:32:27
go on and we can put a server URL which by default is going to be our server localhost 3000 And to make sure this
8:32:34
satisfies our params we'll just say satisfies parameters And we want to get the parameters from this function daily
8:32:41
job listing And we want to get the very first parameter There we go So now this gives us all the stuff for our job listings And I'm actually just going to
8:32:47
come in here and copy a few job listings over so we can use them as preview props So you can see we just have some random
8:32:53
job listings with some cities organization names and so on So we can see what these look like And right now you can see we're just getting the text
8:32:59
SDF being printed out Obviously not quite right So let's go ahead and actually style what we want First of all
8:33:04
we're going to want to have a text that has our heading for the thing So we're going to have a class name leading none
8:33:10
font semibold text extra large and we're going to get rid of the margin on the top and bottom Just like that
8:33:17
Inside of here we're going to say our job listing.title And now you can see it's printing out
8:33:22
the title of our job Next we're going to have some more text which is going to be kind of similar This one is going to have some different styles though So
8:33:29
we're going to say that the text muted is going to be the foreground color margin on the bottom two margin on the
8:33:34
top of zero and this is going to be the organization name There we go Now the next thing that we want to do is we want
8:33:39
to render out essentially the different badges for this So we'll say class name margin bottom five for this particular
8:33:45
section And in here is where we're going to get our badges Now I'm going to create a function for us that just returns all of our badge text So we'll
8:33:51
say function get badges This is going to take in a job listing
8:33:57
And what we want to do is we want to get all of our badges And we have a few default badges we're going to use For example the job location requirement Job
8:34:06
location requirement I think I maybe just called it format
8:34:12
location requirement There we go I want to pass in my job listing.loation requirement Then what I want to do below
8:34:18
that is I want to get my job type So we'll format our job type That's going to be my job listing
8:34:25
Then we can format our experience level There we go This is going to be our experience level And then there's a few
8:34:31
badges that are optional For example if our job listing city is not equal to null or our job
8:34:39
listing.state is not equal to null well then we know that we want to add the badge for that So we can say badges.unshift
8:34:46
This is going to put this at the front because we know that we want the location to be towards the start because
8:34:51
that's very important for most people So we'll say format job listing location and we'll pass in our job
8:34:58
listing Finally we want to do the exact same thing for our wage So if our wage is not equal to null and the wage
8:35:04
interval is not equal to null then we can format the wage to actually display that information And this takes in our
8:35:10
wage as well as our job listing wwage interval There we go And again we're putting that at the front because most
8:35:15
likely people care about the wage the most important Now we can return our badges and we can actually use these up
8:35:22
here inside of our code So wherever that was at right here we can loop through these by calling get badges passing in
8:35:28
our job listing and then we can map through each one of these and render out some code Now you may be
8:35:34
tempted just to use the badge component from shad CN but again you really don't want to use anything that's not directly
8:35:40
written for email specifically because a lot of things are not supported So we're going to create our own div We're going
8:35:45
to give it a key which is the index So I'm going to actually get the index property There we go And then what I
8:35:50
want to do is I want to add our class names And I took most of these classes from the badge but essentially I changed them to work specifically with email So
8:35:57
we'll say rounded medium border solid border font medium
8:36:03
W is going to be fit The text foreground and then we're going to have small text
8:36:09
inside of here Some padding on the top and the bottom and the sides And then we're also going to put in some margin
8:36:15
for some spacing because we can't use like gap or flexbox None of that is supported by this property Email doesn't
8:36:21
have any of that support So we want to make sure we just manually add all of that And then we'll put in whatever the badge text is So if we give that a save
8:36:27
you can see our badges are showing up Obviously the styles aren't perfect but we're going to make sure we fix that The best way for us to fix that is actually
8:36:32
by using inline block here So we use inline block That way we can have that actual spacing like we want And then we can move on to the button that's going
8:36:39
to bring our user to this particular location So we're going to come in here with a button and make sure we get this from the React email because we want to
8:36:45
make sure we customize this to be exactly what we want and not use anything from shad CN We're going to specify our href for this which is going
8:36:52
to be our server URL followed by job listings
8:36:57
followed by our job listing ID That'll bring us directly to where this job is at We can also specify a class name on
8:37:05
this and this is going to be rounded medium text small
8:37:10
font medium focus visible is going to be border ring background is going to be
8:37:18
primary text primary foreground and then finally just add some padding in here on
8:37:23
the top bottom left and right there we go and this will just say view details
8:37:29
and this should direct us to that page So now you can see we have a button and when we click on this you can see it redirected us it looks like to the not
8:37:34
correct location If I look at my URL my port is set to 300 So I just mistyped down here Let's change that to 3000
8:37:41
Click on view details And now it'll redirect us to that exact page Looks like we have an error saying it's not found But that's because I'm using
8:37:47
random UU IDs So of course we don't have a page for that But at least we know it is redirecting us to the correct
8:37:52
location Now that's everything it takes to actually create this email And it's really nice that we can test all this And we can go down to this llinter and
8:37:57
compatibility section And this will tell you things that are not supported For example border radius is not supported in Outlook but for our case we don't
8:38:03
care Border radius is only used on a couple of these borders for stylistic purposes So it's okay It's not supported in those particular browsers or those
8:38:09
particular email providers because it'll just have square rounding corners instead of rounded corners So that's okay You can see otherwise we are
8:38:16
completely checked off on all the rest of those criteria Now let's go ahead and actually pass in our parameters that we
8:38:21
need We know that we need the job listings We know that we need the username which we can get from our stuff
8:38:26
So we have here user.name name And then we also need to pass in the server URL
8:38:32
And this server URL we should get from our environment variable So we'll come in here with an environment variable
8:38:37
Server URL There we go Let's come in here make that a string with a minimum size of one And
8:38:45
let's add that to our environment variables We'll just call this like an other category
8:38:50
And this is going to be localhost 3000 There we go So now that should be
8:38:56
everything we need to do to actually send out this email And the annoying thing most of the time when you're dealing with for example cron jobs is
8:39:02
you have to wait for the chron job period to be And in our case our crown job is only at 7:00 a.m once a day But
8:39:08
the nice thing with ingest is we can just manually trigger these events whenever we want So let's make this a little bit larger We'll go over to our
8:39:13
ingest dev server And of course we need to make sure we have our functions being placed So our send email job update
8:39:19
function Let's make sure we add those So let me just maximize this size go
8:39:25
over to our API ingest route Those are the function we just created So we'll send the email function and we have one
8:39:31
called prepare emails There we go That's the two functions that we just created Now we can go over to our function sections and you'll see we have this
8:39:37
section down here for prepare daily job notifications I can just click invoke And what that's going to do is it's a
8:39:43
crown job It's just going to invoke that function And now you can see it's running a bunch of functions So first of all I ran the function for this and it
8:39:49
looks like it completed just fine Got my users and everything And let's take a look at the data returned from this So we look over here the data returned from
8:39:55
this step is my one user with my email and my name Then we can see that we're getting all the different recent jobs So
8:40:01
it looks like there are two jobs that are recently posted And then finally down here we have our finalization Now it looks like we had a little bit of a
8:40:07
problem though cuz if we go over to our runs it only prepared our job listing notifications but it didn't send out any
8:40:13
of our emails Now just to make sure it wasn't a fluke with maybe some caching stuff going on I'm just going to rerun this to see if it then sends it out And
8:40:19
it looks like it's still not sending it out So I think we have a problem somewhere in our code So let's take a look at the code for where we actually
8:40:24
create those functions The prepare function is kind of where we want to get started at So we can go down here and
8:40:29
this is the problem is it's not actually sending out no sorry start sorry start sorry start sorry start sorry start sorry start sorry start sorry start sorry start sorry starting not there up here it's not actually sending out our
8:40:35
events The reason for this is I failed to add in an await here cuz we need to wait for this to actually send out the events That should hopefully fix our
8:40:41
problem Let's go ahead and test that We're just going to go ahead and we're going to reinvoke that entirely from our function section So we're going to come
8:40:47
over here prepare dollar daily jobs Invoke that function And now you can see perfect this worked So it ran that
8:40:53
function and then it saw that we had one user So it spun off one new job for listing out that user's email related
8:40:58
stuff And you can see it ran that specific function Now I can actually show you this works because if I open up my email you can see I got a brand new
8:41:04
email in my inbox that says new job listings and it has the two brand new job listings that have been posted And if I click view details it's going to
8:41:10
open up a new tab And if I pull that new tab over you can see that it opened up all this information for the brand new job that I clicked on viewing the
8:41:16
details for Now we can kind of close out of this because that essentially takes care of all of our user side of things
8:41:22
Now we need to finish up with the organization side of things because if we come back to here I of course had my invalid environment variable That's just
8:41:28
cuz I didn't have my environment variables set What we can do is we can go back to our job board We have all that done We have our AI stuff done We
8:41:34
can go to the employer dashboard and we essentially have two main sections to work on The first is going to be listing out all the applicants down here And the
8:41:40
second is going to be managing our user settings right here So as you can see there's currently no user settings
Clerk organization membership webhooks
8:41:46
Another kind of minor thing we should probably take care of is when we manage organizations we can actually invite members to our team and change
8:41:52
memberships delete memberships and so on And in our database we're storing the organization user settings So when we
8:41:58
add a new member I want to automatically create a membership setting for them And when we remove a member I want to remove
8:42:04
their settings for that organization just to keep our database overall relatively clean So we have some clerk web hooks we need to take care of We
8:42:10
need to take care of the user settings sending out more emails and the application ranking So let's tackle the clerk web hooks first because that's
8:42:16
going to be setting us up perfectly for where we want to go next Let's close out all this Open up clerk And essentially we want to have a create and a delete
8:42:23
version for this So this is going to be for creating an organization membership So clerk
8:42:29
org membership and we'll just call this create just
8:42:34
like that And down here we can give it a name Create organization user settings
8:42:41
because that's what we're going to be doing from this Create organization user settings There we go
8:42:49
So whenever we have a new organization membership which is an organization membership just like that Whenever
8:42:55
that's created it's a web hook sent from clerk we want to create some organization settings for that user So
8:43:00
let's go ahead We need to make sure we copy this event name over since we need to set it up in our ingest client So all
8:43:06
the way up here as one of our clerk web hooks we'll give it that name clerk slash This is going to be a clerk
8:43:14
web hook And this is going to take in the object which is an organization membership
8:43:22
JSON There we go And then we can copy that down for deleted because when we delete a user it also passes along an
8:43:27
organization membership JSON So now at least we have that information which we can use We can verify the web hook And
8:43:33
then we finally need to create the organization settings Whoops There we go And it's organization
8:43:39
user settings This step is going to be relatively simple All we want to do is get our user ID which comes from our event.data.public
8:43:46
metadata or public user data There we go And then we want to get the user ID And
8:43:51
then we want to get the org ID which is equal to event.data.data.organization ID So now we have the two properties
8:43:57
that we need we can insert our organization user settings And all we
8:44:03
need to do is pass in that information So we have our user ID and our organization ID just like that And now
8:44:11
all we need to do is create this function So let's go into our code We can find the section for this inside of features inside of users And actually
8:44:18
this is probably more linked to the organizations So let's put this in the organizations in the database section And I should probably rename this file
8:44:23
to organizations because this deals with organizations And now we can create a new file called organization user
8:44:29
settings And this is where we want to export this function which is going to be an
8:44:35
asynchronous function Just like that Now I'll copy over the code for this because it's essentially what we've done a
8:44:40
million times over and over again As you can see I'm passing in my infer insert settings I'm inserting that into the
8:44:46
table I'm getting the values from that on conflict do nothing Again the reason that I'm doing this most importantly is
8:44:52
because when we first create an organization setting maybe we get that web hook sent to us twice I just want to make sure we don't accidentally send it
8:44:58
through multiple times Also we don't even need to return anything here We can actually get rid of that and we can just use our settings right here because
8:45:04
that's going to give us our ID information Now we just need to create the ability to revalidate this So what we do is inside of our organizations
8:45:11
inside of our cache we're going to just copy this organizations one and rename it organization user settings And
8:45:18
instead of making you watch me type all this out I will paste it in because essentially all we're doing is taking in a global setting and we're taking in our
8:45:24
IDs right here and we're making sure we properly revalidate our cache when we need to Now if we make sure we just
8:45:29
import everything we should see everything is working That looks like that's working And here we can import this And now we have the ability to
8:45:35
create these on insert Now doing a delete is going to look almost identical to this So we're just going to copy this over This is going to be for delete
8:45:44
or membership And here we'll say delete delete And this right here will say
8:45:50
deleted There we go That should be the event name Then what we need to do is we just need to call this delete organization user settings We get the
8:45:56
same user or ID just like this And then we're just going to call the delete function that we're going to create in just a second So we need to create this
8:46:02
function which is in the exact same location as this one So we can come in here export the async function
8:46:11
call it delete It's going to be passing in essentially the exact same data I'm just going to manually get that passed in like this So we're just getting our
8:46:17
ID properties and then we call DB.delete We want to pass it in our organization
8:46:22
user setting table And we specifically want to get it where all of our queries are met So we're going to say and and
8:46:28
equals organization setting table dot user ID is equal to our user ID And we
8:46:33
want to do the exact same thing where our organization setting table organization ID is equal to our organization ID So essentially just
8:46:40
delete the one that we want to get and then we can revalidate based on our user ID and our organization ID There we go
8:46:47
So that is revalidating all of our information and it's deleting all the information And if we import all this properly down here we should see that
8:46:54
everything is working There we go So now we just need to make sure we take these two functions and we put them into
8:46:59
ingest So what we can do is we can come all the way over here in our API ingest and let's just add those functions So
8:47:04
we're going to create the clerk membership and this will be clerk delete org membership I'm going to actually
8:47:11
move these up with the rest of our clerk ones just for some organization purposes Now the next thing that we can work on in our application is going to be that
Organization user settings page
8:47:17
settings page So we'll go over to user settings just like this This is the page that I want to work on next And the nice
8:47:22
thing is is it's very very similar to the page we already created for notifications here So I'm actually going
8:47:27
to copy that entire page and we're going to use it over here So we're going to create a file in user settings Actually
8:47:34
it's going to be a folder User settings Whoops didn't even click folder There we go User
8:47:40
settings We're going to paste in that brand new page And this is going to be our notifications page And this is actually just our employer user settings
8:47:47
page Let's give it a little bit better name And all we need to do is make some minor changes to what this page looks like and what form we're rendering and
8:47:53
so on So I first want to get the organization and the user information So we'll say get current organization as
8:47:59
well And if either of those are equal to null well then we can't update the settings There we go So we'll just
8:48:05
return not found Then what we want to do is exactly the same code here but we want to make sure we pass along our organization information as well to our
8:48:11
form So we'll come in here with our org ID just like that And we'll make sure we accept org ID
8:48:18
and or ID as a string Now our notification settings are going to take in both a user ID and an org ID And if
8:48:24
we scroll all the way down to where that's going to be and we might as well call this organization ID to be a little bit more with our names and here
8:48:32
organization ID Now if we scroll down to this function we'll make it accept those properties So we'll come in here
8:48:37
Organization ID is a string as well And we'll say it's organization and user
8:48:44
ID And instead of getting this from the user table we want to get the organizations from the organization
8:48:50
table So we'll get organization user settings global tag And this one we actually want the ID tag There we go And
8:48:56
we're going to pass in our ID which is our user ID and it's going to be our organization ID Then again changing the
8:49:02
table here that we work with We want the organization table specifically Same thing here Organization table And we
8:49:08
want to do a double query So we're going to put an and right here There we go And
8:49:13
we want to just copy this query because we're going to do essentially the exact same thing but this one is going to be
8:49:19
for the organization ID There we go Now when it comes to selecting the columns that we want we'll just keep all the
8:49:24
columns It doesn't really matter Actually I guess we might as well limit it So we're going to get the new application column and then we're going
8:49:30
to get the minimum rating column because those are the only two things we're using Now we can just scroll up a little ways and we can make sure that we're
8:49:35
rendering the correct notifications form So where we're importing notifications form I want to just get rid of that So
8:49:41
come up here notifications form get rid of that input completely and we're going to create a brand new notifications form
8:49:46
specifically for our organization for our user settings So we're going to come all the way down to our features We're
8:49:51
going to put this inside of organizations Create a brand new folder or file We're going to call it notifications form.tsx and make sure
8:49:58
that's in our components folder Now this notifications form is going to share a lot in common with the notifications form we created over here So I'm going
8:50:04
to copy and paste this in so that we can do all the different changes that we need directly inside of here So the very first thing is obviously our schema is
8:50:10
going to be different and our update function is going to be different So we can get rid of those but the rest is going to be very similar So first of all
8:50:15
this is going to come from our organization user settings table And we specifically only care about the props
8:50:21
here and minimum rating here Now while we're at it we can go ahead and change out this schema with a new one So we're
8:50:27
going to use an organization user settings schema Same thing here We're going to use the exact same new schema
8:50:33
So let's go ahead and create that schema We're going to go into the action section for our organizations So new
8:50:38
folder actions and we're going to create a file called schema.ts And we'll actually call it schemas.ts ts to be
8:50:45
consistent We're going to export a constant variable with that name We're going to use a zod object We're going to
8:50:51
get the new application email notification That is going to be a boolean
8:50:58
And then the next one that we're going to have is our minimum rating
8:51:04
This is going to be a number It's going to be a minimum value of one
8:51:12
We're going to have a maximum value of five And we're also going to make that nullable So they don't have to pass this
8:51:18
in if they don't want to So now we can actually use and import that schema Just like that And we can make sure that we
8:51:24
have here our minimum rating By default we'll set that to null And then we're going to have our notification settings
8:51:29
down here which we're going to set to false by default Now for our update setting we're going to call this update organization user settings We'll come
8:51:36
back and fix this in a little bit We can get rid of this notification part right there And then what I want to do is here I want to listen for the new application
8:51:43
email notifications instead So there we go That's the new field that we're going to be listening to We can copy down that
8:51:48
exact same name because we're going to use that here This will still say daily email notifications but we're going to essentially change what this says It'll
8:51:54
say receive a summary emails of all new job listing applications There we go
8:52:01
And then down here we're going to have a section that's going to be specifically for our minimum rating And this one's going to be a little bit different
8:52:07
because we're not going to be using a text field We're going to be using a select field for this So I'm going to kind of get rid of a lot of the stuff
8:52:12
that we have inside this form item and start from the scratch So the very first thing I want to do is put a form label
8:52:18
This form label is going to say minimum rating Then after that label we're going to
8:52:23
render out our select component Make sure we import the correct one The value for this is going to be field value or
8:52:30
if we well if we have a field value it's going to be our field value to string
8:52:35
So we can convert essentially from a number to a string Otherwise we're going to use the any value just like this
8:52:40
which is a value that I'm going to create So let's just close off this select scroll all the way to the top and we can just say const
8:52:48
any value is equal to any Then let's get rid of some of these imports we don't need just to clean up a little bit And
8:52:55
if we scroll all the way back down to where we are working we can come in here with an onv valueue change and we can specify that when our value changes
8:53:02
we're going to call field.onchange And if our value is equal to the any
8:53:07
value then we want to return null Otherwise we want to convert our string into an integer So we're going to parse
8:53:12
this into an integer just so we can make sure when we store this in our database it's an integer While we store it in our
8:53:17
select it's going to be a string Then inside of our select we want to render out our form control And our form
8:53:23
control will have our select trigger inside of it And that is going to have our select value And the select value
8:53:30
here is going to be an as child value because we essentially want to render out not the number 1 2 3 4 but we want to render out some stars so it's a
8:53:37
little easier for people to look at So if the field value is equal to null then we're going to render out a span that
8:53:44
just says any rating just so they know that it's literally any value Otherwise we're going to render out our rating
8:53:49
icons And this is a component we're going to create to render out what our icons should look like And we'll make sure the class name on this is text
8:53:55
inherit so that it inherits the proper text color We'll also pass in the rating which is a field value which is just
8:54:01
going to be a number between 1 and five Now we can go ahead and give that a quick save but we need to create this rating icons component So let's go ahead
8:54:07
into our job listing section cuz that's kind of where this makes sense to put and we'll put it inside of our components Actually it's going to be an
8:54:13
application section because it's specifically related to an application We'll say that we want our rating
8:54:18
icons.tsx We're going to export a function called rating icons It's going to take in our
8:54:23
rating and our class name Rating is going to be a number or it
8:54:30
could be null And then finally our class name This is going to be an optional string
8:54:36
just like that Now if our rating oops if our rating is equal to null or it's
8:54:44
not within our range of 1 to 5 So if it's less than one or it's greater than five we'll then just want to return
8:54:50
unrated because it's either unrated or we have a rating outside of our range which we don't want to take into account
8:54:55
Then we want to render out a number of stars So we're going to say that these are an array of React nodes which by
8:55:00
default will be empty And we want to render out five stars where the ones that are filled are equal to our rating
8:55:06
So like the first three stars are filled and the second two are empty So we can just do a simple for loop for this Let I
8:55:13
equal 1 I is less than or equal to five and I ++
8:55:18
There we go Make sure I put a comma here And actually I should have semicolons not commas Don't know what I was thinking There we go Now inside this
8:55:25
loop all I want to do is add a new element into our array I want it to be a star icon Just like that And the key is
8:55:31
going to be my index And then finally I can come in here with a class name And this is where I can specify what this is
8:55:37
going to look like So we'll use CN for this We'll say the size is going to be four And then whoops four There we go
8:55:43
And then if our rating is greater than or equal to the current number that we're on well then we want it to be
8:55:48
filled in So we're going to say that our fill is going to be current That is going to fill in our text or fill in our
8:55:55
star with whatever the current text color is Then finally we want to pass in any additional class names So we'll say
8:56:00
class name just like that And that'll close all that off Let me make sure I have all my parentheses in the right
8:56:05
places There we go So that's just going to add that star icon for us Finally we want to return those star icons We're
8:56:11
going to put them inside a div with a flex gap of one We're going to render out our stars And then we're going to
8:56:18
have a span for our screen readers So we'll say screen reader only That is just going to say rating
8:56:24
out of five So that way they know it's like hey a three out of five two out of five and so on So now here we have our
8:56:29
rating icons just like that Now the next thing we need to specify is going to be our select control So we're going to
8:56:35
come in here with our select content We want to get all of our different items So select item
8:56:42
There we go And this first select item is going to be the any option So I'll say any value just like that This is
8:56:49
going to say any rating And then finally we can move down below that and loop through all of our different rating options So we'll come in here with
8:56:55
rating options and we'll filter those down Now this rating options variable is something that I want to create so I can use it
8:57:01
across my application for what all my different rating options are So inside my job listing section I'm just going to create a new folder called data Make
8:57:08
sure that's in the correct folder here I'm going to create a new file called constants.ts
8:57:14
And we're going to export a constant with that rating options name And it's just going to be null 1 2 3 4 5 as const
8:57:22
So those are just our options for the different ratings we could possibly have So now I can import that rating options
8:57:27
And I want to just filter out the null option cuz that's not allowable in this context So r is not equal to null So
8:57:33
it'll only give me 1 2 3 4 5 Then for each one of those I want to map over the rating So we'll just call this rating
8:57:40
And inside of here for that rating I want to render a select item And this select item we'll have a key which is
8:57:46
just my rating value 1 2 3 4 or 5 The value will be my rating to string since it must be a string based value And then
8:57:53
finally we're going to render out the rating icons So we have a visual indicator of what this looks like Same thing I'm going to make sure my text is
8:57:59
inheriting My rating is going to be equal to the rating value And then we can just close that off like this So
8:58:05
that's going to render out all of our rating icons And finally underneath of all of this we want to add a description and error message So we'll say form
8:58:12
description and we'll come down below that with our form message Just like that And the description on this is
8:58:18
going to be pretty long so I'll just copy it over because it's just text for the user Only receive notifications for candidates that meet or exceed the
8:58:24
rating Candidates three to five stars should meet all job requirements and are likely a good fit for the job Just to give a little bit of context on what is
8:58:30
a good or bad rating So now let's go ahead We need to make sure we implement this function and we need to make sure
8:58:35
we import things here So if we import the notification form and we get the correct one that was the wrong one Get
8:58:40
the correct one we should at least be able to render stuff on our page over here And you can see we have our daily email notifications If we turn that on
8:58:46
we can check one of these five ratings And that's how we created our rating stars You can see we filled in the stars up to the rating number which is really
8:58:52
useful So now they can come in here and change this to whatever star rating they want So now let's go ahead and actually implement this function on update
8:58:59
organization user settings So inside of our actions we can come in here and we're going to say organization user
8:59:05
settings setting actions Actions.ts There we go This is going to
8:59:12
be a server section So use server export This is going to be an async function
8:59:18
with that name And we know that we want to pass in our unsafe data
8:59:24
just like that Z.infer And we want to infer the type of our
8:59:30
organization settings schema There we go
8:59:37
We'll just make sure we close that off And then inside this function we just need to make our two checks we make inside every single function The first
8:59:43
is going to be getting our current authentication So our user and organization if those are null return an
8:59:48
error And then we're going to be making sure that our data is also correct Otherwise again return an error Then finally what we can do is we can await
8:59:55
calling update organization user settings and we want to make sure this
9:00:00
is the database version and we're going to pass in our user ID our organization ID which is our org ID and then finally
9:00:07
all the data that we passed in If this is successful we can just return a message saying hey you successfully updated that and now we can go ahead and
9:00:12
implement this function inside of our database So we'll go into our database for organization user settings and we
9:00:18
can essentially add in a function for update Now the props for this function look
9:00:23
really confusing but really all we're doing is passing in our user ID and organization ID So that's our ID And then for our settings we're just
9:00:29
removing our organization and user ID So we only take in the settings we particularly want which are essentially
9:00:34
our created at updated at new application and minimum rating Those are the only fields we can pass in Then
9:00:40
inside of here we essentially want to do almost the exact same thing we did in insert So I'm actually going to copy this and I'm going to paste it down
9:00:46
including this revalidate We might as well get that as well So we'll come in here with that And this is going to take in our user ID and our organization ID
9:00:52
There we go So what I want to do inside of here is take all my current settings I want to take my user ID and my
9:00:59
organization ID And essentially I want to do an update on that But instead of on conflict do nothing I'm going to have an onconlict do update I'm going to have
9:01:07
my target be an array this time which is our organization user settings table user ID And the exact same thing but for
9:01:14
our organization ID So in the case where we have a conflict on that ID then I want to take our settings and I want to
9:01:21
set them to that So what this little bit of code essentially is doing is we're saying okay try to insert a new row into this table If one already exists just
9:01:28
update it instead And again the reason we're doing this is in case our web hook fails or we didn't actually save our notification settings this will just add
9:01:34
a brand new one or update Either case it doesn't really matter But that should take up care of pretty much everything We just need to make sure we import this
9:01:40
function directly into here So all the way at the top of our page where we're importing our insert function which I'm
9:01:45
not sure where it's at Of course I don't think we actually have an insert function So of course we don't have one So we'll just import this from
9:01:53
Actually I can just do an import like this There we go Whoops that's not the right one Import that from the actions
9:01:59
not the database There we go So now we do have the correct thing being imported inside of our actions This is where we need to do the manual import So we'll
9:02:06
scroll up to the top here and we'll just do an import We'll import that from and it's going to
9:02:13
be at slash and it's going to be features organizations database organization user settings And
9:02:20
of course I spelled that wrong So let me fix the name on that file
9:02:25
There we go Might take a little bit for it to process through on everything Of course probably need to redo a few
9:02:31
things there There we go Now let's try to refresh our page See if that actually processed through And it looks like it's trying to miss something because it's
9:02:37
trying to import from the wrong location So let's just see where we still have that at in our code Looks like we don't have it anywhere So it might be cached
9:02:44
I'm just going to clear out my cache because sometimes this happens when you rename files Sometimes it gets a little stuck on what's what
9:02:51
Going to retry that real quick Let's do another retry I was just having
9:02:56
a hard time deleting that information Looks like Oh because I failed to set
9:03:02
shut down the correct location This was our email server that was running We can keep that running That's not a big deal So now we can come over here refresh our
9:03:07
page hopefully to rebuild entirely from scratch and that'll actually solve our problem That still didn't solve the problem It looks like it's in our clerk
9:03:13
file So let's just close out of all this Oh and of course here it looks like it just hasn't saved this file So if we give that a save that should solve it
9:03:20
Actually it does not solve it So let's go back into that file That was the clerk file right here Okay it did It just had to build this system So now if
9:03:26
we give this a refresh we shouldn't have any errors We can enable this We can set a minimum rating Let's say a minimum rating of three is what we want to use
9:03:33
And we'll click save And that successfully updated our notifications And if we come over here to the organization user settings refresh this
9:03:39
page we should see we have a brand new setting in here for that user And we do And the minimum rating is set to three
9:03:44
just like what we want Now we can go ahead and work on sending out an email using ingest and resend for all of our
9:03:50
email services Just like we did when we were doing our daily job listing emails we can essentially do the same exact thing So to get started I'll just kind
Send organization email notifications
9:03:56
of copy over the name of the function that we're going to be creating So you can see here it's prepare daily organization user application
9:04:02
notifications really lengthy name but I wanted to be as explanatory as I could Same exact cron 7 am on essentially
9:04:08
every single day And we just gave it some names inside of here Now we're going to have a bunch of different steps inside of this system The first step is
9:04:14
going to be for getting all of our different user information And this is very similar to the get user step up above in our previous one but we're
9:04:20
getting our organization user settings instead of our user notifications So that's the only difference between these
9:04:25
two And again we're selecting only the columns that we care about and only when they have the new application email set
9:04:31
to true So that gets us all of our user information Next we need to get our applications So we'll call this step.r
9:04:37
run And we'll call get recent applications And this is going to
9:04:44
be pretty similar to what we did for the job listing section above as well So I'm actually just going to copy this over
9:04:49
And you can see here all we're going to do is go into our job listing application table for anything that happened within the last 24 hours So any
9:04:56
new application in the last 24 hours we're going to get those and we're just specifically selecting only the columns we want for we want the rating column we
9:05:02
want the user's name we want the job ID and title and we want the organization ID and name So we're just getting the
9:05:08
specific columns for all of our recent applications and our users in our database that's selected that they want
9:05:13
to be updated Then we're going to check to make sure that this data is being returned from us So again here we're
9:05:19
just doing a promise all waiting for all the data and then we can come through and we can check hey is this data there
9:05:24
if it's not just do a quick return Now one thing that's important to understand is that one user could have multiple different organization user settings
9:05:31
because they could be a part of multiple different organizations So we want to essentially only send them one email
9:05:36
even if they're in 10 different organizations So we're going to try to group all these settings by the actual user themselves So we can come into here
9:05:44
we can say we want to get our grouped notifications that is object.group by and we want to
9:05:50
group our user notifications by the user ID So we can just say n do user
9:05:56
ID There we go So what this is going to do is it's going to group all the settings for each individual user all in
9:06:01
one setting So we can say okay this user has four organization settings and now we have all of those under one single ID
9:06:08
Then we can essentially get the events that we want to fan out Same exact thing up here when we got our events right
9:06:13
here We're going to be doing the exact same thing down here But it's going to be a little bit more complicated because we have a lot more code to go through So
9:06:19
we're going to go object.ent entries We're going to take our groups notifications just like that We're then
9:06:25
going to map through these just like this And specifically we only care about the second property The first property's
9:06:30
user ID We don't even care about that All we care about are the array of settings So we'll just put a comma here
9:06:36
to denote that we only want the second property And we're going to get just the second property from here And then for
9:06:42
some reason object It has some weird interaction So like with with group by and everything it thinks that settings
9:06:47
could be null for some reason So if it's null or the settings.length
9:06:53
is equal to zero we're just going to return null This should physically be impossible but for
9:06:59
some reason object.ent entries is not the greatest API So it doesn't really know that Next I want to get my username
9:07:05
That's just settings uh the first one user.name because we know it's the same user for all of these So the username is
9:07:12
going to be the same for all of them And same thing here the user email This is going to be exactly the same for
9:07:18
all of them because we grouped by that user ID and then we can get the applications that fall under their filter So we can say filtered
9:07:24
applications equals applications.filter and we want to filter all the
9:07:29
applications that fall under our setting criteria So we can say return settings.find
9:07:36
where the s.organization organization ID is equal to the job listing organization
9:07:41
ID just like that and the minimum rating is either equal to null or we have the a
9:07:49
rating which could be a null value So by null value we'll default that to zero We want to check that that's greater than
9:07:55
or equal to the minimum rating There we go And I want to clean up my parentheses a little bit because this should be
9:08:01
grouped with the section below it right here There we go And of course it looks like I need another parenthesy in here
9:08:07
So what this code is doing is it's saying okay all of the applications that have been applied for I want to only get applications that either that both match
9:08:15
the organization I'm a part of So if I'm not a part of an organization that had an application obviously don't send that to me So only organizations I'm a part
9:08:22
of and only ones that are at least my minimum rating or higher Then once we're done with that we can map this into the
9:08:27
exact format we want for sending out our emails So we can just do a quick map here for all of our applications And we
9:08:33
want to return our organization ID which is going to be joblisting.organization
9:08:38
ID I want to do the exact same thing with my organization name And this is just kind of collapsing this down into a
9:08:44
single format which is easier to pass around We're going to do our job listing ID which is job listing ID Do the exact
9:08:51
same thing with our job listing title Down here we can get our title And then
9:08:58
finally our username which we already know is our username and our rating which is our rating And actually this
9:09:05
username is different because this is the name of the person applying So we want to get that specifically and we
9:09:10
also want to get the rating specifically This username up here is the person that's receiving the email This down here is the person applying for the job
9:09:16
Then once that's done let's minimize this and minimize this We can come down here and we can say that if our filtered
9:09:22
applications.length length is equal to zero Well nobody has applied that meet your requirements So we'll just return
9:09:29
null And then with all of that out of the way we can finally actually map this down to the value we want cuz we're still inside this giant map up here And
9:09:36
this is where we return essentially the events that we want to run So we need to give it the name of our event as well as the user property and the data property
9:09:43
for our event And we know that that's going to be a constant that satisfies the get events property where we pass in
9:09:50
our ingest type And we specifically want a get event type but we need to create the event for this So this event name I
9:09:57
might as well just copy over because it's quite long is essentially just going to be email daily organization user applications So we want to create
9:10:03
that inside of here So we can come right down here create that email or create that type and we need to give it a data
9:10:10
type and we need to give it a user type So for our specific data I'm going to copy this over because we've kind of
9:10:15
already looked at this data right here There we go This data is essentially just what we typed into that field when
9:10:21
we were doing our map You can see we have our username user organization ID the organization name job listing ID job listing title and then all of our
9:10:27
application related data We're essentially we're just getting the rating portion only So whatever the rating property is we're using that for
9:10:32
our application Then for our user it's the same exact thing email and name cuz we need that to be able to send them an email So we'll paste that down into here
9:10:39
So essentially we're just making sure that it matches up with this filtered applications type So now we can use all that information inside of here So we
9:10:45
know the name I'll just copy that over just like that Then we can specify the email and the name of the user So this
9:10:51
is going to be user name and email is user email This is who we're sending that to And then here we're going to
9:10:58
have our applications which is our filtered applications Make sure I put a comma here And that gives us all of our
9:11:03
different events that we want to be returning from this Now I'm going to minimize this down to our events right here because there's a few cases where
9:11:09
we're returning null from this if we don't have any data So I want to do a quick filter to make sure we get rid of all those null values So we're just
9:11:15
going to get rid of the null values just like that Then finally all the way down here we can call step.ende event We'll
9:11:21
call it send emails and we're going to send along all those different events And now we just need to create the listener for those events similar to
9:11:28
what we did up here where we created that listener for this one So I'm going to copy over this top section of this
9:11:33
function So we can come down here We can paste that down and make sure we close this off And as you can see we just gave
9:11:39
it a specific name and ID name This one again we are throttling Now we probably don't have to throttle as aggressively
9:11:45
on this one we might as well just bump it up to maybe like a thousand a minute because all we're doing is sending out emails We're not doing any AI stuff but
9:11:51
we'll still put the throttle in there just so we don't massively overload our email system Then inside of here we're going to kind of do the exact same thing
9:11:57
that we did up here So we're just going to pretty much do that exact same code We're going to paste it down over here You can see we're getting our
9:12:03
applications from our event We're getting our user information And if we have no applications just don't do anything Then we're going to call
9:12:09
step.run which is going to send our email out This is going to be an async function
9:12:16
And this is going to essentially call resend that emails send And it's going to pass
9:12:23
along pretty much the same information we used up here So I'm just going to copy that paste it down into here and change it slightly So this is our daily
9:12:30
joblisting applications And this is our daily job listing
9:12:35
application So we're going to call this daily application email There we go And
9:12:40
instead of passing in job listings we're going to pass in applications And then we don't even need the server URL
9:12:46
because we're not going to actually be putting links to any of these specific pages There we go Now we just need to create that email and the rest of this
9:12:51
should all work just fine So for this email what I'm going to do is I'm going to go over to where we have our resend component I'm going to copy this
9:12:57
particular email over I'm going to make sure I get the name of it properly So we'll come in here paste that down
9:13:03
change the name of this right there and then I'm just going to change around what our props are Now I'm going to copy over the prop for our application
9:13:08
because we've already looked at this prop It's the exact same thing that we used in ingest So I'm just copying it over from there essentially So we know
9:13:15
that we want to have applications the username and that's it We don't have any server URL So we just want these two
9:13:21
properties being passed into our application And this should say application There we go Now also we're going to scroll way down here to where
9:13:27
our default props are being defined Make sure we use the correct parameters there And we just want to make sure instead of job listings this should say
9:13:34
applications And for now we'll just pass it in an empty array And we'll come back and fill that in with real data in just
9:13:39
a little bit Let's scroll all the way back up to the top here so we can loop through our applications So this should say new
9:13:46
applications Just like that This should say here are all the new applications
9:13:54
for your job listings And then this is where we're going to be getting to the confusing
9:14:00
part So we're going to close out of this section We don't need get badges anymore We can get rid of that Now we can work on the actual code inside of here
9:14:05
because we have nesting For example a user can have multiple organization settings They can have multiple
9:14:11
organizations Each organization can have multiple job listings and each job listing can have multiple applications
9:14:16
So we have three different levels of nesting We have the user we have their settings we have the organization and then we have the actual applications for
9:14:23
those uh job listings So what we want to do is just break this down into each one of those different levels So we're going
9:14:29
to say object And we're going to also group by the specific thing we want to check So in
9:14:34
our case we're going to be grouping our applications by organization to start with That's kind of our top level right
9:14:40
here So for each organization we want to group it down by a level Then we're going to map over the entries that we
9:14:45
got from that And the entries are going to be our org ID followed by our org applications There we go And this is
9:14:51
going to be called org ID There we go Let's get that finished off there And
9:14:57
then we can actually return some value from here And we want to also get the index value from this There we go So
9:15:03
here I'm going to say if my org applications is equal to null or my org
9:15:08
applications.length is equal to zero then I'm just going to return null This shouldn't happen but again like I said
9:15:14
for some reason group by entries just don't work super well with Typescript Then we can kind of get to the actual
9:15:19
meat and potatoes here where we're going to return our organization section And our organization section is going to
9:15:25
have a key which is going to be our org ID We also want to have our org name
9:15:31
That's going to be our org applications Get the very first one and the name because we know they all should have the exact same name because they're all
9:15:37
grouped by that particular ID Give that quick save So it moves on to another line Then we can get our applications
9:15:44
which is just our org applications So these are the applications grouped by particular organizations And then we're
9:15:49
going to have this fancy little no margin property We're going to say if our index is zero we're going to have no margin And that's because we can't use
9:15:55
the gap property So we have to use margin top or margin bottom And we want to make sure we don't put margin on the
9:16:00
top of the very first element Again this is an issue purely with email and not necessarily with actual CSS because we
9:16:06
can't use fancy CSS with emails So now let's create that organization section
9:16:12
We know that this is going to have an org name Let's make sure we get those props in
9:16:18
there There we go We're going to have an org name That's a string We're going to have our applications That's an application
9:16:25
array And then finally no margin And that's going to be an optional parameter which is going to be a boolean There we
9:16:31
go Now up here we can get those values Org name applications and no margin
9:16:37
which by default we'll set to false Now inside of here we want to render out a section The section is going to have a
9:16:43
class name of no margin undefined And if there is margin we'll put margin on the
9:16:49
top of eight to give it a nice large amount of space between these elements Then we're going to give a heading And
9:16:54
this is going to be an H2 heading because it's kind of the second level of nesting in our application We'll say leading is none Font is semibold Text is
9:17:03
3XL Margin on top and bottom are going to be four So we'll use my4 just like
9:17:08
that Let's close that off Put our org name directly inside of here and make sure that we return this There we go
9:17:15
Then below our heading what we can do is another set of object entries and object grouping So object.ent entries and we
9:17:22
can put that inside of an object.group group by We want to group our applications
9:17:28
where a joblisting ID is what we group by So now we're grouping by the job listing as the next level of nesting And
9:17:35
again inside of here we want our job listing ID and we want our listing
9:17:41
applications And we also want to get our index so we can make sure we can remove the margin in certain cases There we go
9:17:49
Now what we want to do is the exact same if check that we were doing before So if I scroll up here we're essentially going to do this exact same thing I'm just
9:17:56
going to copy that down because it's very similar to what we're going to be doing I just need to make sure it looks like I'm missing a parenthesy Actually I
9:18:01
see the problem I have an extra parenthesy where I don't need it right there And I need to move that parenthesy to here There we go That fixed all my
9:18:07
formatting And now pretty much my listing applications if those are null return null And then we need to render
9:18:12
out a job listing card as our next particular thing So our key is our job listing ID We want to get our listing
9:18:20
application the first element in it and we want to get the job listing title So we can pass
9:18:26
this along as our job listing title Again we're just doing this level of nesting essentially And then we can pass
9:18:32
along all of our listing applications And now this job listing card is just going to be another component very similar to what we did for this
9:18:37
organization select So we might as well just copy it over and make changes as needed So up here we're going to have
9:18:43
our job listing title and that's going to be in place of our org name Applications is going to be the same No
9:18:49
margin is going to be exactly the same here Here instead of rendering out a section we're going to render out a div We're going to add in some class names
9:18:54
We're going to use that CN function And this is because we want this to look like a card So we'll use all of our different card styling Rounded large
9:19:03
border We're going to add some padding onto this Border primary border solid
9:19:09
And of course we want to make sure we do the no margin properly So if we don't have no margin then we'll add a margin
9:19:16
on the top of six There we go Close off that div And now what we want to do is we want to put a heading inside of here
9:19:21
And we're going to use H3 because we're on our next level of sizing We want to change around our font a little bit So
9:19:27
we're going to change this to a text XL And our margin on the bottom is going to be three for this particular element And
9:19:32
margin top of zero Then we're going to put our job listing title into this heading Then the next thing we can do is
9:19:38
we can loop through our applications And finally we don't need to do any other layers of nesting So here we can just
9:19:43
get our applications We can map through each one of our applications as well as the index for them
9:19:49
and we can render out some content So we're going to render a text element The key is going to be our index Our class
9:19:56
name here is margin on the top of two margin on the bottom of zero And inside here for our text it's going to be
9:20:02
pretty straightforward We're going to have a span that has the application's username So we'll say application Looks
9:20:07
like I want to remove an s from that There we go Username We're going to put a colon and a space after that And then
9:20:14
below that we're going to get our rating icons So we're going to say rating icons pass in our rating which is our
9:20:19
application.rating just like that But we can't use our rating icons component The
9:20:24
reason for that is our rating icons component uses SVG which don't work very well inside of emails So we need to
9:20:30
create our own rating icons component which is going to look almost exactly the same You'll notice we have the same if check We have the same for loop but
9:20:36
instead of using an icon we're just using the font of a star or a non-filled star So this is just using this specific
9:20:42
font Also for some reason the height property doesn't work in some email clients So instead of specifying a
9:20:47
height I'm specifying a width And then I'm using margin bottom of negative to be able to get my centering perfectly
9:20:53
right which what I would normally do using height So as you can see we have some weird email tricks going on here just to make sure this works with an
9:20:58
email properly Now let's go down here and actually put in some placeholder applications I'm just going to copy these over cuz this part doesn't really
9:21:05
matter You can just see some of these are for the same organization some are for different organizations some are for the same job listing some are for
9:21:10
different job listings So you can see that it kind of maps between all that different stuff And what we want to do is go over here where our actual emails
9:21:16
are loaded up So we can click on this page We can open up the section for our daily application email And you can see
9:21:22
what this looks like You can see here's our new applications person's name And you can see here's the applications for this job You can see we grouped it by
9:21:28
organization by job listing And then we have all the applicants Same thing here This person's unrated And then finally
9:21:34
we have another job down here for a completely different organization that this person's a part of Now we just need to test to make sure that this actually
9:21:39
works within our actual system So go over to email Let's make sure we import this properly There we go We then need
9:21:45
to take these two functions and we need to make sure we put them in our ingest server So go all the way up to app API
9:21:50
ingest right here So let's paste down this one And then we
9:21:56
also have one called prepare There we go That's all of our different emails We might as well group these together We'll put those ones together Put these ones
9:22:02
together So now hopefully that's everything that we need to actually have the emails be sending to someone So let's go ahead and test this out We'll
9:22:08
go to our ingest dev server again Looks like we're having an error syncing with our application Let me just try refreshing That still doesn't look like
9:22:14
it's working So what I want to do is make sure everything is good inside of here Says that we're having an issue
9:22:20
with trying to get a command duplicate function ID Looks like we're maybe importing the same function multiple times Yeah we are importing this one
9:22:26
multiple times Let's get rid of that That should hopefully fix the problem once it syncs up We may need to restart
9:22:31
our server Actually let's try that And actually I'm importing this one multiple times too So I want to prepare my
9:22:37
organization ones There we go That should fix the error completely Now we don't have any duplicates I don't think at least So we have delete org
9:22:43
membership I don't see my create org membership on here So let's make sure we put that clerk create organization
9:22:49
membership Actually I called it or membership There we go So now we should have all of our different functions hooked up You can
9:22:54
see that they're all found properly Let's go over to them Make this a little bit bigger What I want to do is I want to send my daily user application email
9:23:01
So let's go over here We're going to invoke that Actually no not that one I'm sorry We want to prepare our daily organization application email So let's
9:23:08
go ahead and prepare that You can see it's running and you can see it actually spun off an event for sending that email to me So you can see here it sent along
9:23:15
all this information to me about the new applicants because I signed up to receive those emails and I only wanted to receive people that were three stars
9:23:21
and above which is why it didn't send us the person that was under three or under three stars And if I pull up my email real quick you can actually see this
9:23:27
sent along the email with that specific user that applied for the job as well as their rating So we can see that that is working as we expect Now with that done
Job listing application management
9:23:33
we're dangerously close to being done with this entire application But we have one quite major section of our application to finish If we go over to
9:23:40
one of our job listings you'll notice that we have no way to view which users have actually applied for the job or not
9:23:46
There should be a section down here that has a table for all the users that have applied for our job And that's the section I want to work on next Not only
9:23:52
a full table to view all of that but it's going to have proper pageionation sorting filtering and the ability to update the user information view their
9:23:58
resume and so much more It's going to be packed full of information So what we can do is we can come all the way over
9:24:04
here to our application and we can go back to the page for this So let's just close out of everything that we have open We're going to go into our source
9:24:10
app the employer section and we want to go specifically to the job listing page And at the bottom here below our
9:24:15
markdown partial this is where I want to render this out I'm going to put a separator component So we got our
9:24:20
separator We're going to make sure we import that from the correct location That'll just add a nice little line at the bottom here for us to be able to
9:24:26
separate this content And then what we can do below that is we can add in a div here with a class name of space Y6
9:24:34
Then we're going to put a heading and this is going to have a text of applications
9:24:39
And this is going to have a class name of text extra large font semibold There we go So now we should hopefully see
9:24:45
that showing up on our screen over here Now below that we can come in here with a suspense component because we want to essentially wrap a page that's going to
9:24:51
do a lot of suspense stuff for us So we're going to come in here This is going to say applications and we're
9:24:57
going to have a job listing ID that's going to pass in whatever the job is going to be So there we go That's the job we're getting the applications for
9:25:03
And for this I want to have a fallback and the fallback is going to be a skeleton loader So we're going to say skeleton application table which we're
9:25:10
essentially going to create when we create our application table So we can have a loading state and a non-loaded state Now let's go all the way down here
9:25:17
quite a ways below all this and we'll create that function for our applications It's taking in just a job listing ID And inside of here we want to
9:25:24
return essentially an application table But first of all before we do that we want to get our applications That's just
9:25:30
going to be calling get job listing applications It's going to take in a job listing ID And this function is
9:25:36
relatively straightforward but a little bit long So I'm going to paste it in And I'll explain exactly what every line is doing for you But if we take a look at
9:25:42
this function essentially all we're doing is making sure we cache everything properly We're querying our database table specifically where the job listing
9:25:49
ID is equal to that ID So we're getting all of the applications for a particular ID And then this entire section down
9:25:54
here is just me only returning the exact columns I need of data That way I don't return extra data that I don't need
9:26:00
Essentially you could remove this entire section and your function would still work the same This just makes it work a little bit better with our code Now
9:26:06
finally down here I'm also doing some additional cache tagging So as you can see I'm using user information and
9:26:12
resume information So I'm also making sure I cash tag on those as well That way if a user updates their name or they
9:26:18
update their resume this is going to update that information as well Now if we scroll all the way back up here we can return an application table which is
9:26:25
a function that we're going to create just a component to render all of our table related stuff but this is going to be a client component So we need to make
9:26:31
sure we pass down anything we need from the server So for example we're going to pass in our applications
9:26:37
just like that We're also going to be passing in the can update rating So we need to know can they update the rating
9:26:43
and this is something we need to get from the server because we need to check their organization permissions for if they can update this So we can see here
9:26:49
that is for changing the rating Let's make this a little bigger so it's easier to see There we go And then what we want
9:26:55
to do all the way down here is we want to do another check Whoops copied the wrong code Copy this code There we go We
9:27:02
want to check can they update the stage Can update stage And this is going to be
9:27:07
change stage There we go So this just has our permissions set up So now we need to create this application table as
9:27:13
well as the skeleton for it Now for this application table we can create a component for it So we'll go into our
9:27:18
features into the job listing application section and components and we'll call this our application
9:27:25
table.tsx export a function application table just
9:27:31
like that And we need to make sure that this is a client component Now we can at least return null from here and we can
9:27:37
hopefully import that up here to at least get rid of some of those errors We'll get errors on our imports here for our props because we haven't defined
9:27:43
those yet But that's fine Now for this application table we're actually going to be using the data table from shad CN
9:27:49
which com binds together tan stacks table along with their own table component So let's make sure that we run these different commands So we're going
9:27:55
to come down here and we're going to make sure we get a brand new terminal to do this And we're going to paste in the command for shad cen to install the
9:28:01
table And then we're also going to be installing our tan stack library for the React table So we're going to add the table component which is going to be
9:28:07
really useful for our styling purposes And then this tan stack library is really really powerful and there's tons
9:28:12
of different stuff we can do with it And there's a lot of other components built into here that we can use as well So
9:28:17
let's make sure that this is React table Want to force that And I believe yes React Table There we go And this should
9:28:24
see npm at the start There we go So that's going to install that for us And as you can see there's a ton of
9:28:29
different stuff about how to make all of this work I'll be explaining most of it in depth and going through exactly how everything works But essentially we're
9:28:35
going to be using some of the base boilerplate components from here For example they have this data table component and so on that we can use So
9:28:42
what I want to do to get started is just to copy over their starting point data table We're going to make quite a bunch of heavy modifications to it to make it
9:28:48
work with our application We're going to come in and we're going to put that inside of our components folder So we're going to find where our components
9:28:53
folder is We're going to create a brand new folder for our data table related stuff and we'll create a brand new component called data table.tsx We're
9:29:01
just going to paste all the code from the data table that they gave us directly into there So we have all of that code working just fine in our
9:29:07
application table We can actually use that data table Now in order to render out a data table we need columns So
9:29:12
we're going to create a function that gets us all of our different column data So we're going to say get columns This is going to take can update rating and
9:29:19
it's going to take can update stage as some booleans that we pass in and it's going to return to us a column defaf and
9:29:27
we're going to have it be for our application Now this application is a type that I'm going to paste in and then go through line by line because it's a
9:29:33
little bit of a complicated type but essentially it's all the stuff that we're able to pass into our particular table So if we take a look at this code
9:29:39
real quick you can see the very first thing that we're getting is all of these columns from our application table So the cover letter created at stage rating
9:29:46
job listing and then we're combining that together with our cover letter as markdown And actually since we're already getting our cover letter as
9:29:52
markdown we don't need it up here which is great So we're getting our cover letter as markdown We're getting our user information the ID the name the URL
9:29:58
We're also getting the resume information and specifically we're getting the ré fire URL and we're getting the markdown summary as a react
9:30:04
node Now the reason that we're having to pass down these values as markdown as opposed to as a string is because the
9:30:10
markdown renderer that we use only works on the server and this is a client component So we have to pass down those
9:30:16
server components pre-rendered into our code So really this is just mapping up pretty much one to one to our
9:30:22
applications component here because it's just taking all this information and putting it in a JSON version that we can use as a type So we're using that as the
9:30:28
type for our particular column So each of our columns is going to get information from this particular type which is what's passed into here So for
9:30:35
example our applications are passed into here and it has that type of application
9:30:41
array Now for our columns I'm just going to start by showing you the most basic type of column that we can do So here we're going to return an array and this
9:30:47
array is going to give us a few different things We have our accessor key or function For example the accessor key we could pass in like title and
9:30:53
it'll get us like title But in our case most often we're going to have to use an accessor function which is going to take
9:30:59
in whatever our row is and it's going to return us some data So our row is just an application So we can use our row
9:31:04
user.name just like that Now we are getting an error because I need to make sure that this is an array of values And now you can see that this is actually
9:31:10
giving us a new error But at least it's working Next we can specify the header In our case the header is going to be name That's like the string text that
9:31:17
we're going to be using And this name value here is the value in our column So this is the value for each cell And this
9:31:22
is the header for our entire column Next we're going to specify the cell which is essentially like the value that we're
9:31:28
going to be rendering out on the screen This is the React node So this accessor function is great for like sorting and
9:31:33
filtering And this is great for actually showing what our content will look like Now in our particular case this is going to take in our row which is all of our
9:31:39
data that we want And what we can do inside of here is we can say row.or user.name And that's going to give us
9:31:46
whatever essentially the name of our user is This original just asks us what the current cell value is So I can just
9:31:52
say const user is equal to that and get my information like this And then we can do different things like getting the
9:31:57
initials of that user So I can say I want to get the initials of that user from that user object that I created just like that And then we can come down
9:32:04
here and return some information for our user So I'm going to again copy over the code for this because we've done this avatar stuff a million times So I want
9:32:11
to get those avatar components installed Just like that We're getting those from that user object that we just created So
9:32:17
essentially what I'm doing is I'm taking my user's image and I'm rendering that out Otherwise I'm showing their name initials and then I'm showing their name
9:32:23
right next to it This is very similar to what we did on our sidebar So if we maximize this a little bit and of course it looks like it's not going to render
9:32:29
because we need to make sure everything is importing properly Looks like if we scroll all the way up it's because of this skeleton table right here So let me
9:32:36
just make sure we create this skeleton table so we at least can get our page to render So I'm going to come all the way down here
9:32:43
export function skeleton table and this will just return null just so we have something showing up And we'll just put
9:32:49
a nice little to-do above that so we know to come back Then we can import this table here There we go And
9:32:55
hopefully that'll get rid of the errors and at least we have something rendering So in our application table we can render out some content But essentially
9:33:00
what I'm trying to say is that avatar section is just this It's just this section with a name at the top We've done that a million times So now we can
9:33:07
go back into our application table and we can try to write out what this column will look like Now that we have our columns we can render it out in a data
9:33:13
table So we can say data table just like this And we want to get our columns for
9:33:18
this So we can say columns is equal to get columns And we'll just pass along true for now for both of those
9:33:24
properties Also our data table requires us to pass in data which is going to be our applications Just like that And now
9:33:29
that'll actually render out a table And as you can see it has a name property with that image as well as the name of the particular user And if we had
9:33:35
multiple people that applied to this job we'd have multiple listings inside of here Now we know for a fact here that we have can update rating that we can get
9:33:42
So we have these values that we know for a fact are being passed in So we might as well use these So this first value
9:33:48
for get columns is the can update rating So let me just pass in can update rating and can update stage So at least we get
9:33:54
those values being passed in So we kind of have our data table set up Now I just want to render out the data that's going to go into my table before we start
9:34:01
adding on all of the additional features on top of this So let's go up and start working on some of our more complicated
9:34:06
columns that we have to deal with And the first complicated column that we have to deal with is the stage column So we can say our accessor key for this one
9:34:12
is going to be stage Just like that because we know that that is going to be a column directly from our table There we go Next thing that we can do is we
9:34:19
can specify what the header is going to be And the header for this is actually going to be a sortable column header which is something that comes from shad
9:34:26
CN If we just expand this quite a bit so we have full screen view of this And we come and actually make it even bigger
9:34:32
There we go We can see over here on the side that we actually have some cell formatting some row action some pageionation some sorting and so on And
9:34:38
if we look we actually have the ability to update our table And then at the very bottom here have some different reusable
9:34:43
components we can use So for example if we want a data column that is sortable we can just copy over this component and
9:34:49
it'll give us a sortable hidable version of this So I'm going to go ahead and I'll copy that over and we're going to use that component inside of our
9:34:55
application So I'll come over here and inside of my data table section I will create a data table sortable
9:35:03
column header.tsx and I'll paste in this exact component right here Now we're going to have to
9:35:09
make some pretty major changes For example these imports are broken So let's go ahead and fix those imports ourself For example drop down menu we
9:35:15
want to get from here Same thing with this one Our button we want to get from the correct location And same thing down
9:35:21
here Let's get these imported So at least that looks like it fixes all of our import issues Next thing that we
9:35:27
need to do is we need to name this the same thing we named ours We called it a sortable column header There we go This
9:35:32
is going to be our sortable column header props just to make sure our names are consistent Next thing we need to do
9:35:38
to make some changes is they have the ability to hide columns inside of here You'll scroll down you can see that they have this hide section We don't actually
9:35:43
care about hiding things So instead of having this be a hide section we're going to have it be the ability to clear our sorting So we're going to add clear
9:35:49
sorting to this because they don't actually have a button for clearing your sorting They just have the ability to hide So we're going to change this to an
9:35:55
X icon And this will say clear just like that So now we have the ability to sort ascending descending and clear And that
9:36:01
uses this column Sorting toggle sorting toggle sorting It's all built into that React table from tan stack Now the next
9:36:08
thing that we need to do to be able to make sure that this actually functions properly is we need to modify our data table to make sure that it has the
9:36:13
ability to be sorted cuz right now we don't have any sorting built in So we're going to say that we want to have some sorting functionality So we're going to
9:36:20
say get sorted ro model is equal to get sorted ro model which is the default behavior We're also going to have an on
9:36:26
sorting change function that we need to pass in and that's going to be using some state So we're going to come up here by saying sorting set sorting is
9:36:34
equal to use state and that's going to use the sorting state
9:36:39
There we go And that's just a type again built into React table So we can use that We can make sure we put a comma
9:36:45
there Also we need to be able to pass in some state So below all this we're going to pass in state And the state contains
9:36:52
our sorting state So we'll say sorting just like that And that's going to take our sorting state So this is just
9:36:58
telling React Table hey here's all the information you need to be able to sort out our information So now we can give all of this a save We can make sure
9:37:04
inside of here we're getting our header information from that sortable table So we can say column
9:37:10
we want to render out a data table sortable column pass it in our
9:37:16
title which is just going to be stage and we can pass it in all of our column information So it can do that sorting
9:37:22
for us So at least now we have that information And hopefully if we come back over here we should see now we have
9:37:27
our stage showing up Obviously nothing's formatted properly but we have the ability to sort it ascending descending or to clear our sorting Next up we need
9:37:34
to create a sorting function so it knows how to sort properly because we actually are sorting this a little bit differently than you would normally
9:37:40
expect So we have our original which we're going to call A There we go And then we're going to get
9:37:46
our second property which is original here which we're going to rename to B So we essentially have an A and a B property And then we want to return call
9:37:54
sort applications by stage which is a function we're going to create which is going to take in our stage for both of
9:38:00
these This is going to be very similar to how we did our sorting on our other one So inside of our job listing
9:38:06
applications we're going to create a new folder called lib And inside of here we're going to create a utils function
9:38:11
or a utils file And I'm just going to paste in what that sort is You can see it's exactly the same as how we sorted
9:38:16
before I want my applied interested interviewed and hired to be all on top and denied shows up at the very bottom
9:38:22
as the last option because if you denied someone you probably want to sort them at the very bottom So let's just sort it in the most logical order possible Next
9:38:29
up we can make sure we import that properly There we go And looks like I spelled original wrong here
9:38:35
There we go So now we have our sorting function done We also need to be able to do some filtering We'll be doing that in a little bit We don't have filtering
9:38:41
implemented but we need to make sure that we filter things properly So this is going to take in original It's also going to take in a property that we
9:38:47
don't care about And then finally it's going to take in a value So what we can do with this is we're going to return to
9:38:52
see if our value includes the original.stage So this value is
9:38:58
essentially what we're sorting by It's going to be an array Original is the actual value of our cell So we're just saying hey does our value of arrays
9:39:04
match whatever we're sorting by So we're just matching this cell to see if it's in that value Finally we get to the
9:39:10
complicated part here which is going to be rendering out our cell And we're going to be taking in the row information And then we're going to come
9:39:16
down here and we're going to return a stage cell which is a component that we're going to create and we're going to pass in all the information we need such
9:39:22
as can we update this which we'll call can update stage There we go We're also
9:39:28
going to take in the stage value which is row.or original.stage Next we're going to get the job listing
9:39:34
ID so that we can actually call some actions to update this row.listing
9:39:39
ID Then finally the user ID which is for our users row So like whoever is applying and again we need that to
9:39:45
update their information So we're just going to get all that information like this and pass it down So now we can create that function We'll do it down
9:39:51
here Stage cell and we're just going to return null So at least we get rid of all of our errors Now we already know
9:39:57
what the props of the stage cell are We'll just paste those in because we already typed those out So we know exactly what those are And the next
9:40:02
thing I want to do is I want to render out this information And essentially I want to create a drop down that when I change the value it's going to update
9:40:08
that on my database and so on And this is going to be almost identical to how we do ratings So the nice thing is once
9:40:13
we finish it for stage the rating section is going to be relatively simple So the very first thing that I want to do it just want to come in here I'm
9:40:20
going to create an optimistic stage and set optimistic
9:40:26
stage We're going to set that equal to the use optimistic hook because we're going to be using optimistic updates for
9:40:31
this section to give us the best user experience Also we're going to need to have a transition So we'll say is
9:40:37
pending and start transition There we go That'll be equal to use transition Now
9:40:43
the next thing I want to do is I want to check to see hey can the user update if they can't make an update well then we
9:40:48
just want to return whatever our stage details are So we'll create a component called stage details Pass it in our
9:40:54
stage and we'll pass it in whatever the actual optimistic stage is Just like that There we go Now before we get any
9:41:01
further let's just create this simple component So we'll say function stage details This we know is taking in a
9:41:08
stage So we can say that the stage is an application stage
9:41:14
and inside of here we just want to return some code So we'll say we've got a div which is going to be flex gap of two items in the center And then we're
9:41:22
going to render out a stage icon So each one of our stages is going to have their own custom icon We're going to create
9:41:28
we're just going to create a component that allows us to easily generate those icons So we're going to pass in the stage as well as some class names for
9:41:34
that So we'll say here size five text inherit There we go And then we're going
9:41:40
to render out a div with our formatted name Make sure I spell that properly So this will say format job listing
9:41:48
application stage and we'll pass it in the stage Very similar to how we did with our job listing like location and
9:41:54
so on This is just going to be a formatter for that Now let's create our stage icon First we'll go into our components We'll say stage
9:42:01
icon.tsx I'm going to paste in the code because for the most part this isn't too difficult to understand Our stage icon
9:42:07
is going to take in our application stage as well as all of the other props for an icon And then all we're doing is
9:42:13
we're just calling get icon and for each one of these different stages we're returning a different icon So for example the help icon if they applied
9:42:19
the interested icon is a check mark You can see an X for denied the speech icon for interviewed and a handshake for the
9:42:24
hired interview icon So as you can see it's just a different icon for a different stage So we can import that
9:42:30
right here And the next thing we can work on is this format function which is going to be quite a bit simpler to work on So we can go into our lib folder here
9:42:36
We can create our formatterers.ts And we can paste in our formatter because again it's relatively simple We
9:42:42
just loop through each one of our stages And for each one we return a human readable string for what it should look like We can then import that function
9:42:49
over here And now we at least have a function of what our stage should look like And if we just return this no matter what you'll see exactly what that
9:42:55
looks like You can see we have the question mark since we're in the applied stage Now I can change what stage we're in For example denied has the X mark You
9:43:02
can see hired has the handshake Interested has the check mark And then finally interviewed has that speaking
9:43:07
voice So you can see we can change around whatever it looks like But in our case we're just going to have it be the current stage it's supposed to be on Now
9:43:13
if the user is able to update the stage we essentially want to make a drop down that's going to allow them to select different options So we'll come in here
9:43:19
with a drop-own menu The drop-own menu is going to have a drop-down menu trigger
9:43:26
We want this to be as child because we just want to render out a button This button is going to be a ghost button So
9:43:32
we'll change the variant here to ghost We'll change some class names on this And generally when I work with ghost
9:43:38
buttons I very often remove my margin on the side So we can say negative margin on the left to get rid of that margin
9:43:44
And then we'll say if in the pending state we're just going to give this some opacity so they know that it's currently in the process of working So we'll say
9:43:50
like 50% opacity Then finally we can close off our button And inside here is where I want to render out my stage
9:43:57
details So I can pass in my optimistic stage And I also want to make sure I render out a chevron so they know that
9:44:03
this is interactable So we'll say chevron Whoops Chevron down icon There we go
9:44:11
So now you can see we have that showing up But it looks like I need this to say variant There we go So now you can see
9:44:17
that when I hover over this it looks like a button but I have no drop-own menu content So let's work on that Next
9:44:22
we can say drop-own menu content Want to loop through all my application stages
9:44:28
There we go I want to get them sorted So we'll application stages Sorted I want to sort them So we'll sort our
9:44:35
applications by stage And then we're going to map through each one of these stage values
9:44:41
For each value I essentially want to render out a drop-own menu item So we can say dropown menu item This dropown
9:44:48
menu item is going to have a key which is my stage value There we go Make sure I close this off
9:44:57
There we go And then I want to have a simple on click that is going to run our function for us So we can come in here
9:45:02
and this is going to call start transition And this start transition is going to take an asynchronous function
9:45:07
that's going to do all of our behind-the-scenes code for updating this So we'll call a function called set optimistic stage pass it in our new
9:45:14
stage value That way we automatically get our update right away for the optimistic portion Then we'll get a response from calling await update job
9:45:22
listing application stage which is a function we're going to create It's going to take in a job listing ID as
9:45:28
well as a user ID So what is the application we're updating and then what is the new stage value we're updating to
9:45:34
Then we can take this response and if we have an error we can render that out So we can come down here and we can say if
9:45:40
we have a response error then we want to render that out as a toast message just like that Finally in our drop-own menu
9:45:45
we want to render out the stage detail and we want to render out the stage detail for that specific stage value So
9:45:51
now we should have a drop-own menu with all of our different options inside of it Now clicking this will fail our application because we don't have this
9:45:57
update job listing application stage done So let's work on implementing that function So we're going to go into our
9:46:02
action section right here This is where we're going to define our action for this and we'll come down here Export an
9:46:09
async function update job listing application stage And this is going to take in some information We know it's
9:46:14
going to take in a job listing ID and so on So I'll just copy over what we know it's going to take in If we come in here
9:46:20
it's going to take in our job listing ID our user ID as well as an unsafe stage which is going to be an application
9:46:26
stage because we don't know what this is It comes from the client It could be anything So the first thing I want to do is to make sure that this is successful data So I can get my success and my data
9:46:33
which we're going to call stage and that's going to come from Z.enum We're going to create our own here It's an
9:46:38
application stages So it's going to be an enum for any of our stages And we're just going to parse to make sure our unsafe stage is one of those stages
9:46:45
Essentially all this code does is says hey is the thing I passed in a valid stage So if we don't have a success then
9:46:52
we're going to return an error And this will just say error
9:46:57
true message invalid stage
9:47:03
There we go Then the next thing I want to do is I want to check to make sure that the user has permission to actually perform this action We kind of already
9:47:09
checked this before by showing the dropdown but we also always want to check on the server as well So we're checking to make sure they have
9:47:14
permission to change this specific thing And then we can actually go about and make the changes So first let's see if
9:47:20
we have an organization ID So we'll say await get current organization
9:47:26
There we go Also we want to get the job listing associated with this So we'll
9:47:31
wait get job listing This is going to take in a job listing
9:47:37
ID And we're going to need to create a function for this So we'll say get job listing And this get job listing
9:47:43
function is essentially going to be the same as this But we're not going to check to see if it is specifically a job listing that is public Then what we can
9:47:50
do is we can do a simple if check to make sure that we have an org ID So if it's equal to null that's bad Also we
9:47:55
can check to make sure we have a job listing If that's equal to null it's bad And then finally what we can do is we can make sure our org ID is equal to our
9:48:03
job listing.org organization ID And we want to make sure that we check that that's not equal because if
9:48:09
it's not equal we have a problem And also down here we should return the organization ID from this There we go So
9:48:15
now we have that if check and if there's a problem we'll just return an error saying that they don't have permission to update that stage Finally we can
9:48:22
actually do our update So we can say update job listing application We want to pass in our job listing ID We
9:48:30
want to pass in our user ID and we want to pass in our data which is just going to be our stage And then we need to
9:48:36
create this specific function which isn't going to be too hard That'll just be in our database folder right here And we essentially want to create update
9:48:42
joblisting application which we actually already have So we can just import this function There we go And now it looks
9:48:48
like it's working just fine So now we should have have the ability to update this job listing And let's actually test to see if that works We'll come over
9:48:54
here We'll update them to interested And we're getting an error because I forgot to import the code So let's make sure we import this right there There we go So
9:49:01
now I'm going to update them to interested You see it immediately grayed out itself for a second while it was in the pending status and then it updated
9:49:07
Same thing here Go back to interested And if I refresh my page they stay at that new stage So at least I do know
9:49:12
that this property is working So now let's move on to our next cell that we want to work on Like I said that one was
9:49:18
one of the more complicated And the nice thing about this next one which is rating is it's going to be nearly identical So we're going to come in here
9:49:24
with our rating The title for this is rating So that's pretty much the same We don't need a sorting function cuz we're just going to use the default sort If
9:49:30
like numbers a smaller number is smaller than a bigger number That's the default behavior That's working just fine This
9:49:35
one we want to sort to see if the rating is included So our filter function is based on rating And then finally here we
9:49:41
want to render out a rating cell And the rating cell is going to use the can update rating for its rating purpose We
9:49:47
want to pass in a rating which is our row original rating Otherwise everything else is the same And the nice thing
9:49:52
about this rating cell is it's so similar to our actual stage cell We're going to copy our stage cell and just
9:49:57
make some minor modifications to what this looks like So we're going to come in here call this our rating cell And
9:50:03
obviously the biggest difference is that here we're going to have a rating and here we're going to have a rating And this specific rating is going to be
9:50:10
essentially a type of rating just like this And actually we might as well just make it number or null because that's
9:50:15
the actual type that's coming from our database So there we go We're matching that type perfectly And we pass in our rating as our use optimistic Now here
9:50:22
we're going to render our rating icons which is a component we've already created So we'll say rating icons Pass
9:50:27
in our rating And this is going to be optimistic rating and set optimistic rating Just
9:50:35
like that Make sure we update that in all the places we use it Same thing here Update that down there Perfect So now we
9:50:42
at least have that set up If they can't update it just shows the rating icon Otherwise we're going to move on and actually show them the drop down So here
9:50:48
this is going to be our rating icons where we pass in our optimistic rating with that chevron Same thing as before
9:50:54
Next we're going to move through all of our rating options and we're going to be sorting them but we don't need to actually cuz they're already sorted So
9:51:00
we can remove that sorting And then here we have our rating value So we'll make sure our key is our
9:51:06
rating value Set optimistic rating just like that Same thing here rating value We'll need to change this function So
9:51:11
I'll just put a giant to-do there because we need to update that And then down here this is our rating icon for
9:51:17
our rating value and pass in our rating Otherwise it's very similar to what we had before Now there is one minor thing
9:51:22
we need to do Our rating value could be null So we want to make sure if our rating value is null we just pass a key of none That way we have a key for that
9:51:29
specific value Then what we want to do here is we want to update our job listing application rating Just like
9:51:36
that Pass it in all the information for our rating And we'll create that function in just a little bit But otherwise everything else inside of this
9:51:42
function is essentially done We just want to make sure here our class name is text inherit for this cuz for some
9:51:47
reason in drop downs the SVGs change color So now let's go ahead and look at this You can see when we click down here we can toggle between these different
9:51:53
options When I click on one of them it'll fail cuz we don't have this function defined yet But let's go ahead and define that function And it's
9:51:58
actually going to be rather simple We can essentially copy this function because it's going to be very similar to what we did for the rating version So
9:52:04
we'll change this to rating and this will say unsafe rating Now we need to be be able to make sure we parse what our
9:52:10
rating is So I'm going to come in here to parse that rating We can get it's a number between 1 and five and it could also be a null value And we just want to
9:52:17
do a safe parse of our unsafe rating to be able to get a rating for that And we'll rename this to rating Then down
9:52:23
here we can say it's an invalid rating if there's a problem This is all about changing the rating you don't have
9:52:29
permission to update the rating There we go Now we can move on down here You don't have permission to update the
9:52:34
rating again And then finally we can update the rating portion down here So as you can see pretty much all of the
9:52:40
code that we wrote for this section is exactly the same We just had to change it from stage to rating And now with
9:52:45
that done we can come into here import this and we should see that all of our code is working fine So here we have a
9:52:51
problem This should be inside of brackets I believe and it should be rating Rating value is No no no That's
9:52:57
not right It should definitely be rating value like this So we have an error showing up here It says type null is not assignable to oh looks like our typing
9:53:04
for this I forgot to update this to number or null Now if we give that a save you can see that removed our errors
9:53:11
here We do have a erroneous import we don't need Let's get rid of that And now let's see if this works We're going to update our rating to three stars And you
9:53:17
can see it looks like it worked When I refresh my page it still has the three star rating So that is now updating properly Now we can finally move on to
9:53:23
another easy column So I'll just copy this column over So we have a starting place This is going to be our created at
9:53:28
column The header for this should say applied on So when they wanted to apply
9:53:33
for the job In our case we're going to have an accessor function for this as well So we're going to say row and
9:53:39
row.created at There we go Just to be able to get the correct property from all of this We're
9:53:45
also not going to have to worry about filtering on this because we're not going to add any filtering for this And for our cell this one is going to be
9:53:50
super straightforward We almost don't need to do anything complicated at all We're just going to come in here row.create
9:53:56
created at whoops created at dot to local date string There we go It's as
9:54:02
simple as that And now you can see right here we have the applied on property for when they actually applied for the job Lastly we're going to add an actions
9:54:08
column And this isn't really tied to any of our actual columns So we're going to give this an ID instead to just give it a unique identifier to denote that it's
9:54:14
not attached to any of our other columns And this one is going to have a cell just like this with a row It's not going
9:54:20
to have any sorting or anything so at least that's going to be simpler We're going to get our job listing which is equal to row.or original We're going to
9:54:28
get our resume which is equal to joblisting do user.res And then we want to return an action
9:54:34
cell which is what we're going to create in a little bit This action cell is going to take in our
9:54:39
cover letter markdown specifically which is our job listing.colet markdown We're
9:54:44
also going to get our resume markdown which is our resume Markdown And we want
9:54:51
to get this as markdown summary Yep There we go That's fine Then we're going to get our résé URL that is equal to
9:54:58
résé.resume fo file URL And then our username This comes from our job listing
9:55:04
do user.name There we go Now we just want to create this action cell So we'll scroll all the way down below these
9:55:11
And we'll create an action cell Now we already know the types for the things we're importing We have essentially a string null or undefined for our resume
9:55:17
Username is a string And then these markdowns could also both be null Now this action dropdown is essentially going to have two buttons and each one's
9:55:23
going to open a modal that shows the markdown component So I'm going to create some state to handle that We're going to say open
9:55:30
modal and set open modal And this is going to be a use state variable And this use state variable is either going
9:55:36
to be the resume modal which is open It's going to be the cover letter modal that's open or null if no modal at all
9:55:43
is open And by default we're going to set it to null So by default no modal is going to be open Then what we want to do
9:55:48
is we want to return all of this content So we're going to return a drop-own menu followed by our modals So let's start
9:55:54
with our drop-own menu and we want to get our drop-own menu trigger That's going to be a child trigger again
9:55:59
because it's going to use that same exact button that we kind of used before So let's get a button This is going to be a variant of ghost
9:56:07
We want the size of this to be icon because it's going to be a small little button The span inside of here is going to be
9:56:13
purely for our screen readers So we'll say screen reader only It's going to say open
9:56:19
menu And then we're going to come in here with the more horizontal icon Just
9:56:24
like that Class name is going to be size 4 There we go So now if we just expand
9:56:30
this a little bit you can see over here we have this nice little icon that shows up for opening up that drop-own menu Let's add in the content for the
9:56:36
drop-own menu Drop-own menu Content We want to align this on the end There we
9:56:41
go Makes sense since it's a right-sided thing And then we want to check do we have a résé URL
9:56:47
or if that's null or a réé markdown if that is not equal to null then we want
9:56:52
to render out a button for viewing the ré content So we can come in here and render out that button Otherwise we want
9:56:58
to render out essentially a button that says there's no rés So first of all we'll do the no résé version That's going to be a drop-own menu label So
9:57:05
we'll say label just like that Close that off And this should say not equal to null There we go That fixed that
9:57:10
potential problem There we go And inside this drop-own menu label we want to actually close
9:57:16
that off And inside of here actually let's make sure There we go We close that off And up here let's return null
9:57:22
just to get our typing properly back There we go So now our label we can add in a class name text muted foreground
9:57:28
And then finally we can just say no resume So if the user doesn't have a resume it's going to show up as no
9:57:33
resume This shouldn't be the case but if they like delete their resume after they upload and apply for the job this could
9:57:38
show up as no resume Now if they do have a resume which is the much more likely option we're going to have a drop-own
9:57:44
menu item that is going to render out This drop-own menu item is going to say
9:57:49
view resumeé And when we click on this it's going to open the proper modal So on click
9:57:55
it's going to open the modal for our resume There we go So now we at least
9:58:02
have that showing up If we open this section up we click here you can see we have a m view ré button which changes
9:58:07
the state of this variable up here to be true Now we're going to essentially do the exact same thing with our cover letter So I'm going to paste this down
9:58:12
If we have cover letter markdown view cover letter and open the cover letter Otherwise just say no cover letter So we
9:58:17
come over here We can click on this And you can see this person doesn't have a cover letter So it just says no cover letter and we can't click on the button
9:58:23
Now with that done we can actually render out the dialogue component So if our cover letter markdown exists then we're going to render out the dialogue
9:58:29
for it So we'll say dialogue The open case for this dialogue is going to be open modal is equal to cover letter
9:58:37
There we go Then what I want to do is on open change I want to say that we're going to
9:58:43
essentially close our modal So we're going to say set open modal If open is what we're doing So if we're changing
9:58:49
from closed to open we're essentially opening this then I want to set this to cover letter Otherwise I want to set
9:58:54
this to null So essentially I want to translate this from a boolean into our own format that we're using for our dialogue There we go And it looks like I
9:59:01
need to import this component There we go Now what I want to do is I want to put our dialogue content
9:59:06
inside of here For the dialogue content we can come in with a large max width of
9:59:12
5XL medium max width of 3XL
9:59:18
We want our max height to be essentially a calculation of 100% minus 2mm So we
9:59:25
want it to essentially fill the full screen overflow of hidden flex and flex
9:59:31
column just so it'll scroll if we need it to Next we can come in with our header and our description So we can
9:59:36
come in here our dialogue header and our dialogue title and our dialogue description And all this is going to say
9:59:42
is cover letter and username so we know who actually uploaded this Then we want to just render out our markdown as the
9:59:48
next thing So you can see we're rendering that and making sure it scrolls properly And I believe I may have imported one of my dialog
9:59:53
components from the wrong section Looks like I did not So that's properly good There we go So then I want to copy this
9:59:58
down because we're going to do essentially the exact same thing for their resume as well So if the user has a ré markdown or they have a ré URL then
10:00:06
we want to render the content inside of here This is going to say ré and ré just like that We want our modal to
10:00:13
essentially be exactly the same for the size This is going to say ré And then we want
10:00:18
to essentially render out a button to view their resume So we're going to say if they have a resume URL then what we
10:00:23
want to do is we want to render out a button specifically for showing that content So we'll do an as child button
10:00:30
class name right here self start That way it doesn't fill the full screen size
10:00:36
And in here we're going to have a link href is going to be our ré URL
10:00:42
There we go Our link is going to say original résé And then we want to have a
10:00:47
target Whoops target that is going to be the blank target and our re
10:00:55
is going to be no opener no refer There we go Then finally we're
10:01:00
going to have some more dialogue description which has a little bit of margin on it that essentially just says "Hey this is AI generated summary of the
10:01:06
application." And then we're going to render out the resume markdown down here so they can see the AI generated version or the actual version they uploaded Now
10:01:12
what we need to do to make sure that this works is we need to make sure in our page here we're actually passing down the correct information because our
10:01:18
applications need to be slightly modified We need to pass down markdown instead of passing down a string So
10:01:23
we're going to take this map over our application and essentially we're just going to do a very small conversion So we're going to take our object keep it
10:01:30
the same but we want to modify our user So we're going to take our user and we want to specifically dive into the résé
10:01:35
section So if the user has a resume then we want to modify that resume Otherwise
10:01:40
we just return null because they don't have a resume Now if they do have a resume we're going to come in here and keep everything exactly the same So
10:01:47
we're going to keep all the properties we had before but we're going to add our own markdown summary which is just our user.res.ai
10:01:54
summary And if they have an AI summary we want to render that out as content Otherwise we want to return null And
10:02:00
this content we're going to be rendering is markdown render So get the markdown render Pass in our source as our user
10:02:07
resume AI summary Just like that And there we go So essentially what this little bit of code is doing is it's
10:02:13
taking our resume and converting it to markdown before we send it down Then the next thing that we need to do is also do
10:02:18
the same thing with our cover letter So we're going to come in here with our cover letter markdown If we have a cover
10:02:24
letter then we want to convert that to markdown I'll just copy the code that does that There we go And instead of
10:02:29
here we're just going to be passing our cover letter And then what we want to do is if we don't have that information we
10:02:35
just return null Just like that So all this code did is essentially convert our resume to a rendered version of markdown
10:02:40
And same thing with our cover letter Now we should hopefully be able to see that information So if we click on this and we click on view ré we can see all the
10:02:47
information for the user's resume Now for some reason my styling is a little bit off So I need to make sure I fixed that So let's go ahead and find the
10:02:53
style This max H should have a dash right here I believe that's the only thing wrong with my style So let's go ahead and see if that fixes it View RS
10:03:00
And as you can see now we can actually see the full RS If we click original resume it brings up the file of the original resume Also we can come in here
10:03:07
and we can view their cover letter And you can see here's the cover letter information they submitted Now to be able to showcase the rest of the features on our table a little better I
10:03:13
want to just create a brand new application for this job So I'm going to log out of this user in particular we'll just log into another user and make a
10:03:19
bogus application So we'll do a quick signin here with a user We'll do test.com
10:03:24
And we'll enter in that password that we created for them And now we can go ahead We can apply for this exact same role
10:03:30
We'll actually probably need to upload our resume So let's make sure we do that because I believe yeah we'll upload our resume So that'll redirect us to this
10:03:36
page We'll make sure that we pull over this file drag it into here just like that and we'll click the upload button
10:03:41
That should upload that resume exactly where we want it to be which is great Now we can go back to our job board and we can actually apply for this job And
10:03:48
if for some reason it says we don't have a resume which is definitely not correct The only thing that I can think of that would be causing that particular problem
10:03:54
is inside of our route Let's go to our source We're going to go to our services
10:04:00
upload thing inside of our router We want to make sure that when we upsert our user resume we are revalidating our
10:04:06
user resume cache which we are calling that function So that does seem correct This is getting the user resume and the
10:04:12
user resume tag User résumés believe that is what I used is user rums Okay
10:04:18
Now what I want to do is make sure that all looks good Now where we're fetching our user resume we'll just call get user
10:04:26
resume Here is where we're calling that function Now that's not the one we care
10:04:32
about is it let's see Maximize this out That's just our action section Get user
10:04:38
resume is getting that tag from our cache That is properly good That also looks like it's fine And here yeah that
10:04:46
also looks like it's fine So I'm not sure why it's not getting it Maybe it just wasn't quite updated yet Let's try it again Okay it looks like maybe there
10:04:53
was just some caching So it looks like it's fine We can apply for our job There's nothing actually wrong with our code Now if we just log out and log back
10:05:00
in as the person that has access to the employer dashboard we should be able to go over to that section and actually
10:05:05
mess around with multiple different applications to the same job So as you can see here now there are two applications for the job and this user
10:05:11
was a five out of five star rating by the AI in the background which is nice So let's test our filtering to make sure that works We're going to change this to
10:05:17
interested And now hopefully if we change the order of this you can see that does actually change the order which is great We can change the order
10:05:23
of this Then that looks like it's also working perfectly And we can even change the order of this And again that is
10:05:28
properly moving our users around Now one thing we want to do is we want to pageionate this table cuz showing hundreds and hundreds of applications on
10:05:34
the same page Definitely not ideal Luckily we have this pageionation component built into Shadan We can just
10:05:39
copy that into our application and modify it as we want So let's go ahead and find our components for the data
10:05:45
table We'll call this data table pageionation.tsx
10:05:50
Make sure we import that We're probably going to have to fix the imports up here We are definitely going to have to fix those We'll just manually import those
10:05:56
ourselves Actually I believe we can just change this to be dot dot And that'll work
10:06:02
There we go That is actually importing from the correct location And we'll just import our button from the same exact correct location And there we go That
10:06:09
did work So now we should at least see we have pageionation if we add this to our table So we're going to come over to our data table And we're just going to
10:06:15
add that to the very end of our table Essentially that's going to be the very last thing inside of here So we can just render out our data table
10:06:22
like that And we'll just wrap this entire thing in a div because we are going to add some extra content here So
10:06:28
we'll just put a div around this for now I know that we're going to have extra content So that why is why I'm not using a fragment And we'll pass in our table
10:06:36
to this And that should be everything we need to do If we just import that component we should see it And then we'll make the changes we want So as you
10:06:42
can see we have that showing up on the bottom We have this thing about selected rows which we don't care about So we're going to kind of remove that content So
10:06:48
let's come into here We'll go through this whole section right here for dealing with the actual selected rows We don't need any of that And also we're
10:06:54
going to set this to justify end to push our content as far right as possible Also it looks like this is just pushed up a little bit too much So we'll just
10:07:00
like add a little bit of margin on the top just to push it down a little bit And now you can see we have our pageionation perfectly set up And
10:07:05
obviously if we like changed it to be like one item per page or something like that For example we can come in here put a one That allows us to put one item per
10:07:12
page And now you can see that we have multiple pages but it looks like we're not filtering things yet because in our table we need to make sure we support
10:07:18
pageionation as well So back in our table at the very very top here we have the option to get pagenation row model
10:07:26
And we'll use the default pageionation row model That should hopefully fix that problem And now you can see it's
10:07:31
properly pagenating between our different rows Obviously it doesn't make sense to be able to have pagionation by one single item So we will remove the
10:07:38
ability for that and just take it back to 10 as the minimum Now the next thing we're going to be implementing is some filtering on our table because we want
10:07:44
to be able to filter based on users and we need to add in some different details for that So we're going to say we want to get the filtered row model which is
10:07:52
get filtered row model That's the default We also want to get the faceted unique row model So we can say faceted
10:07:58
unique values Get faceted unique values just like that And then we need to create our own state for the filter So
10:08:04
we'll say column filters There we go
10:08:11
set column filters And this column filters is going to use
10:08:16
the column filters state
10:08:21
There we go And by default we're just going to pass in either an empty array or our initial filters because we want
10:08:27
to have some initial filters that we could pass in So we'll say initial filters just like that Then down here we
10:08:32
can pass in our column filters There we go And we want to make sure up here we
10:08:38
have initial filters that we can pass in So all the way up here we can say initial filters
10:08:46
That's going to be an optional property which is a column filter state Also while we're here we might as well add in
10:08:52
the no results message which is going to be a React node This is what we render when we have no results So if we scroll
10:08:58
all the way down here you'll see this section that says no results We're going to render out our own custom message in
10:09:03
that case if we want to So we can make sure we accept that as a parameter And then also by default we want to specify
10:09:09
it as the text no results There we go So that way it at least has some default
10:09:14
behavior Finally we're going to add in a toolbar component This toolbar component is going to be a
10:09:21
component type just like this And this component type is going to take in a table as a prop and it's going to be
10:09:27
based on that t data component There we go And this is a property that we can use
10:09:33
So let me make sure I get all these imported And table type we want to make sure we import that And this table type
10:09:38
we'll have to manually import because it comes from here And it's going to be table And we're going to rename that as table type And it's just going to be a
10:09:45
type There we go So to use this toolbar component we'll come down here directly above And if we have a toolbar component
10:09:53
component There we go Make sure I actually have that as a prop up here If we have a toolbar component then I want
10:09:59
to render that toolbar component and pass along our table to it There we go And then to make sure everything is
10:10:05
spaced out properly we'll just come in here with some class names Flex flex column gap of four And by adding that
10:10:11
gap of four we actually can remove the margin on the top of this There we go So now if we give that a save and we give
10:10:17
our other table here a save you can see that spaced everything out properly And now we have this data tab or this
10:10:22
toolbar that we can add in if we want as well as this no results message Also we need to use this set column filters So
10:10:28
we can do that really easily where we have our filtering going on We can just say on column filter changes and that is
10:10:33
set column filters So this will allow us to change our filters in our columns And of course this isn't a function We just want to pass it along like that So now
10:10:39
let's go ahead and actually deal with our data table for all these additional properties that we just created So let's minimize this down inside of our
10:10:46
features folder for the job listing That's where our application table is at So inside of our application table we
10:10:52
can kind of minimize all these action cells down Uh we can minimize that down because we're really focused on this particular section right here And we
10:10:59
want to first of all have a no results message And this no results message is going to be passed in actually So this
10:11:04
will say no results message So we can pass this in no results message It's
10:11:10
going to be an optional string just like that Actually it'll be a React node And by default we're just going to have this
10:11:16
say no applications There we go So if this is completely blank there's no applications It'll say
10:11:22
no applications Also we're going to be implementing our skeleton table now because we pretty much have everything
10:11:27
we don't need done for that So we're just going to render out an application table The applications is going to be an empty array because we have no data yet
10:11:34
We can have a can update rating is going to be false Our can update this is going
10:11:39
to be false as well Our ability to have no results This is going to be our loading state So since our array is
10:11:45
empty we always will render out this no results message So this will just be loading spinner Class name on this is
10:11:51
going to be size 12 There we go So we're going to render out a nice little loading spinner And then we're going to also disable our toolbar because we
10:11:58
don't want to be able to interact with sorting which makes sense So we'll say disabled toolbar which is a prop that we're going to add There we go Disable
10:12:05
toolbar We'll add that directly into here By default that will be false And it'll be an optional boolean parameter
10:12:11
Now the next thing we can work on is adding in our toolbar So we'll say toolbar component is equal to disabled
10:12:16
toolbar If it's disabled we will render the disabled toolbar
10:12:22
Otherwise we'll render out our normal toolbar So now let's go ahead and actually render out our toolbar related content It's going to be a generic
10:12:28
component because that's what Shadsen and this data table component are expecting And it's going to take in a table and as well as this disabled
10:12:35
property Then what we're going to do is we're going to have our components We're going to have table which is going to be a table of type T And this comes from
10:12:43
that tan stack table library So make sure we get that imported from the correct location And we also have this
10:12:49
disabled property which is an optional boolean to disable all of our loading states or all of our filtering Now I
10:12:55
want to render out how many rows are hidden based on our filtering We can actually pretty easily do that by saying hidden rows is equal to table.get core
10:13:02
row model dot rows.length This is going to give us the total number of rows in
10:13:08
our table Then we can subtract that by the table.get row count which is going to give us the number of rows that are
10:13:13
actually able to be shown in our table So this will essentially take us all the rows in our table minus the ones we have
10:13:19
showing will give us the number of rows that we have left Then what we can do is we can return all the information that
10:13:24
we want So we're going to have a div right here with a class name flex items in the center gap of two and this is
10:13:29
where all of our different filters are going to go So we're going to have one filter here another filter here and then finally below that we're going to render
10:13:36
out our hidden rows So if our hidden rows is greater than zero then we want to just have some text that says hey you
10:13:41
have some hidden rows So we'll say div class name text small text muted
10:13:46
foreground margin on the left of two and this will say
10:13:52
whoops hidden rows which is our number of hidden rows Make sure I spell that
10:13:58
properly Close off our div And we also want to put some additional text And we'll say
10:14:04
if our hidden rows is greater than one then it'll say rows Otherwise it'll say
10:14:09
row Close that off Give that a quick save and make sure I put my question mark syntax in there And
10:14:16
there we go We now have our text that'll tell us how many hidden rows we have Now we can go ahead and render out our toolbar for our different stages and
10:14:22
ratings which are what we want to filter on So first I'm going to make sure that we have a column for that So I'm going to make sure we have a column for stage
10:14:29
If we do then I want to run the code inside of here This is just a fail safe to make sure we have data for that column Then I'm going to render a
10:14:35
component that I'm going to create called table faceted filter Faceted
10:14:40
filter There we go And this is going to be a component we're going to create with the help of Shad CN because they kind of have some faceted filters for us
10:14:47
If we kind of expand this a little bit and we actually make it full screen and we look over here we have the ability to
10:14:53
actually do specific things with the row action So let me make sure I find it Self formatting filtering Here we go And
10:15:00
you can see inside this section if we scroll down a little ways actually I don't see it in here It's somewhere in here I know that they have these faceted
10:15:05
table columns I maybe actually had to go through a block example Either way it's somewhere in the Shadan code We'll be
10:15:11
going through it but don't worry But this is kind of something that I took from the Shadan code and then very heavily modified to work with my use
10:15:17
case So we're going to render one of these for each of our different columns So I'm going to come down here This is going to be the rating version And we're
10:15:23
going to render one of these as well So let's go ahead and we're going to create that exact component So in our components data table this is going to
10:15:29
be data table faceted filter.tsx
10:15:35
There we go And the very first thing I want to get started with is just the interface that's coming directly from this So I'm going to be just getting
10:15:41
this directly from the code that I got from shad CN So we're going to be passing in our column data That is
10:15:46
essentially our column here So we can say column Make sure I import this properly
10:15:51
Actually I need to export something Export data function
10:15:58
data table faceted filter And the props are going to be equal to those props
10:16:03
right there and return null That way we can just import it over here so we can see what this looks like There we go So
10:16:09
our column is going to be table.get column
10:16:15
and it's going to be getting that stage column That's what that column property is working at right here Then we have a
10:16:20
title which is a string We have our disabled state if we want to disable it And then we have an option and I pretty heavily modified what these look like
10:16:26
But our option takes in a key It takes in some type of generic value Doesn't matter what it is It could be a string a number a boolean whatever and then a
10:16:33
label which is some type of React node Now this table must or this faceted filter must be a generic prop and we can
10:16:38
pass in those generics directly to here So at least we have all of our generic values for us And then inside here what I want to do is I want to get our facets
10:16:45
like this That's going to be column.get faceted unique values just like that And
10:16:51
this should come from our props So we can say column just like that Now these faceted unique values essentially just
10:16:57
return to us all the possible permutations of what the values could be inside of our table That's essentially
10:17:02
the whole idea behind this So it's a really great way for filtering on like enum values Then we want to get the selected values So I can say const
10:17:09
selected values is equal to a new set And this comes from our column again And
10:17:15
we want to get the filter value just like this And we want to convert this to the O value type And it's going
10:17:22
to be an array of values in our particular case because we know that these are going to match up with this O value type Then inside of here we're
10:17:28
going to be using a popover So we can say popover just like this Inside this popover we need a popover trigger
10:17:34
trigger So popover trigger as a child is what we're going to do for that one And then we're going to render
10:17:40
a button inside of here Make sure I get the correct button imported We're going to have this button be disabled
10:17:47
if we're in the disabled state There we go
10:17:52
does not look like it wants to pull in that property because I forgot to put it in up here So we can say disabled We can
10:17:58
have our options and our title Those are our different props that we have up here There we go So now we have our disabled
10:18:04
state Our variant for this one is going to be outline and we want it to be rather small So we're going to give it a
10:18:10
size of small Then we're going to check our selected values We're going to see if the size is greater than zero And if
10:18:16
the size is greater than zero we're going to render out essentially what that size is and we're going to put that inside of a badge component And we're
10:18:22
going to make sure that the variant on this is secondary and the size is small And that'll just say our selected values
10:18:29
do size So this will just tell us how many things we currently have selected in our list Then finally we're going to
10:18:34
put the title as well as a chevron with the down icon
10:18:39
There we go Just so we can essentially denote that this is a selectable item on our page Now you can see we have those
10:18:44
two chevrons pointing down Now what I want to do is I want to fill out the rest of our types for this So we're going to pass in our title This is going
10:18:50
to be for stage We're going to pass in our disabled state which comes just directly from our prop for disabled
10:18:56
There we go And then we can also finally get our options And the options here is going to be our application stages We
10:19:02
want to sort those So we're going to say two sorted using that sort application stages function And then we're going to
10:19:08
do a quick map on these for each stage And we essentially want to render out the exact code of label which is going
10:19:13
to be our stage details with our stage Just like that We also want to render
10:19:20
out our value which is stage and our key which is going to be our stage There we go So that entire section is done Right
10:19:26
now we don't have anything showing but at least we have the drop- down portion looking like it's there Next up I'm
10:19:31
going to copy this I'm going to paste this down into here This is going to be our rating This is going to have a title
10:19:36
of rating This is going to be our rating options We want to map through those but we don't need to sort them So we're
10:19:42
going to map through each rating Each rating is going to be rendered out as rating icons And we'll just come in here
10:19:48
with our rating icons Our value here and our value is going to be I And then our key right here is going to be our rating
10:19:54
And to get the index we just need to make sure we come in here like that And actually we need to swap this Our value should be the rating And our key should
10:20:01
be the index Just like that That should work properly now So now inside of our filter we can actually render out that content inside of a popover content So
10:20:08
we can say popover content just like that Class name on this is going to be a width of 200 pixels because we don't
10:20:13
want it to be too large We're going to get rid of all the padding and we're going to make sure our alignment on this is going to be at the start Then we're
10:20:21
going to use a command And this is something that we need to make sure we get from shad CN So let's just come in here Shad CN add the command component
10:20:28
which is kind of like a drop-own component of sorts that we can work with We want to force install that And now we can use that command inside of here
10:20:34
Let's just give it a second There we go And we want to make sure we install that from the shad CN portion We then want to
10:20:40
create a command list There we go And inside this command list we want to render what happens when it's
10:20:46
empty So we're going to say command empty is going to be no results found
10:20:52
This shouldn't happen unless they're searching for something in particular Then we're going to have a command group
10:20:57
just like this And inside this command group is where we actually loop through all the
10:21:02
different option values we have So for each option I want to render out what that option is So first here we're going
10:21:07
to figure out is this a selected option by just saying selected values has option value Then we can return our
10:21:15
command item It should have a key which we specified on our option So we can get our options
10:21:21
key Then we can come in here and we can say on select we want to do something in specific So we'll come in here on select
10:21:30
What I want to do is if it is already selected then I want to delete it from my selected values So I can say
10:21:37
selected values.delete option value Otherwise I want to add it to my list So I can say selected values
10:21:44
add option value There we go Then I can say my filter values is going to be
10:21:50
getting the selected values So I can say selected values just like that And I could say I want to set my filter values
10:21:56
on my column So I can say column set filter values equal to my filter values
10:22:02
Whoops Filter values.length greater than zero then we use our filter
10:22:08
values Otherwise we return undefined So this entire section code essentially is just saving this inside of our selected
10:22:14
values And then what we're doing is we're saying hey if our selected values has no values in it then return
10:22:19
undefined otherwise return whatever those selected values are Then inside this command item we can actually render out our content So we'll come in here
10:22:25
with a class name for this particular section using CN And we want to have some default styles Flex we'll do a size
10:22:32
of four We'll center these items There we go Justify them in the center
10:22:38
as well Rounded is going to be four pixels
10:22:43
And then finally we're going to add a border on this Then we can come in here where if it's selected we want to add some specific styles For example we want
10:22:50
a primary background border is going to be primary text is going to be primary foreground and if it's not selected we
10:22:57
want to add some other styles instead So for example border is going to be input And then all we need to do is make sure
10:23:03
we close this off Just like that And inside this div we can use the check icon And this is going to have some more
10:23:09
class names Text primary foreground There we go And we also want to give it
10:23:16
a size of 3.5 Close that off And that's everything inside that portion of our div Now
10:23:22
instead of a span we can put our option label So essentially we have a checkbox next to our actual label and then we can
10:23:28
render out what our each individual facets are So what this is doing is saying okay we know that we have a value of like applied interested and so on And
10:23:36
this facet allows us to get how many different items in our table match that particular value So we can say
10:23:41
facets.get option value This is going to determine if we have something for that particular
10:23:48
value If we do then I want to render that out So we're going to just put a span that's going to put that exact
10:23:53
content inside of it We don't even need the question mark on there There we go
10:23:58
So we're going to render that out And I'm going to add a bunch of class names For example text muted foreground Margin
10:24:03
on the left is auto to push it all the way to the right Flex size for items in
10:24:08
the center Justify the content in the center Font is going to be a mono font And we want
10:24:14
it to be extra small text Now that takes care of all of our command related stuff All we need is an option to be able to
10:24:19
clear out our filter So we can come in here selected values size If it is greater than zero then I want to add
10:24:25
just an option to clear out our filter So we'll come down here We'll say that we're going to have a command separator
10:24:31
to separate these two different items from each other Then we're going to have another command group And inside this
10:24:37
command group we're going to have one final command item There we go on select What this is going
10:24:44
to do if I make sure I spell that properly is it's going to take our column It's
10:24:50
going to get the filter
10:24:56
There we go Actually it's going to set the filter set the filter value to undefined just to clear out everything
10:25:01
that is currently inside of there And then what we want to do is just add some class names to style this So we'll say
10:25:06
that we want to justify in the center and the text is going to go in the center close off that command item and
10:25:12
it'll just say clear So that's a lot of content to essentially just create these dropdowns But now if we look at our code
10:25:18
you can see when I open this up you can see I get this nice little check mark dropdown that I can select all the values that I want I also get this
10:25:24
little box that tells me exactly how many I have selected Now I do notice there's a problem with our badges I don't think it's taking into account our
10:25:29
size So I'm going to look at our badge I'm going to make sure we're taking into account our size for the badge as well And it looks like I don't think we are I
10:25:37
want to make sure we have our size being taken into account here Just like that And then we want to use
10:25:43
that size down here There we go And now you can see that our badge has shrunk in size just like we
10:25:49
want And you can see right here that this item that says that there's one of each of these for applied and interested If I were to change one of these users
10:25:55
to a different type for example I change this guy to interested Now you can see that there are two people that are in the interested category and zero over
10:26:01
here So now that we have that done we can actually filter these things is we just kind of need to finish hooking everything together inside of our application table and so on For example
10:26:08
we need to create our disabled toolbar which is going to be quite simple to create We'll say disabled toolbar This
10:26:14
disabled toolbar is going to take in almost the exact same props as our toolbar It's just not going to have a disabled prop And what it's going to do
10:26:21
is it's just going to return our normal toolbar but it's going to pass in our table and
10:26:28
it's going to say that this is a disabled version Just like that So now if we give that a save we have our disabled toolbar rendering properly Now
10:26:34
to see what that looks like we can actually go back into our page where we are rendering this application So we can go into our employer job listings We can
10:26:41
go specifically for our job listing ID and you can see where we're rendering out our application Let's try to find
10:26:47
that skeleton table We're just going to take our skeleton table and put it right here Comment out this and this will show us our skeleton table It looks just like
10:26:54
this which is exactly what we want These are disabled and that is great So now let's go ahead and add in some default
10:26:59
states for everything So what we can do is go back into our application table and what I want to do is I want to
10:27:04
implement my initial filters Now in our case we essentially want to filter on stage where we get rid of the denied
10:27:10
people So what we want to do is we want to take in our ID is stage that just matches what we called our column Our
10:27:16
value here is going to be our application stages We want to filter out anyone that's denied So we're going to take the stage not equal to denied So
10:27:23
essentially we only select the options that are not denied Now if we give this a refresh we should see by default we
10:27:29
have four different stages selected And one of those right here is denied That's the only one that's not selected And you
10:27:35
also see we have the clear option down here if we want to clear out this entire filter Now if I were to select applied for example you can see that there are
10:27:41
two rows that are currently hidden Now I should probably add some text onto the bottom of that that says that these are hidden rows So I'll say two rows hidden
10:27:47
So that way they know that there are two rows currently being hidden from them So now they can easily see what's showing what's not showing If we want to clear
10:27:53
the filter we can clear that back out And now we have our rows showing up Now to make sure we're done with our application we're just going to go a
10:27:58
quick search for to-do So we'll say to-do just like this And you can see here that we have our AI generation We
10:28:03
did do that already So we can remove that to-do And same thing here the skeleton application table we finished that So we can remove that to-do And
10:28:09
that should be everything in our application completely done Now one minor problem that I noticed when going through our code is that inside of our
10:28:15
middleware we actually failed to put one route in there and that is our AI search route We want to make sure that our AI
10:28:21
search route is publicly available because that incentivizes people to actually create accounts with us Also another thing that we don't need that I
10:28:27
was looking through the code noticed is inside of our layout section we have this dark class we added for testing purposes We can remove that Another
10:28:33
minor problem I noticed with some of our CSS styling is I forgot to put the dash in a couple of my max height
10:28:39
calculations Looks like this is another one that I forgot it at So just make sure that inside of those two files that we have
10:28:45
that that's going to be the action cell as well as inside of our apply button component Another minor mistake I
10:28:51
noticed is I typed in this is an AI generated summary of our resume It should say your resume Not a huge deal
10:28:56
though Another very minor mistake is in my job listing page for the employer portion I typed max auto instead of MX
10:29:03
auto So another small styling mistake Another minor issue in this data faceted filter I accidentally put my command
10:29:09
separator as like a parent component which is definitely not what I should have done So that should hopefully fix some of the issues with that scroll bar
10:29:15
that we had So now you can see that this looks much better when we have this No weird scrolling issues like before Now
10:29:20
if you enjoyed this video and want to see other massive projectbased videos I'm going to link some right over here
10:29:26
And also if you want me to continue to be able to make videos like this I highly recommend checking out the sponsors They're going to be linked in
10:29:31
the description Their support single-handedly is what allows me to spend a month making a single large
10:29:36
project for a YouTube video for you to watch entirely for free So again I highly recommend you check out Injust and Clerk They'll be linked down in the
10:29:42
description below With that said thank you very much for watching and have a good