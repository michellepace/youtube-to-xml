Intro & Subscribe Reminder
0:00
I've been using Claude Code for a while,
0:02
made a ton of videos about it, and have
0:05
come up with some tips that I honestly
0:07
haven't seen anywhere else, like how to
0:10
run Claude Code on your phone and get
0:12
notifications. So, let's go through my
0:14
top 10 tips for using Claude Code. And
0:17
before we do, make sure you hit that
0:19
subscribe button.
0:21
The first tip is to use hooks for Claude
0:23
to get your attention. There are many
Tip #1: Notification Hooks Setup
0:25
times I've asked claw to do something. I
0:27
move on to something else. Then when I
0:29
go back, it's been sitting there waiting
0:31
for my input. But you can create a hook
0:34
to trigger at notification or stop. And
0:37
this will run any script or multiple
0:39
scripts. So in my case, it will play
0:41
this audio
0:42
task completed successfully
0:44
and also send a notification to my phone
0:46
for when I'm away from my computer.
0:49
Check out the link in the description to
0:50
learn more about hooks. The next tip is
0:53
to not be afraid of the dangerously skip
0:55
permissions flag to skip all permission
Tip #2: Skip Permissions Flag
0:57
checks from claw code. Now, this option
1:00
does come with a warning, but for the
1:02
most part, I haven't had any issues with
1:05
it. What I like to do is assign it as an
1:07
alias so it's easy to trigger. And if I
1:10
really want to turn it off, then I could
1:12
press shift tab and it's gone. Also,
1:14
pressing shift tab a few more times will
1:17
take you to plan mode so Claude won't
1:19
make any changes to your codebase. Now
Tip #3: Deny Sensitive File Access
1:21
with the dangerously skip permissions
1:23
flag, Claude will not ask permission to
1:26
access sensitive files. So the next tip
1:29
is to deny Claude read access to these
1:31
type of files. You can do this on a
1:33
global level or per project. Just make
1:36
sure you have something like this in
1:38
place. Tip four is to use think megaink
1:41
or ultraink in a prompt if you want to
1:43
increase Claude's thinking budget for
Tip #4: Think/Megathink/Ultrathink
1:45
scenarios where you want to perform deep
1:48
reasoning on multiple files. Think tells
1:50
Claude to use 4,000 tokens, Mega Think
1:53
10,000, and Ultraink almost 32,000. For
1:58
the next tip, you've most likely created
2:00
a Claude MD file, which gets
2:02
automatically pulled into context for a
Tip #5: Claude.md File Optimization
2:05
conversation. But did you know you can
2:06
use important in all caps to add
2:09
emphasis? So, Claude will pay special
2:11
attention to this. Use the at symbol to
2:14
link a file. And you can use the hashtag
2:16
or pound sign to add data to Claude's
2:19
memory, which can be updated in the file
2:21
or in Claude code. Since we're on the
2:24
topic of things about Claude code you
2:26
may already know about, did you know
Tip #6: Custom Slash Commands & Arguments
2:28
that you could add multiple arguments to
2:30
a custom slash command? You might have
2:32
already seen arguments in a file, but
2:35
this also lets you chain arguments and
2:37
then you can tell Claude what to do with
2:39
each of them. You can also nest slash
2:41
commands in folders and use this syntax
2:44
to reference them. Tip seven, if you've
Tip #7: Continue & Resume Sessions
2:46
accidentally closed a conversation, you
2:49
can continue from where you left off
2:50
using the continue flag. Or if you've
2:53
closed multiple sessions, you can use
2:54
the resume flag to select which one to
2:57
continue. But did you know you can press
2:59
the escape key twice to go back through
3:01
your conversation history and continue
3:03
on from that point? This is useful for
3:05
when Claude goes in a loop when
3:07
debugging and you want to go back before
3:09
that happened. Now, the next few tips
3:11
focus on extending Claude's
3:12
functionality with external plugins like
Tip #8: External Plugins (Claude Squad)
3:15
Claude Squad, which lets you create
3:17
different sessions on different git work
3:19
trees automatically so you can see what
3:21
each agent is working on. But you can
3:23
also do this manually with T-Max or Vibe
3:26
Tunnel which can proxy a terminal to
3:28
your browser so you can access Claude's
3:30
code on the go. For me, the combination
Tip #9: Mobile Access with Vibetunnel
3:33
of phone notifications and vibe tunnel
3:35
has been something I've wanted out of
3:37
clawed code for a while so I could use
3:39
it on my phone to check on tasks and get
3:42
notifications. Now, I'm sure in the
3:43
future Anthropic will release a feature
3:45
that can do this exact same thing. But
3:48
for now, this will have to do. The final
3:50
tip is to do with cost savings because
3:52
let's face it, claudes can get quite
3:55
expensive. And one thing that helps save
Tip #10: Cost Savings & KimiK2 Alternative
3:58
costs is to use the clear command
4:00
whenever you want to talk to Claude
4:02
about a new topic to free up some
4:04
context. But what's even better is to
4:07
use the Kimmy K2 model, which has very
4:10
impressive benchmarks, is 80% cheaper
4:13
than Claude, and can actually be used
4:15
inside Claude code. Check out this video
4:18
to learn all about Kim K2. And until
4:21
next time, happy coding. Hey, it's me
4:24
again. If you enjoyed this video, go and
4:26
check out BetterStack. It's an amazing
4:28
product that I use all the time to help
4:31
me write better, more robust software.
4:33
And it's got a free tier, so you've got
4:35
no excuse not to check it