Intro & Why Next.js
0:01
so you are a web developer and have
0:02
spent the last few months learning React
0:04
You probably built a couple cool
0:05
websites learned how to use React Hooks
0:08
but you keep hearing about people using
0:10
this thing called Nex.js You might have
0:12
gone on to Twitter and seen people
0:13
building 1 million MR SAS companies
0:16
saying that you have to use Next So you
0:19
might be tempted to just vibe code your
0:21
next big project since you don't really
0:23
want to spend time learning a new
0:25
technology But wait in this video I will
0:28
teach you everything you need to know
0:30
about Nex.js in only 6 minutes So let's
0:33
start with this Nex.js is a React
0:36
framework It gives you routing server
0:38
rendering API routes image optimization
0:41
and everything you need to know to make
0:43
your website rank super high in SEO
0:45
right out of the box So instead of
0:47
setting up your whole stack manually you
0:50
just start building To start things off
0:52
you will need to set up an Nex.js JS
Setting Up a Next.js Project
0:54
project by running the command npx
0:56
create next app This will create the
0:59
boilerplate code for your project A
1:01
NexJS project has a very familiar folder
1:04
structure This means that you will be
1:06
able to immediately familiarize yourself
1:09
with any NexJS codebase just by looking
1:12
at it Check out the project on the
1:14
screen This project by default looks a
1:16
lot like a normal React project but the
1:19
only main difference is that it has a
1:21
next doconfig.ts ts file This file is
1:24
simply used for customizing and
1:26
configuring anything in your app ranging
1:29
from environment variables to your build
1:31
instructions Now the main difference is
1:33
that if you're working with Nex.js you
1:36
can forget libraries such as React
1:38
Router DOM In Nex.js routing is done
1:41
purely based on your file system There
Pages Router vs App Router
1:44
are two types of routing that you can do
1:46
in Next the app and the pages router The
1:49
app router allows you to create a route
1:51
by simply creating a folder with the
1:53
name of a route and then render a
1:55
component inside of a page.tsx file
1:57
inside of that folder So if you wanted
1:59
to make an about page on your website
2:02
you would create an about folder inside
2:03
of the app folder and then inside of the
2:06
about folder you would just make a
2:07
page.csx file and put the component
2:10
inside of there For the pages router you
2:12
have a folder called pages And whatever
2:15
file or folder you put inside of it the
2:17
name of that file will become a route So
2:20
if we were to go with the same example
2:21
we would make the about file using the
2:24
about.tsx file inside of the pages
2:26
folder Now out of the two options the
2:29
app router is the most scalable option
2:31
and the pages router has become legacy
2:33
since Nex.js13 By default components in
2:37
the app folder are server components
2:39
This means that they run on a server and
2:42
only send HTML to the client super fast
2:45
This means that in a server component
2:47
you don't have access to client browser
2:49
features like the onclick of a button So
2:51
the component you're seeing on the
2:53
screen is a server component But the
2:55
problem is that there's a button which
2:57
has an onclick which is a browser event
3:00
So the handleclick function that is
3:02
called when you click the button won't
3:04
work When you need interactivity like
3:07
the use state hook other react hooks or
3:09
an onclick for example you need to
3:12
create a client component and you do
3:13
that by creating a new file for a
3:16
component and adding the use client tag
3:19
at the top of your file This will tell
3:21
Nex.js to render it on the client Then
Server vs Client Components
3:24
you can actually call this component
3:26
inside of a server component So and the
3:29
idea is that you have a server component
3:31
for your route your page and then you
3:33
have a separate client component that
3:35
you call on the server whenever you need
3:37
stuff like hooks or browser
3:40
interactivity Now why would you want to
3:42
have a server component in the first
3:44
place well they are great for
3:46
performance and SEO because they allow
3:49
users to have a faster initial page load
3:52
due to having less JavaScript being sent
3:54
to the browser And also since server
3:56
components have pre-rendered HTML search
3:59
engine crawlers from Google for example
4:01
can easily find keywords to rank your
4:04
website higher you can now in Nex.js mix
4:07
and match both different types of
4:09
components for optimal performance Now
4:12
what about when you need to fetch some
Data Fetching in Next.js
4:14
data well in React you would normally
4:17
have some sort of uh function that would
4:20
call the fetch API and you would put
4:22
that inside of a use effect hook But in
4:25
Nex.js you can do it directly inside of
4:27
your component by making your component
4:29
definition be an async function and just
4:32
using the await inside of it Next will
4:35
handle caching revalidating and loading
4:38
the UI for you If you want to actually
4:40
create a loading state for when the data
4:42
is loading you can simply just make a
4:44
loading.tcsx file in the same folder
4:47
that you created the route that is
4:49
fetching that data And whenever the
4:51
information is loading that component
4:53
will be rendered But in that example I
4:55
called a public API But one of the cool
4:58
things about next is that you can create
5:00
your own API directly in the project
API Routes & Image Optimization
5:02
using API routes To create an API
5:05
endpoint you simply make a folder called
5:07
API And every folder you put inside of
5:10
it with a file called route.ts will
5:13
become an API endpoint For example if I
5:16
for some reason want to make an endpoint
5:17
called hello I'll just create a folder
5:20
called hello inside of the API folder
5:22
and then put a route.cts file inside of
5:24
it and I can create get post put and
5:28
delete functions inside of it to handle
5:30
the different HTTP methods that that API
5:33
route will handle And you can see that
5:35
you can handle everything that an API
5:37
would require without needing express
5:39
And it's all handled inside of the same
5:41
project that you're building your front
5:43
end in Also another cool thing is that
5:46
Next is built to optimize for you It
5:49
means that even simple things like
5:51
rendering an image is way better In next
5:54
you use the image component and it will
5:56
automatically compress and lazy load
5:59
images for you This will improve
6:01
performance without you having to do
6:02
absolutely anything Finally one of the
6:05
main advantages of using Next is the SEO
SEO in Next.js & Final Thoughts
6:08
benefits For every single route I make
6:10
on a next project I'm able to clearly
6:12
define SEO metadata for it For example
6:15
if I'm going to make a website and I
6:17
want to make an about us page that part
6:19
is important because it has a lot of
6:21
high ranking keywords and information
6:24
about my website that would help the
6:26
website rank So I can easily set SEO
6:29
metadata like the title description and
6:31
even keywords like this This is insanely
6:34
beneficial for you because if you want
6:36
to have success ranking on Google
6:38
especially in today's age of AI you have
6:41
to have some sort of website that is
6:43
optimized for SEO Now you're ready to
6:46
build your next SAS idea without vibe
6:48
coding it all the way through If you
6:50
want to learn more about Nex.js I can
6:53
definitely make a Nex.js crash course
6:56
And also if you want to learn React from
6:58
scratch check out my new ReactJS course
7:00
for beginners This course will teach you
7:03
everything you need to know to go from a
7:05
beginner to advanced I've been getting
7:07
really good feedback from the first few
7:09
students and we currently have early
7:11
bird pricing still So if you want to use
7:13
the code early 100 you will get 20% off
7:16
Go to
7:18
courses.padac.co or click the link in
7:20
the description If this video helped
7:22
leave a like subscribe and let me know
7:24
what you want to see next So thank you
7:26
so much for watching and I see you guys
7:28
next time